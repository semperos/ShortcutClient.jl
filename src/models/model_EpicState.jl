# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EpicState
Epic State is any of the at least 3 columns. Epic States correspond to one of 3 types: Unstarted, Started, or Done.

    EpicState(;
        description=nothing,
        entity_type=nothing,
        color=nothing,
        name=nothing,
        global_id=nothing,
        type=nothing,
        updated_at=nothing,
        id=nothing,
        position=nothing,
        created_at=nothing,
    )

    - description::String : The description of what sort of Epics belong in that Epic State.
    - entity_type::String : A string description of this resource.
    - color::String : The hex color for this Epic State.
    - name::String : The Epic State&#39;s name.
    - global_id::String
    - type::String : The type of Epic State (Unstarted, Started, or Done)
    - updated_at::ZonedDateTime : When the Epic State was last updated.
    - id::Int64 : The unique ID of the Epic State.
    - position::Int64 : The position that the Epic State is in, starting with 0 at the left.
    - created_at::ZonedDateTime : The time/date the Epic State was created.
"""
Base.@kwdef mutable struct EpicState <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    color::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    global_id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    id::Union{Nothing, Int64} = nothing
    position::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function EpicState(description, entity_type, color, name, global_id, type, updated_at, id, position, created_at, )
        OpenAPI.validate_property(EpicState, Symbol("description"), description)
        OpenAPI.validate_property(EpicState, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(EpicState, Symbol("color"), color)
        OpenAPI.validate_property(EpicState, Symbol("name"), name)
        OpenAPI.validate_property(EpicState, Symbol("global_id"), global_id)
        OpenAPI.validate_property(EpicState, Symbol("type"), type)
        OpenAPI.validate_property(EpicState, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(EpicState, Symbol("id"), id)
        OpenAPI.validate_property(EpicState, Symbol("position"), position)
        OpenAPI.validate_property(EpicState, Symbol("created_at"), created_at)
        return new(description, entity_type, color, name, global_id, type, updated_at, id, position, created_at, )
    end
end # type EpicState

const _property_types_EpicState = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("entity_type")=>"String", Symbol("color")=>"String", Symbol("name")=>"String", Symbol("global_id")=>"String", Symbol("type")=>"String", Symbol("updated_at")=>"ZonedDateTime", Symbol("id")=>"Int64", Symbol("position")=>"Int64", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ EpicState }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EpicState[name]))}

function check_required(o::EpicState)
    o.description === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.name === nothing && (return false)
    o.global_id === nothing && (return false)
    o.type === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.id === nothing && (return false)
    o.position === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ EpicState }, name::Symbol, val)



    if name === Symbol("color")
        OpenAPI.validate_param(name, "EpicState", :format, val, "css-color")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "EpicState", :minLength, val, 1)
        OpenAPI.validate_param(name, "EpicState", :pattern, val, r"^#[a-fA-F0-9]{6}$")
    end




    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "EpicState", :format, val, "date-time")
    end

    if name === Symbol("id")
        OpenAPI.validate_param(name, "EpicState", :format, val, "int64")
    end

    if name === Symbol("position")
        OpenAPI.validate_param(name, "EpicState", :format, val, "int64")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "EpicState", :format, val, "date-time")
    end
end
