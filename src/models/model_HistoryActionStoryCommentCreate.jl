# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryActionStoryCommentCreate
An action representing a Story Comment being created.

    HistoryActionStoryCommentCreate(;
        id=nothing,
        entity_type=nothing,
        action=nothing,
        app_url=nothing,
        text=nothing,
        author_id=nothing,
    )

    - id::Int64 : The ID of the entity referenced.
    - entity_type::String : The type of entity referenced.
    - action::String : The action of the entity referenced.
    - app_url::String : The application URL of the Story Comment.
    - text::String : The text of the Story Comment.
    - author_id::String : The Member ID of who created the Story Comment.
"""
Base.@kwdef mutable struct HistoryActionStoryCommentCreate <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    entity_type::Union{Nothing, String} = nothing
    action::Union{Nothing, String} = nothing
    app_url::Union{Nothing, String} = nothing
    text::Union{Nothing, String} = nothing
    author_id::Union{Nothing, String} = nothing

    function HistoryActionStoryCommentCreate(id, entity_type, action, app_url, text, author_id, )
        OpenAPI.validate_property(HistoryActionStoryCommentCreate, Symbol("id"), id)
        OpenAPI.validate_property(HistoryActionStoryCommentCreate, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryActionStoryCommentCreate, Symbol("action"), action)
        OpenAPI.validate_property(HistoryActionStoryCommentCreate, Symbol("app_url"), app_url)
        OpenAPI.validate_property(HistoryActionStoryCommentCreate, Symbol("text"), text)
        OpenAPI.validate_property(HistoryActionStoryCommentCreate, Symbol("author_id"), author_id)
        return new(id, entity_type, action, app_url, text, author_id, )
    end
end # type HistoryActionStoryCommentCreate

const _property_types_HistoryActionStoryCommentCreate = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("entity_type")=>"String", Symbol("action")=>"String", Symbol("app_url")=>"String", Symbol("text")=>"String", Symbol("author_id")=>"String", )
OpenAPI.property_type(::Type{ HistoryActionStoryCommentCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryActionStoryCommentCreate[name]))}

function check_required(o::HistoryActionStoryCommentCreate)
    o.id === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.action === nothing && (return false)
    o.app_url === nothing && (return false)
    o.text === nothing && (return false)
    o.author_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryActionStoryCommentCreate }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "HistoryActionStoryCommentCreate", :format, val, "int64")
    end


    if name === Symbol("action")
        OpenAPI.validate_param(name, "HistoryActionStoryCommentCreate", :enum, val, ["create"])
    end


    if name === Symbol("app_url")
        OpenAPI.validate_param(name, "HistoryActionStoryCommentCreate", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "HistoryActionStoryCommentCreate", :pattern, val, r"^https?:\/\/.+$")
    end


    if name === Symbol("author_id")
        OpenAPI.validate_param(name, "HistoryActionStoryCommentCreate", :format, val, "uuid")
    end
end
