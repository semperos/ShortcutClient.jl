# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateMilestone

    CreateMilestone(;
        name=nothing,
        description=nothing,
        state=nothing,
        started_at_override=nothing,
        completed_at_override=nothing,
        categories=nothing,
    )

    - name::String : The name of the Milestone.
    - description::String : The Milestone&#39;s description.
    - state::String : The workflow state that the Milestone is in.
    - started_at_override::ZonedDateTime : A manual override for the time/date the Milestone was started.
    - completed_at_override::ZonedDateTime : A manual override for the time/date the Milestone was completed.
    - categories::Vector{CreateCategoryParams} : An array of IDs of Categories attached to the Milestone.
"""
Base.@kwdef mutable struct CreateMilestone <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    started_at_override::Union{Nothing, ZonedDateTime} = nothing
    completed_at_override::Union{Nothing, ZonedDateTime} = nothing
    categories::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateCategoryParams} }

    function CreateMilestone(name, description, state, started_at_override, completed_at_override, categories, )
        OpenAPI.validate_property(CreateMilestone, Symbol("name"), name)
        OpenAPI.validate_property(CreateMilestone, Symbol("description"), description)
        OpenAPI.validate_property(CreateMilestone, Symbol("state"), state)
        OpenAPI.validate_property(CreateMilestone, Symbol("started_at_override"), started_at_override)
        OpenAPI.validate_property(CreateMilestone, Symbol("completed_at_override"), completed_at_override)
        OpenAPI.validate_property(CreateMilestone, Symbol("categories"), categories)
        return new(name, description, state, started_at_override, completed_at_override, categories, )
    end
end # type CreateMilestone

const _property_types_CreateMilestone = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("state")=>"String", Symbol("started_at_override")=>"ZonedDateTime", Symbol("completed_at_override")=>"ZonedDateTime", Symbol("categories")=>"Vector{CreateCategoryParams}", )
OpenAPI.property_type(::Type{ CreateMilestone }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateMilestone[name]))}

function check_required(o::CreateMilestone)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateMilestone }, name::Symbol, val)

    if name === Symbol("name")
        OpenAPI.validate_param(name, "CreateMilestone", :maxLength, val, 256)
        OpenAPI.validate_param(name, "CreateMilestone", :minLength, val, 1)
    end

    if name === Symbol("description")
        OpenAPI.validate_param(name, "CreateMilestone", :maxLength, val, 100000)
    end

    if name === Symbol("state")
        OpenAPI.validate_param(name, "CreateMilestone", :enum, val, ["in progress", "to do", "done"])
    end


    if name === Symbol("started_at_override")
        OpenAPI.validate_param(name, "CreateMilestone", :format, val, "date-time")
    end

    if name === Symbol("completed_at_override")
        OpenAPI.validate_param(name, "CreateMilestone", :format, val, "date-time")
    end

end
