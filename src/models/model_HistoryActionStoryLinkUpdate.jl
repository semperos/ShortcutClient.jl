# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryActionStoryLinkUpdate
An action representing a Story Link being updated.

    HistoryActionStoryLinkUpdate(;
        id=nothing,
        entity_type=nothing,
        action=nothing,
        verb=nothing,
        subject_id=nothing,
        object_id=nothing,
        changes=nothing,
    )

    - id::Int64 : The ID of the entity referenced.
    - entity_type::String : The type of entity referenced.
    - action::String : The action of the entity referenced.
    - verb::String : The verb describing the link&#39;s relationship.
    - subject_id::Int64 : The Story ID of the subject Story.
    - object_id::Int64 : The Story ID of the object Story.
    - changes::HistoryChangesStoryLink
"""
Base.@kwdef mutable struct HistoryActionStoryLinkUpdate <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    entity_type::Union{Nothing, String} = nothing
    action::Union{Nothing, String} = nothing
    verb::Union{Nothing, String} = nothing
    subject_id::Union{Nothing, Int64} = nothing
    object_id::Union{Nothing, Int64} = nothing
    changes = nothing # spec type: Union{ Nothing, HistoryChangesStoryLink }

    function HistoryActionStoryLinkUpdate(id, entity_type, action, verb, subject_id, object_id, changes, )
        OpenAPI.validate_property(HistoryActionStoryLinkUpdate, Symbol("id"), id)
        OpenAPI.validate_property(HistoryActionStoryLinkUpdate, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryActionStoryLinkUpdate, Symbol("action"), action)
        OpenAPI.validate_property(HistoryActionStoryLinkUpdate, Symbol("verb"), verb)
        OpenAPI.validate_property(HistoryActionStoryLinkUpdate, Symbol("subject_id"), subject_id)
        OpenAPI.validate_property(HistoryActionStoryLinkUpdate, Symbol("object_id"), object_id)
        OpenAPI.validate_property(HistoryActionStoryLinkUpdate, Symbol("changes"), changes)
        return new(id, entity_type, action, verb, subject_id, object_id, changes, )
    end
end # type HistoryActionStoryLinkUpdate

const _property_types_HistoryActionStoryLinkUpdate = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("entity_type")=>"String", Symbol("action")=>"String", Symbol("verb")=>"String", Symbol("subject_id")=>"Int64", Symbol("object_id")=>"Int64", Symbol("changes")=>"HistoryChangesStoryLink", )
OpenAPI.property_type(::Type{ HistoryActionStoryLinkUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryActionStoryLinkUpdate[name]))}

function check_required(o::HistoryActionStoryLinkUpdate)
    o.id === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.action === nothing && (return false)
    o.verb === nothing && (return false)
    o.subject_id === nothing && (return false)
    o.object_id === nothing && (return false)
    o.changes === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryActionStoryLinkUpdate }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "HistoryActionStoryLinkUpdate", :format, val, "int64")
    end


    if name === Symbol("action")
        OpenAPI.validate_param(name, "HistoryActionStoryLinkUpdate", :enum, val, ["update"])
    end


    if name === Symbol("verb")
        OpenAPI.validate_param(name, "HistoryActionStoryLinkUpdate", :enum, val, ["blocks", "duplicates", "relates to"])
    end


    if name === Symbol("subject_id")
        OpenAPI.validate_param(name, "HistoryActionStoryLinkUpdate", :format, val, "int64")
    end

    if name === Symbol("object_id")
        OpenAPI.validate_param(name, "HistoryActionStoryLinkUpdate", :format, val, "int64")
    end

end
