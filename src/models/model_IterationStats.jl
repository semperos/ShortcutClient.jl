# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""IterationStats
A group of calculated values for this Iteration.

    IterationStats(;
        num_points_done=nothing,
        num_related_documents=nothing,
        average_cycle_time=nothing,
        num_stories_unstarted=nothing,
        num_points_started=nothing,
        num_points_unstarted=nothing,
        num_stories_started=nothing,
        num_stories_unestimated=nothing,
        num_stories_backlog=nothing,
        average_lead_time=nothing,
        num_points_backlog=nothing,
        num_points=nothing,
        num_stories_done=nothing,
    )

    - num_points_done::Int64 : The total number of completed points in this Iteration.
    - num_related_documents::Int64 : The total number of documents related to an Iteration
    - average_cycle_time::Int64 : The average cycle time (in seconds) of completed stories in this Iteration.
    - num_stories_unstarted::Int64 : The total number of unstarted Stories in this Iteration.
    - num_points_started::Int64 : The total number of started points in this Iteration.
    - num_points_unstarted::Int64 : The total number of unstarted points in this Iteration.
    - num_stories_started::Int64 : The total number of started Stories in this Iteration.
    - num_stories_unestimated::Int64 : The total number of Stories with no point estimate.
    - num_stories_backlog::Int64 : The total number of backlog Stories in this Iteration.
    - average_lead_time::Int64 : The average lead time (in seconds) of completed stories in this Iteration.
    - num_points_backlog::Int64 : The total number of backlog points in this Iteration.
    - num_points::Int64 : The total number of points in this Iteration.
    - num_stories_done::Int64 : The total number of done Stories in this Iteration.
"""
Base.@kwdef mutable struct IterationStats <: OpenAPI.APIModel
    num_points_done::Union{Nothing, Int64} = nothing
    num_related_documents::Union{Nothing, Int64} = nothing
    average_cycle_time::Union{Nothing, Int64} = nothing
    num_stories_unstarted::Union{Nothing, Int64} = nothing
    num_points_started::Union{Nothing, Int64} = nothing
    num_points_unstarted::Union{Nothing, Int64} = nothing
    num_stories_started::Union{Nothing, Int64} = nothing
    num_stories_unestimated::Union{Nothing, Int64} = nothing
    num_stories_backlog::Union{Nothing, Int64} = nothing
    average_lead_time::Union{Nothing, Int64} = nothing
    num_points_backlog::Union{Nothing, Int64} = nothing
    num_points::Union{Nothing, Int64} = nothing
    num_stories_done::Union{Nothing, Int64} = nothing

    function IterationStats(num_points_done, num_related_documents, average_cycle_time, num_stories_unstarted, num_points_started, num_points_unstarted, num_stories_started, num_stories_unestimated, num_stories_backlog, average_lead_time, num_points_backlog, num_points, num_stories_done, )
        OpenAPI.validate_property(IterationStats, Symbol("num_points_done"), num_points_done)
        OpenAPI.validate_property(IterationStats, Symbol("num_related_documents"), num_related_documents)
        OpenAPI.validate_property(IterationStats, Symbol("average_cycle_time"), average_cycle_time)
        OpenAPI.validate_property(IterationStats, Symbol("num_stories_unstarted"), num_stories_unstarted)
        OpenAPI.validate_property(IterationStats, Symbol("num_points_started"), num_points_started)
        OpenAPI.validate_property(IterationStats, Symbol("num_points_unstarted"), num_points_unstarted)
        OpenAPI.validate_property(IterationStats, Symbol("num_stories_started"), num_stories_started)
        OpenAPI.validate_property(IterationStats, Symbol("num_stories_unestimated"), num_stories_unestimated)
        OpenAPI.validate_property(IterationStats, Symbol("num_stories_backlog"), num_stories_backlog)
        OpenAPI.validate_property(IterationStats, Symbol("average_lead_time"), average_lead_time)
        OpenAPI.validate_property(IterationStats, Symbol("num_points_backlog"), num_points_backlog)
        OpenAPI.validate_property(IterationStats, Symbol("num_points"), num_points)
        OpenAPI.validate_property(IterationStats, Symbol("num_stories_done"), num_stories_done)
        return new(num_points_done, num_related_documents, average_cycle_time, num_stories_unstarted, num_points_started, num_points_unstarted, num_stories_started, num_stories_unestimated, num_stories_backlog, average_lead_time, num_points_backlog, num_points, num_stories_done, )
    end
end # type IterationStats

const _property_types_IterationStats = Dict{Symbol,String}(Symbol("num_points_done")=>"Int64", Symbol("num_related_documents")=>"Int64", Symbol("average_cycle_time")=>"Int64", Symbol("num_stories_unstarted")=>"Int64", Symbol("num_points_started")=>"Int64", Symbol("num_points_unstarted")=>"Int64", Symbol("num_stories_started")=>"Int64", Symbol("num_stories_unestimated")=>"Int64", Symbol("num_stories_backlog")=>"Int64", Symbol("average_lead_time")=>"Int64", Symbol("num_points_backlog")=>"Int64", Symbol("num_points")=>"Int64", Symbol("num_stories_done")=>"Int64", )
OpenAPI.property_type(::Type{ IterationStats }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IterationStats[name]))}

function check_required(o::IterationStats)
    o.num_points_done === nothing && (return false)
    o.num_related_documents === nothing && (return false)
    o.num_stories_unstarted === nothing && (return false)
    o.num_points_started === nothing && (return false)
    o.num_points_unstarted === nothing && (return false)
    o.num_stories_started === nothing && (return false)
    o.num_stories_unestimated === nothing && (return false)
    o.num_stories_backlog === nothing && (return false)
    o.num_points_backlog === nothing && (return false)
    o.num_points === nothing && (return false)
    o.num_stories_done === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IterationStats }, name::Symbol, val)

    if name === Symbol("num_points_done")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_related_documents")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("average_cycle_time")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_stories_unstarted")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_points_started")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_points_unstarted")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_stories_started")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_stories_unestimated")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_stories_backlog")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("average_lead_time")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_points_backlog")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_points")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end

    if name === Symbol("num_stories_done")
        OpenAPI.validate_param(name, "IterationStats", :format, val, "int64")
    end
end
