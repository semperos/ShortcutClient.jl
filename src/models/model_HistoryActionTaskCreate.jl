# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryActionTaskCreate
An action representing a Task being created.

    HistoryActionTaskCreate(;
        description=nothing,
        entity_type=nothing,
        mention_ids=nothing,
        group_mention_ids=nothing,
        owner_ids=nothing,
        id=nothing,
        action=nothing,
        complete=nothing,
        deadline=nothing,
    )

    - description::String : The description of the Task.
    - entity_type::String : The type of entity referenced.
    - mention_ids::Vector{String} : An array of Member IDs that represent who has been mentioned in the Task.
    - group_mention_ids::Vector{String} : An array of Groups IDs that represent which have been mentioned in the Task.
    - owner_ids::Vector{String} : An array of Member IDs that represent the Task&#39;s owners.
    - id::Int64 : The ID of the entity referenced.
    - action::String : The action of the entity referenced.
    - complete::Bool : Whether or not the Task is complete.
    - deadline::String : A timestamp that represent&#39;s the Task&#39;s deadline.
"""
Base.@kwdef mutable struct HistoryActionTaskCreate <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    mention_ids::Union{Nothing, Vector{String}} = nothing
    group_mention_ids::Union{Nothing, Vector{String}} = nothing
    owner_ids::Union{Nothing, Vector{String}} = nothing
    id::Union{Nothing, Int64} = nothing
    action::Union{Nothing, String} = nothing
    complete::Union{Nothing, Bool} = nothing
    deadline::Union{Nothing, String} = nothing

    function HistoryActionTaskCreate(description, entity_type, mention_ids, group_mention_ids, owner_ids, id, action, complete, deadline, )
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("description"), description)
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("mention_ids"), mention_ids)
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("group_mention_ids"), group_mention_ids)
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("owner_ids"), owner_ids)
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("id"), id)
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("action"), action)
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("complete"), complete)
        OpenAPI.validate_property(HistoryActionTaskCreate, Symbol("deadline"), deadline)
        return new(description, entity_type, mention_ids, group_mention_ids, owner_ids, id, action, complete, deadline, )
    end
end # type HistoryActionTaskCreate

const _property_types_HistoryActionTaskCreate = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("entity_type")=>"String", Symbol("mention_ids")=>"Vector{String}", Symbol("group_mention_ids")=>"Vector{String}", Symbol("owner_ids")=>"Vector{String}", Symbol("id")=>"Int64", Symbol("action")=>"String", Symbol("complete")=>"Bool", Symbol("deadline")=>"String", )
OpenAPI.property_type(::Type{ HistoryActionTaskCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryActionTaskCreate[name]))}

function check_required(o::HistoryActionTaskCreate)
    o.description === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.id === nothing && (return false)
    o.action === nothing && (return false)
    o.complete === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryActionTaskCreate }, name::Symbol, val)






    if name === Symbol("id")
        OpenAPI.validate_param(name, "HistoryActionTaskCreate", :format, val, "int64")
    end

    if name === Symbol("action")
        OpenAPI.validate_param(name, "HistoryActionTaskCreate", :enum, val, ["create"])
    end



end
