# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateTask

    UpdateTask(;
        description=nothing,
        owner_ids=nothing,
        complete=nothing,
        before_id=nothing,
        after_id=nothing,
    )

    - description::String : The Task&#39;s description.
    - owner_ids::Vector{String} : An array of UUIDs of the owners of this story.
    - complete::Bool : A true/false boolean indicating whether the task is complete.
    - before_id::Int64 : Move task before this task ID.
    - after_id::Int64 : Move task after this task ID.
"""
Base.@kwdef mutable struct UpdateTask <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    owner_ids::Union{Nothing, Vector{String}} = nothing
    complete::Union{Nothing, Bool} = nothing
    before_id::Union{Nothing, Int64} = nothing
    after_id::Union{Nothing, Int64} = nothing

    function UpdateTask(description, owner_ids, complete, before_id, after_id, )
        OpenAPI.validate_property(UpdateTask, Symbol("description"), description)
        OpenAPI.validate_property(UpdateTask, Symbol("owner_ids"), owner_ids)
        OpenAPI.validate_property(UpdateTask, Symbol("complete"), complete)
        OpenAPI.validate_property(UpdateTask, Symbol("before_id"), before_id)
        OpenAPI.validate_property(UpdateTask, Symbol("after_id"), after_id)
        return new(description, owner_ids, complete, before_id, after_id, )
    end
end # type UpdateTask

const _property_types_UpdateTask = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("owner_ids")=>"Vector{String}", Symbol("complete")=>"Bool", Symbol("before_id")=>"Int64", Symbol("after_id")=>"Int64", )
OpenAPI.property_type(::Type{ UpdateTask }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateTask[name]))}

function check_required(o::UpdateTask)
    true
end

function OpenAPI.validate_property(::Type{ UpdateTask }, name::Symbol, val)

    if name === Symbol("description")
        OpenAPI.validate_param(name, "UpdateTask", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "UpdateTask", :minLength, val, 1)
    end



    if name === Symbol("before_id")
        OpenAPI.validate_param(name, "UpdateTask", :format, val, "int64")
    end

    if name === Symbol("after_id")
        OpenAPI.validate_param(name, "UpdateTask", :format, val, "int64")
    end
end
