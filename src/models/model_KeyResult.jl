# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""KeyResult

    KeyResult(;
        id=nothing,
        name=nothing,
        objective_id=nothing,
        type=nothing,
        initial_observed_value=nothing,
        current_observed_value=nothing,
        current_target_value=nothing,
        progress=nothing,
    )

    - id::String : The ID of the Key Result.
    - name::String : The name of the Key Result.
    - objective_id::Int64 : The Objective to which this Key Result belongs.
    - type::String : The type of the Key Result (numeric, percent, or boolean).
    - initial_observed_value::KeyResultValue
    - current_observed_value::KeyResultValue
    - current_target_value::KeyResultValue
    - progress::Int64 : The integer percentage of progress toward completion of the Key Result.
"""
Base.@kwdef mutable struct KeyResult <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    objective_id::Union{Nothing, Int64} = nothing
    type::Union{Nothing, String} = nothing
    initial_observed_value = nothing # spec type: Union{ Nothing, KeyResultValue }
    current_observed_value = nothing # spec type: Union{ Nothing, KeyResultValue }
    current_target_value = nothing # spec type: Union{ Nothing, KeyResultValue }
    progress::Union{Nothing, Int64} = nothing

    function KeyResult(id, name, objective_id, type, initial_observed_value, current_observed_value, current_target_value, progress, )
        OpenAPI.validate_property(KeyResult, Symbol("id"), id)
        OpenAPI.validate_property(KeyResult, Symbol("name"), name)
        OpenAPI.validate_property(KeyResult, Symbol("objective_id"), objective_id)
        OpenAPI.validate_property(KeyResult, Symbol("type"), type)
        OpenAPI.validate_property(KeyResult, Symbol("initial_observed_value"), initial_observed_value)
        OpenAPI.validate_property(KeyResult, Symbol("current_observed_value"), current_observed_value)
        OpenAPI.validate_property(KeyResult, Symbol("current_target_value"), current_target_value)
        OpenAPI.validate_property(KeyResult, Symbol("progress"), progress)
        return new(id, name, objective_id, type, initial_observed_value, current_observed_value, current_target_value, progress, )
    end
end # type KeyResult

const _property_types_KeyResult = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("objective_id")=>"Int64", Symbol("type")=>"String", Symbol("initial_observed_value")=>"KeyResultValue", Symbol("current_observed_value")=>"KeyResultValue", Symbol("current_target_value")=>"KeyResultValue", Symbol("progress")=>"Int64", )
OpenAPI.property_type(::Type{ KeyResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_KeyResult[name]))}

function check_required(o::KeyResult)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.objective_id === nothing && (return false)
    o.type === nothing && (return false)
    o.initial_observed_value === nothing && (return false)
    o.current_observed_value === nothing && (return false)
    o.current_target_value === nothing && (return false)
    o.progress === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ KeyResult }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "KeyResult", :format, val, "uuid")
    end


    if name === Symbol("objective_id")
        OpenAPI.validate_param(name, "KeyResult", :format, val, "int64")
    end

    if name === Symbol("type")
        OpenAPI.validate_param(name, "KeyResult", :enum, val, ["percent", "boolean", "numeric"])
    end





    if name === Symbol("progress")
        OpenAPI.validate_param(name, "KeyResult", :format, val, "int64")
    end
end
