# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryActionTaskUpdate
An action representing a Task being updated.

    HistoryActionTaskUpdate(;
        id=nothing,
        entity_type=nothing,
        action=nothing,
        changes=nothing,
        complete=nothing,
        description=nothing,
        story_id=nothing,
    )

    - id::Int64 : The ID of the entity referenced.
    - entity_type::String : The type of entity referenced.
    - action::String : The action of the entity referenced.
    - changes::HistoryChangesTask
    - complete::Bool : Whether or not the Task is complete.
    - description::String : The description of the Task.
    - story_id::Int64 : The Story ID that contains the Task.
"""
Base.@kwdef mutable struct HistoryActionTaskUpdate <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    entity_type::Union{Nothing, String} = nothing
    action::Union{Nothing, String} = nothing
    changes = nothing # spec type: Union{ Nothing, HistoryChangesTask }
    complete::Union{Nothing, Bool} = nothing
    description::Union{Nothing, String} = nothing
    story_id::Union{Nothing, Int64} = nothing

    function HistoryActionTaskUpdate(id, entity_type, action, changes, complete, description, story_id, )
        OpenAPI.validate_property(HistoryActionTaskUpdate, Symbol("id"), id)
        OpenAPI.validate_property(HistoryActionTaskUpdate, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryActionTaskUpdate, Symbol("action"), action)
        OpenAPI.validate_property(HistoryActionTaskUpdate, Symbol("changes"), changes)
        OpenAPI.validate_property(HistoryActionTaskUpdate, Symbol("complete"), complete)
        OpenAPI.validate_property(HistoryActionTaskUpdate, Symbol("description"), description)
        OpenAPI.validate_property(HistoryActionTaskUpdate, Symbol("story_id"), story_id)
        return new(id, entity_type, action, changes, complete, description, story_id, )
    end
end # type HistoryActionTaskUpdate

const _property_types_HistoryActionTaskUpdate = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("entity_type")=>"String", Symbol("action")=>"String", Symbol("changes")=>"HistoryChangesTask", Symbol("complete")=>"Bool", Symbol("description")=>"String", Symbol("story_id")=>"Int64", )
OpenAPI.property_type(::Type{ HistoryActionTaskUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryActionTaskUpdate[name]))}

function check_required(o::HistoryActionTaskUpdate)
    o.id === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.action === nothing && (return false)
    o.changes === nothing && (return false)
    o.description === nothing && (return false)
    o.story_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryActionTaskUpdate }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "HistoryActionTaskUpdate", :format, val, "int64")
    end


    if name === Symbol("action")
        OpenAPI.validate_param(name, "HistoryActionTaskUpdate", :enum, val, ["update"])
    end





    if name === Symbol("story_id")
        OpenAPI.validate_param(name, "HistoryActionTaskUpdate", :format, val, "int64")
    end
end
