# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateCategory

    UpdateCategory(;
        name=nothing,
        color=nothing,
        archived=nothing,
    )

    - name::String : The new name of the Category.
    - color::String : The hex color to be displayed with the Category (for example, \&quot;#ff0000\&quot;).
    - archived::Bool : A true/false boolean indicating if the Category has been archived.
"""
Base.@kwdef mutable struct UpdateCategory <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    color::Union{Nothing, String} = nothing
    archived::Union{Nothing, Bool} = nothing

    function UpdateCategory(name, color, archived, )
        OpenAPI.validate_property(UpdateCategory, Symbol("name"), name)
        OpenAPI.validate_property(UpdateCategory, Symbol("color"), color)
        OpenAPI.validate_property(UpdateCategory, Symbol("archived"), archived)
        return new(name, color, archived, )
    end
end # type UpdateCategory

const _property_types_UpdateCategory = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("color")=>"String", Symbol("archived")=>"Bool", )
OpenAPI.property_type(::Type{ UpdateCategory }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateCategory[name]))}

function check_required(o::UpdateCategory)
    true
end

function OpenAPI.validate_property(::Type{ UpdateCategory }, name::Symbol, val)

    if name === Symbol("name")
        OpenAPI.validate_param(name, "UpdateCategory", :minLength, val, 1)
    end

    if name === Symbol("color")
        OpenAPI.validate_param(name, "UpdateCategory", :format, val, "css-color")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "UpdateCategory", :minLength, val, 1)
        OpenAPI.validate_param(name, "UpdateCategory", :pattern, val, r"^#[a-fA-F0-9]{6}$")
    end

end
