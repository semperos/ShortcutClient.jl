# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Branch
Branch refers to a VCS branch. Branches are feature branches associated with Shortcut Stories.

    Branch(;
        entity_type=nothing,
        deleted=nothing,
        name=nothing,
        persistent=nothing,
        updated_at=nothing,
        pull_requests=nothing,
        merged_branch_ids=nothing,
        id=nothing,
        url=nothing,
        repository_id=nothing,
        created_at=nothing,
    )

    - entity_type::String : A string description of this resource.
    - deleted::Bool : A true/false boolean indicating if the Branch has been deleted.
    - name::String : The name of the Branch.
    - persistent::Bool : This field is deprecated, and will always be false.
    - updated_at::ZonedDateTime : The time/date the Branch was updated.
    - pull_requests::Vector{PullRequest} : An array of PullRequests attached to the Branch (there is usually only one).
    - merged_branch_ids::Vector{Int64} : The IDs of the Branches the Branch has been merged into.
    - id::Int64 : The unique ID of the Branch.
    - url::String : The URL of the Branch.
    - repository_id::Int64 : The ID of the Repository that contains the Branch.
    - created_at::ZonedDateTime : The time/date the Branch was created.
"""
Base.@kwdef mutable struct Branch <: OpenAPI.APIModel
    entity_type::Union{Nothing, String} = nothing
    deleted::Union{Nothing, Bool} = nothing
    name::Union{Nothing, String} = nothing
    persistent::Union{Nothing, Bool} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    pull_requests::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PullRequest} }
    merged_branch_ids::Union{Nothing, Vector{Int64}} = nothing
    id::Union{Nothing, Int64} = nothing
    url::Union{Nothing, String} = nothing
    repository_id::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function Branch(entity_type, deleted, name, persistent, updated_at, pull_requests, merged_branch_ids, id, url, repository_id, created_at, )
        OpenAPI.validate_property(Branch, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Branch, Symbol("deleted"), deleted)
        OpenAPI.validate_property(Branch, Symbol("name"), name)
        OpenAPI.validate_property(Branch, Symbol("persistent"), persistent)
        OpenAPI.validate_property(Branch, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(Branch, Symbol("pull_requests"), pull_requests)
        OpenAPI.validate_property(Branch, Symbol("merged_branch_ids"), merged_branch_ids)
        OpenAPI.validate_property(Branch, Symbol("id"), id)
        OpenAPI.validate_property(Branch, Symbol("url"), url)
        OpenAPI.validate_property(Branch, Symbol("repository_id"), repository_id)
        OpenAPI.validate_property(Branch, Symbol("created_at"), created_at)
        return new(entity_type, deleted, name, persistent, updated_at, pull_requests, merged_branch_ids, id, url, repository_id, created_at, )
    end
end # type Branch

const _property_types_Branch = Dict{Symbol,String}(Symbol("entity_type")=>"String", Symbol("deleted")=>"Bool", Symbol("name")=>"String", Symbol("persistent")=>"Bool", Symbol("updated_at")=>"ZonedDateTime", Symbol("pull_requests")=>"Vector{PullRequest}", Symbol("merged_branch_ids")=>"Vector{Int64}", Symbol("id")=>"Int64", Symbol("url")=>"String", Symbol("repository_id")=>"Int64", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ Branch }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Branch[name]))}

function check_required(o::Branch)
    o.entity_type === nothing && (return false)
    o.deleted === nothing && (return false)
    o.name === nothing && (return false)
    o.persistent === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.pull_requests === nothing && (return false)
    o.merged_branch_ids === nothing && (return false)
    o.id === nothing && (return false)
    o.url === nothing && (return false)
    o.repository_id === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Branch }, name::Symbol, val)





    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "Branch", :format, val, "date-time")
    end



    if name === Symbol("id")
        OpenAPI.validate_param(name, "Branch", :format, val, "int64")
    end


    if name === Symbol("repository_id")
        OpenAPI.validate_param(name, "Branch", :format, val, "int64")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Branch", :format, val, "date-time")
    end
end
