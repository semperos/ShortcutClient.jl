# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateStoryParams
Request parameters for creating a story.

    CreateStoryParams(;
        description=nothing,
        archived=nothing,
        story_links=nothing,
        labels=nothing,
        story_type=nothing,
        custom_fields=nothing,
        move_to=nothing,
        file_ids=nothing,
        source_task_id=nothing,
        completed_at_override=nothing,
        name=nothing,
        comments=nothing,
        epic_id=nothing,
        story_template_id=nothing,
        external_links=nothing,
        sub_tasks=nothing,
        requested_by_id=nothing,
        iteration_id=nothing,
        tasks=nothing,
        started_at_override=nothing,
        group_id=nothing,
        workflow_state_id=nothing,
        updated_at=nothing,
        follower_ids=nothing,
        owner_ids=nothing,
        external_id=nothing,
        estimate=nothing,
        project_id=nothing,
        linked_file_ids=nothing,
        deadline=nothing,
        created_at=nothing,
    )

    - description::String : The description of the story.
    - archived::Bool : Controls the story&#39;s archived state.
    - story_links::Vector{CreateStoryLinkParams} : An array of story links attached to the story.
    - labels::Vector{CreateLabelParams} : An array of labels attached to the story.
    - story_type::String : The type of story (feature, bug, chore).
    - custom_fields::Vector{CustomFieldValueParams} : A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
    - move_to::String : One of \&quot;first\&quot; or \&quot;last\&quot;. This can be used to move the given story to the first or last position in the workflow state.
    - file_ids::Vector{Int64} : An array of IDs of files attached to the story.
    - source_task_id::Int64 : Given this story was converted from a task in another story, this is the original task ID that was converted to this story.
    - completed_at_override::ZonedDateTime : A manual override for the time/date the Story was completed.
    - name::String : The name of the story.
    - comments::Vector{CreateStoryCommentParams} : An array of comments to add to the story.
    - epic_id::Int64 : The ID of the epic the story belongs to.
    - story_template_id::String : The id of the story template used to create this story, if applicable. This is just an association; no content from the story template is inherited by the story simply by setting this field.
    - external_links::Vector{String} : An array of External Links associated with this story.
    - sub_tasks::Vector{CreateSubTaskParams} : An array of sub tasks to create.
    - requested_by_id::String : The ID of the member that requested the story.
    - iteration_id::Int64 : The ID of the iteration the story belongs to.
    - tasks::Vector{CreateTaskParams} : An array of tasks connected to the story.
    - started_at_override::ZonedDateTime : A manual override for the time/date the Story was started.
    - group_id::String : The id of the group to associate with this story.
    - workflow_state_id::Int64 : The ID of the workflow state the story will be in.
    - updated_at::ZonedDateTime : The time/date the Story was updated.
    - follower_ids::Vector{String} : An array of UUIDs of the followers of this story.
    - owner_ids::Vector{String} : An array of UUIDs of the owners of this story.
    - external_id::String : This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
    - estimate::Int64 : The numeric point estimate of the story. Can also be null, which means unestimated.
    - project_id::Int64 : The ID of the project the story belongs to.
    - linked_file_ids::Vector{Int64} : An array of IDs of linked files attached to the story.
    - deadline::ZonedDateTime : The due date of the story.
    - created_at::ZonedDateTime : The time/date the Story was created.
"""
Base.@kwdef mutable struct CreateStoryParams <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    archived::Union{Nothing, Bool} = nothing
    story_links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateStoryLinkParams} }
    labels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateLabelParams} }
    story_type::Union{Nothing, String} = nothing
    custom_fields::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomFieldValueParams} }
    move_to::Union{Nothing, String} = nothing
    file_ids::Union{Nothing, Vector{Int64}} = nothing
    source_task_id::Union{Nothing, Int64} = nothing
    completed_at_override::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    comments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateStoryCommentParams} }
    epic_id::Union{Nothing, Int64} = nothing
    story_template_id::Union{Nothing, String} = nothing
    external_links::Union{Nothing, Vector{String}} = nothing
    sub_tasks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateSubTaskParams} }
    requested_by_id::Union{Nothing, String} = nothing
    iteration_id::Union{Nothing, Int64} = nothing
    tasks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateTaskParams} }
    started_at_override::Union{Nothing, ZonedDateTime} = nothing
    group_id::Union{Nothing, String} = nothing
    workflow_state_id::Union{Nothing, Int64} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    follower_ids::Union{Nothing, Vector{String}} = nothing
    owner_ids::Union{Nothing, Vector{String}} = nothing
    external_id::Union{Nothing, String} = nothing
    estimate::Union{Nothing, Int64} = nothing
    project_id::Union{Nothing, Int64} = nothing
    linked_file_ids::Union{Nothing, Vector{Int64}} = nothing
    deadline::Union{Nothing, ZonedDateTime} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function CreateStoryParams(description, archived, story_links, labels, story_type, custom_fields, move_to, file_ids, source_task_id, completed_at_override, name, comments, epic_id, story_template_id, external_links, sub_tasks, requested_by_id, iteration_id, tasks, started_at_override, group_id, workflow_state_id, updated_at, follower_ids, owner_ids, external_id, estimate, project_id, linked_file_ids, deadline, created_at, )
        OpenAPI.validate_property(CreateStoryParams, Symbol("description"), description)
        OpenAPI.validate_property(CreateStoryParams, Symbol("archived"), archived)
        OpenAPI.validate_property(CreateStoryParams, Symbol("story_links"), story_links)
        OpenAPI.validate_property(CreateStoryParams, Symbol("labels"), labels)
        OpenAPI.validate_property(CreateStoryParams, Symbol("story_type"), story_type)
        OpenAPI.validate_property(CreateStoryParams, Symbol("custom_fields"), custom_fields)
        OpenAPI.validate_property(CreateStoryParams, Symbol("move_to"), move_to)
        OpenAPI.validate_property(CreateStoryParams, Symbol("file_ids"), file_ids)
        OpenAPI.validate_property(CreateStoryParams, Symbol("source_task_id"), source_task_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("completed_at_override"), completed_at_override)
        OpenAPI.validate_property(CreateStoryParams, Symbol("name"), name)
        OpenAPI.validate_property(CreateStoryParams, Symbol("comments"), comments)
        OpenAPI.validate_property(CreateStoryParams, Symbol("epic_id"), epic_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("story_template_id"), story_template_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("external_links"), external_links)
        OpenAPI.validate_property(CreateStoryParams, Symbol("sub_tasks"), sub_tasks)
        OpenAPI.validate_property(CreateStoryParams, Symbol("requested_by_id"), requested_by_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("iteration_id"), iteration_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("tasks"), tasks)
        OpenAPI.validate_property(CreateStoryParams, Symbol("started_at_override"), started_at_override)
        OpenAPI.validate_property(CreateStoryParams, Symbol("group_id"), group_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("workflow_state_id"), workflow_state_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(CreateStoryParams, Symbol("follower_ids"), follower_ids)
        OpenAPI.validate_property(CreateStoryParams, Symbol("owner_ids"), owner_ids)
        OpenAPI.validate_property(CreateStoryParams, Symbol("external_id"), external_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("estimate"), estimate)
        OpenAPI.validate_property(CreateStoryParams, Symbol("project_id"), project_id)
        OpenAPI.validate_property(CreateStoryParams, Symbol("linked_file_ids"), linked_file_ids)
        OpenAPI.validate_property(CreateStoryParams, Symbol("deadline"), deadline)
        OpenAPI.validate_property(CreateStoryParams, Symbol("created_at"), created_at)
        return new(description, archived, story_links, labels, story_type, custom_fields, move_to, file_ids, source_task_id, completed_at_override, name, comments, epic_id, story_template_id, external_links, sub_tasks, requested_by_id, iteration_id, tasks, started_at_override, group_id, workflow_state_id, updated_at, follower_ids, owner_ids, external_id, estimate, project_id, linked_file_ids, deadline, created_at, )
    end
end # type CreateStoryParams

const _property_types_CreateStoryParams = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("archived")=>"Bool", Symbol("story_links")=>"Vector{CreateStoryLinkParams}", Symbol("labels")=>"Vector{CreateLabelParams}", Symbol("story_type")=>"String", Symbol("custom_fields")=>"Vector{CustomFieldValueParams}", Symbol("move_to")=>"String", Symbol("file_ids")=>"Vector{Int64}", Symbol("source_task_id")=>"Int64", Symbol("completed_at_override")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("comments")=>"Vector{CreateStoryCommentParams}", Symbol("epic_id")=>"Int64", Symbol("story_template_id")=>"String", Symbol("external_links")=>"Vector{String}", Symbol("sub_tasks")=>"Vector{CreateSubTaskParams}", Symbol("requested_by_id")=>"String", Symbol("iteration_id")=>"Int64", Symbol("tasks")=>"Vector{CreateTaskParams}", Symbol("started_at_override")=>"ZonedDateTime", Symbol("group_id")=>"String", Symbol("workflow_state_id")=>"Int64", Symbol("updated_at")=>"ZonedDateTime", Symbol("follower_ids")=>"Vector{String}", Symbol("owner_ids")=>"Vector{String}", Symbol("external_id")=>"String", Symbol("estimate")=>"Int64", Symbol("project_id")=>"Int64", Symbol("linked_file_ids")=>"Vector{Int64}", Symbol("deadline")=>"ZonedDateTime", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ CreateStoryParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateStoryParams[name]))}

function check_required(o::CreateStoryParams)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateStoryParams }, name::Symbol, val)

    if name === Symbol("description")
        OpenAPI.validate_param(name, "CreateStoryParams", :maxLength, val, 100000)
    end




    if name === Symbol("story_type")
        OpenAPI.validate_param(name, "CreateStoryParams", :enum, val, ["feature", "chore", "bug"])
    end



    if name === Symbol("move_to")
        OpenAPI.validate_param(name, "CreateStoryParams", :enum, val, ["last", "first"])
    end


    if name === Symbol("file_ids")
        OpenAPI.validate_param(name, "CreateStoryParams", :uniqueItems, val, true)
    end

    if name === Symbol("source_task_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "int64")
    end

    if name === Symbol("completed_at_override")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "date-time")
    end

    if name === Symbol("name")
        OpenAPI.validate_param(name, "CreateStoryParams", :maxLength, val, 512)
        OpenAPI.validate_param(name, "CreateStoryParams", :minLength, val, 1)
    end


    if name === Symbol("epic_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "int64")
    end

    if name === Symbol("story_template_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "uuid")
    end



    if name === Symbol("requested_by_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "uuid")
    end

    if name === Symbol("iteration_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "int64")
    end


    if name === Symbol("started_at_override")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "date-time")
    end

    if name === Symbol("group_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "uuid")
    end

    if name === Symbol("workflow_state_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "int64")
    end

    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "date-time")
    end

    if name === Symbol("follower_ids")
        OpenAPI.validate_param(name, "CreateStoryParams", :uniqueItems, val, true)
    end

    if name === Symbol("owner_ids")
        OpenAPI.validate_param(name, "CreateStoryParams", :uniqueItems, val, true)
    end

    if name === Symbol("external_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :maxLength, val, 1024)
    end

    if name === Symbol("estimate")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "int64")
    end

    if name === Symbol("project_id")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "int64")
    end

    if name === Symbol("linked_file_ids")
        OpenAPI.validate_param(name, "CreateStoryParams", :uniqueItems, val, true)
    end

    if name === Symbol("deadline")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "date-time")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "CreateStoryParams", :format, val, "date-time")
    end
end
