# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Group
A Group.

    Group(;
        app_url=nothing,
        description=nothing,
        archived=nothing,
        entity_type=nothing,
        color=nothing,
        num_stories_started=nothing,
        mention_name=nothing,
        name=nothing,
        global_id=nothing,
        color_key=nothing,
        num_stories=nothing,
        num_epics_started=nothing,
        num_stories_backlog=nothing,
        id=nothing,
        display_icon=nothing,
        member_ids=nothing,
        workflow_ids=nothing,
    )

    - app_url::String : The Shortcut application url for the Group.
    - description::String : The description of the Group.
    - archived::Bool : Whether or not the Group is archived.
    - entity_type::String : A string description of this resource.
    - color::String : The hex color to be displayed with the Group (for example, \&quot;#ff0000\&quot;).
    - num_stories_started::Int64 : The number of stories assigned to the group which are in a started workflow state.
    - mention_name::String : The mention name of the Group.
    - name::String : The name of the Group.
    - global_id::String
    - color_key::String : The color key to be displayed with the Group.
    - num_stories::Int64 : The total number of stories assigned to the group.
    - num_epics_started::Int64 : The number of epics assigned to the group which are in the started workflow state.
    - num_stories_backlog::Int64 : The number of stories assigned to the group which are in a backlog workflow state.
    - id::String : The id of the Group.
    - display_icon::Icon
    - member_ids::Vector{String} : The Member IDs contain within the Group.
    - workflow_ids::Vector{Int64} : The Workflow IDs contained within the Group.
"""
Base.@kwdef mutable struct Group <: OpenAPI.APIModel
    app_url::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    archived::Union{Nothing, Bool} = nothing
    entity_type::Union{Nothing, String} = nothing
    color::Union{Nothing, String} = nothing
    num_stories_started::Union{Nothing, Int64} = nothing
    mention_name::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    global_id::Union{Nothing, String} = nothing
    color_key::Union{Nothing, String} = nothing
    num_stories::Union{Nothing, Int64} = nothing
    num_epics_started::Union{Nothing, Int64} = nothing
    num_stories_backlog::Union{Nothing, Int64} = nothing
    id::Union{Nothing, String} = nothing
    display_icon = nothing # spec type: Union{ Nothing, Icon }
    member_ids::Union{Nothing, Vector{String}} = nothing
    workflow_ids::Union{Nothing, Vector{Int64}} = nothing

    function Group(app_url, description, archived, entity_type, color, num_stories_started, mention_name, name, global_id, color_key, num_stories, num_epics_started, num_stories_backlog, id, display_icon, member_ids, workflow_ids, )
        OpenAPI.validate_property(Group, Symbol("app_url"), app_url)
        OpenAPI.validate_property(Group, Symbol("description"), description)
        OpenAPI.validate_property(Group, Symbol("archived"), archived)
        OpenAPI.validate_property(Group, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Group, Symbol("color"), color)
        OpenAPI.validate_property(Group, Symbol("num_stories_started"), num_stories_started)
        OpenAPI.validate_property(Group, Symbol("mention_name"), mention_name)
        OpenAPI.validate_property(Group, Symbol("name"), name)
        OpenAPI.validate_property(Group, Symbol("global_id"), global_id)
        OpenAPI.validate_property(Group, Symbol("color_key"), color_key)
        OpenAPI.validate_property(Group, Symbol("num_stories"), num_stories)
        OpenAPI.validate_property(Group, Symbol("num_epics_started"), num_epics_started)
        OpenAPI.validate_property(Group, Symbol("num_stories_backlog"), num_stories_backlog)
        OpenAPI.validate_property(Group, Symbol("id"), id)
        OpenAPI.validate_property(Group, Symbol("display_icon"), display_icon)
        OpenAPI.validate_property(Group, Symbol("member_ids"), member_ids)
        OpenAPI.validate_property(Group, Symbol("workflow_ids"), workflow_ids)
        return new(app_url, description, archived, entity_type, color, num_stories_started, mention_name, name, global_id, color_key, num_stories, num_epics_started, num_stories_backlog, id, display_icon, member_ids, workflow_ids, )
    end
end # type Group

const _property_types_Group = Dict{Symbol,String}(Symbol("app_url")=>"String", Symbol("description")=>"String", Symbol("archived")=>"Bool", Symbol("entity_type")=>"String", Symbol("color")=>"String", Symbol("num_stories_started")=>"Int64", Symbol("mention_name")=>"String", Symbol("name")=>"String", Symbol("global_id")=>"String", Symbol("color_key")=>"String", Symbol("num_stories")=>"Int64", Symbol("num_epics_started")=>"Int64", Symbol("num_stories_backlog")=>"Int64", Symbol("id")=>"String", Symbol("display_icon")=>"Icon", Symbol("member_ids")=>"Vector{String}", Symbol("workflow_ids")=>"Vector{Int64}", )
OpenAPI.property_type(::Type{ Group }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Group[name]))}

function check_required(o::Group)
    o.app_url === nothing && (return false)
    o.description === nothing && (return false)
    o.archived === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.color === nothing && (return false)
    o.num_stories_started === nothing && (return false)
    o.mention_name === nothing && (return false)
    o.name === nothing && (return false)
    o.global_id === nothing && (return false)
    o.color_key === nothing && (return false)
    o.num_stories === nothing && (return false)
    o.num_epics_started === nothing && (return false)
    o.num_stories_backlog === nothing && (return false)
    o.id === nothing && (return false)
    o.display_icon === nothing && (return false)
    o.member_ids === nothing && (return false)
    o.workflow_ids === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Group }, name::Symbol, val)





    if name === Symbol("color")
        OpenAPI.validate_param(name, "Group", :format, val, "css-color")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "Group", :minLength, val, 1)
        OpenAPI.validate_param(name, "Group", :pattern, val, r"^#[a-fA-F0-9]{6}$")
    end

    if name === Symbol("num_stories_started")
        OpenAPI.validate_param(name, "Group", :format, val, "int64")
    end

    if name === Symbol("mention_name")
        OpenAPI.validate_param(name, "Group", :minLength, val, 1)
        OpenAPI.validate_param(name, "Group", :pattern, val, r"^[a-z0-9\-\_\.]+$")
    end



    if name === Symbol("color_key")
        OpenAPI.validate_param(name, "Group", :enum, val, ["blue", "purple", "midnight-blue", "orange", "yellow-green", "brass", "gray", "fuchsia", "yellow", "pink", "sky-blue", "green", "red", "black", "slate", "turquoise"])
    end


    if name === Symbol("num_stories")
        OpenAPI.validate_param(name, "Group", :format, val, "int64")
    end

    if name === Symbol("num_epics_started")
        OpenAPI.validate_param(name, "Group", :format, val, "int64")
    end

    if name === Symbol("num_stories_backlog")
        OpenAPI.validate_param(name, "Group", :format, val, "int64")
    end

    if name === Symbol("id")
        OpenAPI.validate_param(name, "Group", :format, val, "uuid")
    end



end
