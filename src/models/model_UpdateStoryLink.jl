# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateStoryLink

    UpdateStoryLink(;
        verb=nothing,
        subject_id=nothing,
        object_id=nothing,
    )

    - verb::String : The type of link.
    - subject_id::Int64 : The ID of the subject Story.
    - object_id::Int64 : The ID of the object Story.
"""
Base.@kwdef mutable struct UpdateStoryLink <: OpenAPI.APIModel
    verb::Union{Nothing, String} = nothing
    subject_id::Union{Nothing, Int64} = nothing
    object_id::Union{Nothing, Int64} = nothing

    function UpdateStoryLink(verb, subject_id, object_id, )
        OpenAPI.validate_property(UpdateStoryLink, Symbol("verb"), verb)
        OpenAPI.validate_property(UpdateStoryLink, Symbol("subject_id"), subject_id)
        OpenAPI.validate_property(UpdateStoryLink, Symbol("object_id"), object_id)
        return new(verb, subject_id, object_id, )
    end
end # type UpdateStoryLink

const _property_types_UpdateStoryLink = Dict{Symbol,String}(Symbol("verb")=>"String", Symbol("subject_id")=>"Int64", Symbol("object_id")=>"Int64", )
OpenAPI.property_type(::Type{ UpdateStoryLink }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateStoryLink[name]))}

function check_required(o::UpdateStoryLink)
    true
end

function OpenAPI.validate_property(::Type{ UpdateStoryLink }, name::Symbol, val)

    if name === Symbol("verb")
        OpenAPI.validate_param(name, "UpdateStoryLink", :enum, val, ["blocks", "duplicates", "relates to"])
    end


    if name === Symbol("subject_id")
        OpenAPI.validate_param(name, "UpdateStoryLink", :format, val, "int64")
    end

    if name === Symbol("object_id")
        OpenAPI.validate_param(name, "UpdateStoryLink", :format, val, "int64")
    end
end
