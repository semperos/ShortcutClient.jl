# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateKeyResult

    UpdateKeyResult(;
        name=nothing,
        initial_observed_value=nothing,
        observed_value=nothing,
        target_value=nothing,
    )

    - name::String : The name of the Key Result.
    - initial_observed_value::KeyResultValue
    - observed_value::KeyResultValue
    - target_value::KeyResultValue
"""
Base.@kwdef mutable struct UpdateKeyResult <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    initial_observed_value = nothing # spec type: Union{ Nothing, KeyResultValue }
    observed_value = nothing # spec type: Union{ Nothing, KeyResultValue }
    target_value = nothing # spec type: Union{ Nothing, KeyResultValue }

    function UpdateKeyResult(name, initial_observed_value, observed_value, target_value, )
        OpenAPI.validate_property(UpdateKeyResult, Symbol("name"), name)
        OpenAPI.validate_property(UpdateKeyResult, Symbol("initial_observed_value"), initial_observed_value)
        OpenAPI.validate_property(UpdateKeyResult, Symbol("observed_value"), observed_value)
        OpenAPI.validate_property(UpdateKeyResult, Symbol("target_value"), target_value)
        return new(name, initial_observed_value, observed_value, target_value, )
    end
end # type UpdateKeyResult

const _property_types_UpdateKeyResult = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("initial_observed_value")=>"KeyResultValue", Symbol("observed_value")=>"KeyResultValue", Symbol("target_value")=>"KeyResultValue", )
OpenAPI.property_type(::Type{ UpdateKeyResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateKeyResult[name]))}

function check_required(o::UpdateKeyResult)
    true
end

function OpenAPI.validate_property(::Type{ UpdateKeyResult }, name::Symbol, val)

    if name === Symbol("name")
        OpenAPI.validate_param(name, "UpdateKeyResult", :maxLength, val, 1024)
    end



end
