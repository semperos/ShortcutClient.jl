# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryReferenceStory
A reference to a Story.

    HistoryReferenceStory(;
        id=nothing,
        entity_type=nothing,
        app_url=nothing,
        name=nothing,
        story_type=nothing,
    )

    - id::Any : The ID of the entity referenced.
    - entity_type::String : The type of entity referenced.
    - app_url::String : The application URL of the Story.
    - name::String : The name of the entity referenced.
    - story_type::String : If the referenced entity is a Story, either \&quot;bug\&quot;, \&quot;chore\&quot;, or \&quot;feature\&quot;.
"""
Base.@kwdef mutable struct HistoryReferenceStory <: OpenAPI.APIModel
    id::Union{Nothing, Any} = nothing
    entity_type::Union{Nothing, String} = nothing
    app_url::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    story_type::Union{Nothing, String} = nothing

    function HistoryReferenceStory(id, entity_type, app_url, name, story_type, )
        OpenAPI.validate_property(HistoryReferenceStory, Symbol("id"), id)
        OpenAPI.validate_property(HistoryReferenceStory, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryReferenceStory, Symbol("app_url"), app_url)
        OpenAPI.validate_property(HistoryReferenceStory, Symbol("name"), name)
        OpenAPI.validate_property(HistoryReferenceStory, Symbol("story_type"), story_type)
        return new(id, entity_type, app_url, name, story_type, )
    end
end # type HistoryReferenceStory

const _property_types_HistoryReferenceStory = Dict{Symbol,String}(Symbol("id")=>"Any", Symbol("entity_type")=>"String", Symbol("app_url")=>"String", Symbol("name")=>"String", Symbol("story_type")=>"String", )
OpenAPI.property_type(::Type{ HistoryReferenceStory }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryReferenceStory[name]))}

function check_required(o::HistoryReferenceStory)
    o.id === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.app_url === nothing && (return false)
    o.name === nothing && (return false)
    o.story_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryReferenceStory }, name::Symbol, val)



    if name === Symbol("app_url")
        OpenAPI.validate_param(name, "HistoryReferenceStory", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "HistoryReferenceStory", :pattern, val, r"^https?:\/\/.+$")
    end


    if name === Symbol("story_type")
        OpenAPI.validate_param(name, "HistoryReferenceStory", :enum, val, ["feature", "chore", "bug"])
    end

end
