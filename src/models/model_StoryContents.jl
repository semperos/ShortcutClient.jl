# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""StoryContents
A container entity for the attributes this template should populate.

    StoryContents(;
        description=nothing,
        entity_type=nothing,
        labels=nothing,
        story_type=nothing,
        custom_fields=nothing,
        linked_files=nothing,
        name=nothing,
        epic_id=nothing,
        external_links=nothing,
        iteration_id=nothing,
        tasks=nothing,
        label_ids=nothing,
        group_id=nothing,
        workflow_state_id=nothing,
        follower_ids=nothing,
        owner_ids=nothing,
        estimate=nothing,
        files=nothing,
        project_id=nothing,
        deadline=nothing,
    )

    - description::String : The description of the story.
    - entity_type::String : A string description of this resource.
    - labels::Vector{LabelSlim} : An array of labels attached to the story.
    - story_type::String : The type of story (feature, bug, chore).
    - custom_fields::Vector{CustomFieldValueParams} : An array of maps specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
    - linked_files::Vector{LinkedFile} : An array of linked files attached to the story.
    - name::String : The name of the story.
    - epic_id::Int64 : The ID of the epic the story belongs to.
    - external_links::Vector{String} : An array of external links connected to the story.
    - iteration_id::Int64 : The ID of the iteration the story belongs to.
    - tasks::Vector{StoryContentsTask} : An array of tasks connected to the story.
    - label_ids::Vector{Int64} : An array of label ids attached to the story.
    - group_id::String : The ID of the group to which the story is assigned.
    - workflow_state_id::Int64 : The ID of the workflow state the story is currently in.
    - follower_ids::Vector{String} : An array of UUIDs for any Members listed as Followers.
    - owner_ids::Vector{String} : An array of UUIDs of the owners of this story.
    - estimate::Int64 : The numeric point estimate of the story. Can also be null, which means unestimated.
    - files::Vector{UploadedFile} : An array of files attached to the story.
    - project_id::Int64 : The ID of the project the story belongs to.
    - deadline::ZonedDateTime : The due date of the story.
"""
Base.@kwdef mutable struct StoryContents <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    labels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{LabelSlim} }
    story_type::Union{Nothing, String} = nothing
    custom_fields::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomFieldValueParams} }
    linked_files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{LinkedFile} }
    name::Union{Nothing, String} = nothing
    epic_id::Union{Nothing, Int64} = nothing
    external_links::Union{Nothing, Vector{String}} = nothing
    iteration_id::Union{Nothing, Int64} = nothing
    tasks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{StoryContentsTask} }
    label_ids::Union{Nothing, Vector{Int64}} = nothing
    group_id::Union{Nothing, String} = nothing
    workflow_state_id::Union{Nothing, Int64} = nothing
    follower_ids::Union{Nothing, Vector{String}} = nothing
    owner_ids::Union{Nothing, Vector{String}} = nothing
    estimate::Union{Nothing, Int64} = nothing
    files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UploadedFile} }
    project_id::Union{Nothing, Int64} = nothing
    deadline::Union{Nothing, ZonedDateTime} = nothing

    function StoryContents(description, entity_type, labels, story_type, custom_fields, linked_files, name, epic_id, external_links, iteration_id, tasks, label_ids, group_id, workflow_state_id, follower_ids, owner_ids, estimate, files, project_id, deadline, )
        OpenAPI.validate_property(StoryContents, Symbol("description"), description)
        OpenAPI.validate_property(StoryContents, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(StoryContents, Symbol("labels"), labels)
        OpenAPI.validate_property(StoryContents, Symbol("story_type"), story_type)
        OpenAPI.validate_property(StoryContents, Symbol("custom_fields"), custom_fields)
        OpenAPI.validate_property(StoryContents, Symbol("linked_files"), linked_files)
        OpenAPI.validate_property(StoryContents, Symbol("name"), name)
        OpenAPI.validate_property(StoryContents, Symbol("epic_id"), epic_id)
        OpenAPI.validate_property(StoryContents, Symbol("external_links"), external_links)
        OpenAPI.validate_property(StoryContents, Symbol("iteration_id"), iteration_id)
        OpenAPI.validate_property(StoryContents, Symbol("tasks"), tasks)
        OpenAPI.validate_property(StoryContents, Symbol("label_ids"), label_ids)
        OpenAPI.validate_property(StoryContents, Symbol("group_id"), group_id)
        OpenAPI.validate_property(StoryContents, Symbol("workflow_state_id"), workflow_state_id)
        OpenAPI.validate_property(StoryContents, Symbol("follower_ids"), follower_ids)
        OpenAPI.validate_property(StoryContents, Symbol("owner_ids"), owner_ids)
        OpenAPI.validate_property(StoryContents, Symbol("estimate"), estimate)
        OpenAPI.validate_property(StoryContents, Symbol("files"), files)
        OpenAPI.validate_property(StoryContents, Symbol("project_id"), project_id)
        OpenAPI.validate_property(StoryContents, Symbol("deadline"), deadline)
        return new(description, entity_type, labels, story_type, custom_fields, linked_files, name, epic_id, external_links, iteration_id, tasks, label_ids, group_id, workflow_state_id, follower_ids, owner_ids, estimate, files, project_id, deadline, )
    end
end # type StoryContents

const _property_types_StoryContents = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("entity_type")=>"String", Symbol("labels")=>"Vector{LabelSlim}", Symbol("story_type")=>"String", Symbol("custom_fields")=>"Vector{CustomFieldValueParams}", Symbol("linked_files")=>"Vector{LinkedFile}", Symbol("name")=>"String", Symbol("epic_id")=>"Int64", Symbol("external_links")=>"Vector{String}", Symbol("iteration_id")=>"Int64", Symbol("tasks")=>"Vector{StoryContentsTask}", Symbol("label_ids")=>"Vector{Int64}", Symbol("group_id")=>"String", Symbol("workflow_state_id")=>"Int64", Symbol("follower_ids")=>"Vector{String}", Symbol("owner_ids")=>"Vector{String}", Symbol("estimate")=>"Int64", Symbol("files")=>"Vector{UploadedFile}", Symbol("project_id")=>"Int64", Symbol("deadline")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ StoryContents }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_StoryContents[name]))}

function check_required(o::StoryContents)
    true
end

function OpenAPI.validate_property(::Type{ StoryContents }, name::Symbol, val)








    if name === Symbol("epic_id")
        OpenAPI.validate_param(name, "StoryContents", :format, val, "int64")
    end


    if name === Symbol("iteration_id")
        OpenAPI.validate_param(name, "StoryContents", :format, val, "int64")
    end



    if name === Symbol("group_id")
        OpenAPI.validate_param(name, "StoryContents", :format, val, "uuid")
    end

    if name === Symbol("workflow_state_id")
        OpenAPI.validate_param(name, "StoryContents", :format, val, "int64")
    end



    if name === Symbol("estimate")
        OpenAPI.validate_param(name, "StoryContents", :format, val, "int64")
    end


    if name === Symbol("project_id")
        OpenAPI.validate_param(name, "StoryContents", :format, val, "int64")
    end

    if name === Symbol("deadline")
        OpenAPI.validate_param(name, "StoryContents", :format, val, "date-time")
    end
end
