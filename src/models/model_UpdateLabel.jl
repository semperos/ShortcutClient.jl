# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateLabel

    UpdateLabel(;
        name=nothing,
        description=nothing,
        color=nothing,
        archived=nothing,
    )

    - name::String : The new name of the label.
    - description::String : The new description of the label.
    - color::String : The hex color to be displayed with the Label (for example, \&quot;#ff0000\&quot;).
    - archived::Bool : A true/false boolean indicating if the Label has been archived.
"""
Base.@kwdef mutable struct UpdateLabel <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    color::Union{Nothing, String} = nothing
    archived::Union{Nothing, Bool} = nothing

    function UpdateLabel(name, description, color, archived, )
        OpenAPI.validate_property(UpdateLabel, Symbol("name"), name)
        OpenAPI.validate_property(UpdateLabel, Symbol("description"), description)
        OpenAPI.validate_property(UpdateLabel, Symbol("color"), color)
        OpenAPI.validate_property(UpdateLabel, Symbol("archived"), archived)
        return new(name, description, color, archived, )
    end
end # type UpdateLabel

const _property_types_UpdateLabel = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("color")=>"String", Symbol("archived")=>"Bool", )
OpenAPI.property_type(::Type{ UpdateLabel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateLabel[name]))}

function check_required(o::UpdateLabel)
    true
end

function OpenAPI.validate_property(::Type{ UpdateLabel }, name::Symbol, val)

    if name === Symbol("name")
        OpenAPI.validate_param(name, "UpdateLabel", :maxLength, val, 128)
        OpenAPI.validate_param(name, "UpdateLabel", :minLength, val, 1)
    end

    if name === Symbol("description")
        OpenAPI.validate_param(name, "UpdateLabel", :maxLength, val, 1024)
    end

    if name === Symbol("color")
        OpenAPI.validate_param(name, "UpdateLabel", :format, val, "css-color")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "UpdateLabel", :minLength, val, 1)
        OpenAPI.validate_param(name, "UpdateLabel", :pattern, val, r"^#[a-fA-F0-9]{6}$")
    end

end
