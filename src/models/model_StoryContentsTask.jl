# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""StoryContentsTask

    StoryContentsTask(;
        description=nothing,
        position=nothing,
        complete=nothing,
        owner_ids=nothing,
        external_id=nothing,
    )

    - description::String : Full text of the Task.
    - position::Int64 : The number corresponding to the Task&#39;s position within a list of Tasks on a Story.
    - complete::Bool : True/false boolean indicating whether the Task has been completed.
    - owner_ids::Vector{String} : An array of UUIDs of the Owners of this Task.
    - external_id::String : This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.
"""
Base.@kwdef mutable struct StoryContentsTask <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    position::Union{Nothing, Int64} = nothing
    complete::Union{Nothing, Bool} = nothing
    owner_ids::Union{Nothing, Vector{String}} = nothing
    external_id::Union{Nothing, String} = nothing

    function StoryContentsTask(description, position, complete, owner_ids, external_id, )
        OpenAPI.validate_property(StoryContentsTask, Symbol("description"), description)
        OpenAPI.validate_property(StoryContentsTask, Symbol("position"), position)
        OpenAPI.validate_property(StoryContentsTask, Symbol("complete"), complete)
        OpenAPI.validate_property(StoryContentsTask, Symbol("owner_ids"), owner_ids)
        OpenAPI.validate_property(StoryContentsTask, Symbol("external_id"), external_id)
        return new(description, position, complete, owner_ids, external_id, )
    end
end # type StoryContentsTask

const _property_types_StoryContentsTask = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("position")=>"Int64", Symbol("complete")=>"Bool", Symbol("owner_ids")=>"Vector{String}", Symbol("external_id")=>"String", )
OpenAPI.property_type(::Type{ StoryContentsTask }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_StoryContentsTask[name]))}

function check_required(o::StoryContentsTask)
    o.description === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ StoryContentsTask }, name::Symbol, val)


    if name === Symbol("position")
        OpenAPI.validate_param(name, "StoryContentsTask", :format, val, "int64")
    end



end
