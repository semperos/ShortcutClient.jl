# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateProject

    UpdateProject(;
        description=nothing,
        archived=nothing,
        days_to_thermometer=nothing,
        color=nothing,
        name=nothing,
        follower_ids=nothing,
        show_thermometer=nothing,
        team_id=nothing,
        abbreviation=nothing,
    )

    - description::String : The Project&#39;s description.
    - archived::Bool : A true/false boolean indicating whether the Story is in archived state.
    - days_to_thermometer::Int64 : The number of days before the thermometer appears in the Story summary.
    - color::String : The color that represents the Project in the UI.
    - name::String : The Project&#39;s name.
    - follower_ids::Vector{String} : An array of UUIDs for any Members you want to add as Followers.
    - show_thermometer::Bool : Configuration to enable or disable thermometers in the Story summary.
    - team_id::Int64 : The ID of the team the project belongs to.
    - abbreviation::String : The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.
"""
Base.@kwdef mutable struct UpdateProject <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    archived::Union{Nothing, Bool} = nothing
    days_to_thermometer::Union{Nothing, Int64} = nothing
    color::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    follower_ids::Union{Nothing, Vector{String}} = nothing
    show_thermometer::Union{Nothing, Bool} = nothing
    team_id::Union{Nothing, Int64} = nothing
    abbreviation::Union{Nothing, String} = nothing

    function UpdateProject(description, archived, days_to_thermometer, color, name, follower_ids, show_thermometer, team_id, abbreviation, )
        OpenAPI.validate_property(UpdateProject, Symbol("description"), description)
        OpenAPI.validate_property(UpdateProject, Symbol("archived"), archived)
        OpenAPI.validate_property(UpdateProject, Symbol("days_to_thermometer"), days_to_thermometer)
        OpenAPI.validate_property(UpdateProject, Symbol("color"), color)
        OpenAPI.validate_property(UpdateProject, Symbol("name"), name)
        OpenAPI.validate_property(UpdateProject, Symbol("follower_ids"), follower_ids)
        OpenAPI.validate_property(UpdateProject, Symbol("show_thermometer"), show_thermometer)
        OpenAPI.validate_property(UpdateProject, Symbol("team_id"), team_id)
        OpenAPI.validate_property(UpdateProject, Symbol("abbreviation"), abbreviation)
        return new(description, archived, days_to_thermometer, color, name, follower_ids, show_thermometer, team_id, abbreviation, )
    end
end # type UpdateProject

const _property_types_UpdateProject = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("archived")=>"Bool", Symbol("days_to_thermometer")=>"Int64", Symbol("color")=>"String", Symbol("name")=>"String", Symbol("follower_ids")=>"Vector{String}", Symbol("show_thermometer")=>"Bool", Symbol("team_id")=>"Int64", Symbol("abbreviation")=>"String", )
OpenAPI.property_type(::Type{ UpdateProject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateProject[name]))}

function check_required(o::UpdateProject)
    true
end

function OpenAPI.validate_property(::Type{ UpdateProject }, name::Symbol, val)

    if name === Symbol("description")
        OpenAPI.validate_param(name, "UpdateProject", :maxLength, val, 100000)
    end


    if name === Symbol("days_to_thermometer")
        OpenAPI.validate_param(name, "UpdateProject", :format, val, "int64")
    end

    if name === Symbol("color")
        OpenAPI.validate_param(name, "UpdateProject", :format, val, "css-color")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "UpdateProject", :minLength, val, 1)
        OpenAPI.validate_param(name, "UpdateProject", :pattern, val, r"^#[a-fA-F0-9]{6}$")
    end

    if name === Symbol("name")
        OpenAPI.validate_param(name, "UpdateProject", :maxLength, val, 128)
        OpenAPI.validate_param(name, "UpdateProject", :minLength, val, 1)
    end



    if name === Symbol("team_id")
        OpenAPI.validate_param(name, "UpdateProject", :format, val, "int64")
    end

end
