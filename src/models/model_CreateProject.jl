# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateProject

    CreateProject(;
        description=nothing,
        color=nothing,
        name=nothing,
        start_time=nothing,
        updated_at=nothing,
        follower_ids=nothing,
        external_id=nothing,
        team_id=nothing,
        iteration_length=nothing,
        abbreviation=nothing,
        created_at=nothing,
    )

    - description::String : The Project description.
    - color::String : The color you wish to use for the Project in the system.
    - name::String : The name of the Project.
    - start_time::ZonedDateTime : The date at which the Project was started.
    - updated_at::ZonedDateTime : Defaults to the time/date it is created but can be set to reflect another date.
    - follower_ids::Vector{String} : An array of UUIDs for any members you want to add as Owners on this new Epic.
    - external_id::String : This field can be set to another unique ID. In the case that the Project has been imported from another tool, the ID in the other tool can be indicated here.
    - team_id::Int64 : The ID of the team the project belongs to.
    - iteration_length::Int64 : The number of weeks per iteration in this Project.
    - abbreviation::String : The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.
    - created_at::ZonedDateTime : Defaults to the time/date it is created but can be set to reflect another date.
"""
Base.@kwdef mutable struct CreateProject <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    color::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    start_time::Union{Nothing, ZonedDateTime} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    follower_ids::Union{Nothing, Vector{String}} = nothing
    external_id::Union{Nothing, String} = nothing
    team_id::Union{Nothing, Int64} = nothing
    iteration_length::Union{Nothing, Int64} = nothing
    abbreviation::Union{Nothing, String} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function CreateProject(description, color, name, start_time, updated_at, follower_ids, external_id, team_id, iteration_length, abbreviation, created_at, )
        OpenAPI.validate_property(CreateProject, Symbol("description"), description)
        OpenAPI.validate_property(CreateProject, Symbol("color"), color)
        OpenAPI.validate_property(CreateProject, Symbol("name"), name)
        OpenAPI.validate_property(CreateProject, Symbol("start_time"), start_time)
        OpenAPI.validate_property(CreateProject, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(CreateProject, Symbol("follower_ids"), follower_ids)
        OpenAPI.validate_property(CreateProject, Symbol("external_id"), external_id)
        OpenAPI.validate_property(CreateProject, Symbol("team_id"), team_id)
        OpenAPI.validate_property(CreateProject, Symbol("iteration_length"), iteration_length)
        OpenAPI.validate_property(CreateProject, Symbol("abbreviation"), abbreviation)
        OpenAPI.validate_property(CreateProject, Symbol("created_at"), created_at)
        return new(description, color, name, start_time, updated_at, follower_ids, external_id, team_id, iteration_length, abbreviation, created_at, )
    end
end # type CreateProject

const _property_types_CreateProject = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("color")=>"String", Symbol("name")=>"String", Symbol("start_time")=>"ZonedDateTime", Symbol("updated_at")=>"ZonedDateTime", Symbol("follower_ids")=>"Vector{String}", Symbol("external_id")=>"String", Symbol("team_id")=>"Int64", Symbol("iteration_length")=>"Int64", Symbol("abbreviation")=>"String", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ CreateProject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateProject[name]))}

function check_required(o::CreateProject)
    o.name === nothing && (return false)
    o.team_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateProject }, name::Symbol, val)

    if name === Symbol("description")
        OpenAPI.validate_param(name, "CreateProject", :maxLength, val, 100000)
    end

    if name === Symbol("color")
        OpenAPI.validate_param(name, "CreateProject", :format, val, "css-color")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "CreateProject", :minLength, val, 1)
        OpenAPI.validate_param(name, "CreateProject", :pattern, val, r"^#[a-fA-F0-9]{6}$")
    end

    if name === Symbol("name")
        OpenAPI.validate_param(name, "CreateProject", :maxLength, val, 128)
        OpenAPI.validate_param(name, "CreateProject", :minLength, val, 1)
    end

    if name === Symbol("start_time")
        OpenAPI.validate_param(name, "CreateProject", :format, val, "date-time")
    end

    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "CreateProject", :format, val, "date-time")
    end


    if name === Symbol("external_id")
        OpenAPI.validate_param(name, "CreateProject", :maxLength, val, 128)
    end

    if name === Symbol("team_id")
        OpenAPI.validate_param(name, "CreateProject", :format, val, "int64")
    end

    if name === Symbol("iteration_length")
        OpenAPI.validate_param(name, "CreateProject", :format, val, "int64")
    end

    if name === Symbol("abbreviation")
        OpenAPI.validate_param(name, "CreateProject", :maxLength, val, 63)
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "CreateProject", :format, val, "date-time")
    end
end
