# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Profile
A group of Member profile details.

    Profile(;
        entity_type=nothing,
        deactivated=nothing,
        two_factor_auth_activated=nothing,
        mention_name=nothing,
        name=nothing,
        gravatar_hash=nothing,
        id=nothing,
        display_icon=nothing,
        is_owner=nothing,
        email_address=nothing,
    )

    - entity_type::String : A string description of this resource.
    - deactivated::Bool : A true/false boolean indicating whether the Member has been deactivated within Shortcut.
    - two_factor_auth_activated::Bool : If Two Factor Authentication is activated for this User.
    - mention_name::String : The Member&#39;s username within the Organization.
    - name::String : The Member&#39;s name within the Organization.
    - gravatar_hash::String : This is the gravatar hash associated with email_address.
    - id::String : The unique identifier of the profile.
    - display_icon::Icon
    - is_owner::Bool : A boolean indicating whether this profile is an owner at their associated organization.
    - email_address::String : The primary email address of the Member with the Organization.
"""
Base.@kwdef mutable struct Profile <: OpenAPI.APIModel
    entity_type::Union{Nothing, String} = nothing
    deactivated::Union{Nothing, Bool} = nothing
    two_factor_auth_activated::Union{Nothing, Bool} = nothing
    mention_name::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    gravatar_hash::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    display_icon = nothing # spec type: Union{ Nothing, Icon }
    is_owner::Union{Nothing, Bool} = nothing
    email_address::Union{Nothing, String} = nothing

    function Profile(entity_type, deactivated, two_factor_auth_activated, mention_name, name, gravatar_hash, id, display_icon, is_owner, email_address, )
        OpenAPI.validate_property(Profile, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Profile, Symbol("deactivated"), deactivated)
        OpenAPI.validate_property(Profile, Symbol("two_factor_auth_activated"), two_factor_auth_activated)
        OpenAPI.validate_property(Profile, Symbol("mention_name"), mention_name)
        OpenAPI.validate_property(Profile, Symbol("name"), name)
        OpenAPI.validate_property(Profile, Symbol("gravatar_hash"), gravatar_hash)
        OpenAPI.validate_property(Profile, Symbol("id"), id)
        OpenAPI.validate_property(Profile, Symbol("display_icon"), display_icon)
        OpenAPI.validate_property(Profile, Symbol("is_owner"), is_owner)
        OpenAPI.validate_property(Profile, Symbol("email_address"), email_address)
        return new(entity_type, deactivated, two_factor_auth_activated, mention_name, name, gravatar_hash, id, display_icon, is_owner, email_address, )
    end
end # type Profile

const _property_types_Profile = Dict{Symbol,String}(Symbol("entity_type")=>"String", Symbol("deactivated")=>"Bool", Symbol("two_factor_auth_activated")=>"Bool", Symbol("mention_name")=>"String", Symbol("name")=>"String", Symbol("gravatar_hash")=>"String", Symbol("id")=>"String", Symbol("display_icon")=>"Icon", Symbol("is_owner")=>"Bool", Symbol("email_address")=>"String", )
OpenAPI.property_type(::Type{ Profile }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Profile[name]))}

function check_required(o::Profile)
    o.entity_type === nothing && (return false)
    o.deactivated === nothing && (return false)
    o.mention_name === nothing && (return false)
    o.name === nothing && (return false)
    o.gravatar_hash === nothing && (return false)
    o.id === nothing && (return false)
    o.display_icon === nothing && (return false)
    o.is_owner === nothing && (return false)
    o.email_address === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Profile }, name::Symbol, val)







    if name === Symbol("id")
        OpenAPI.validate_param(name, "Profile", :format, val, "uuid")
    end



end
