# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EpicAssociatedGroup

    EpicAssociatedGroup(;
        group_id=nothing,
        associated_stories_count=nothing,
    )

    - group_id::String : The Group ID of the associated group.
    - associated_stories_count::Int64 : The number of stories this Group owns in the Epic.
"""
Base.@kwdef mutable struct EpicAssociatedGroup <: OpenAPI.APIModel
    group_id::Union{Nothing, String} = nothing
    associated_stories_count::Union{Nothing, Int64} = nothing

    function EpicAssociatedGroup(group_id, associated_stories_count, )
        OpenAPI.validate_property(EpicAssociatedGroup, Symbol("group_id"), group_id)
        OpenAPI.validate_property(EpicAssociatedGroup, Symbol("associated_stories_count"), associated_stories_count)
        return new(group_id, associated_stories_count, )
    end
end # type EpicAssociatedGroup

const _property_types_EpicAssociatedGroup = Dict{Symbol,String}(Symbol("group_id")=>"String", Symbol("associated_stories_count")=>"Int64", )
OpenAPI.property_type(::Type{ EpicAssociatedGroup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EpicAssociatedGroup[name]))}

function check_required(o::EpicAssociatedGroup)
    o.group_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ EpicAssociatedGroup }, name::Symbol, val)

    if name === Symbol("group_id")
        OpenAPI.validate_param(name, "EpicAssociatedGroup", :format, val, "uuid")
    end

    if name === Symbol("associated_stories_count")
        OpenAPI.validate_param(name, "EpicAssociatedGroup", :format, val, "int64")
    end
end
