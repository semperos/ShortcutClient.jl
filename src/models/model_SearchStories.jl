# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SearchStories

    SearchStories(;
        archived=nothing,
        owner_id=nothing,
        story_type=nothing,
        epic_ids=nothing,
        project_ids=nothing,
        updated_at_end=nothing,
        completed_at_end=nothing,
        workflow_state_types=nothing,
        deadline_end=nothing,
        created_at_start=nothing,
        epic_id=nothing,
        label_name=nothing,
        requested_by_id=nothing,
        iteration_id=nothing,
        label_ids=nothing,
        group_id=nothing,
        workflow_state_id=nothing,
        iteration_ids=nothing,
        created_at_end=nothing,
        deadline_start=nothing,
        group_ids=nothing,
        owner_ids=nothing,
        external_id=nothing,
        includes_description=nothing,
        estimate=nothing,
        project_id=nothing,
        completed_at_start=nothing,
        updated_at_start=nothing,
    )

    - archived::Bool : A true/false boolean indicating whether the Story is in archived state.
    - owner_id::String : An array of UUIDs for any Users who may be Owners of the Stories.
    - story_type::String : The type of Stories that you want returned.
    - epic_ids::Vector{Int64} : The Epic IDs that may be associated with the Stories.
    - project_ids::Vector{Int64} : The IDs for the Projects the Stories may be assigned to.
    - updated_at_end::ZonedDateTime : Stories should have been updated on or before this date.
    - completed_at_end::ZonedDateTime : Stories should have been completed on or before this date.
    - workflow_state_types::Vector{String} : The type of Workflow State the Stories may be in.
    - deadline_end::ZonedDateTime : Stories should have a deadline on or before this date.
    - created_at_start::ZonedDateTime : Stories should have been created on or after this date.
    - epic_id::Int64 : The Epic IDs that may be associated with the Stories.
    - label_name::String : The name of any associated Labels.
    - requested_by_id::String : The UUID of any Users who may have requested the Stories.
    - iteration_id::Int64 : The Iteration ID that may be associated with the Stories.
    - label_ids::Vector{Int64} : The Label IDs that may be associated with the Stories.
    - group_id::String : The Group ID that is associated with the Stories
    - workflow_state_id::Int64 : The unique IDs of the specific Workflow States that the Stories should be in.
    - iteration_ids::Vector{Int64} : The Iteration IDs that may be associated with the Stories.
    - created_at_end::ZonedDateTime : Stories should have been created on or before this date.
    - deadline_start::ZonedDateTime : Stories should have a deadline on or after this date.
    - group_ids::Vector{String} : The Group IDs that are associated with the Stories
    - owner_ids::Vector{String} : An array of UUIDs for any Users who may be Owners of the Stories.
    - external_id::String : An ID or URL that references an external resource. Useful during imports.
    - includes_description::Bool : Whether to include the story description in the response.
    - estimate::Int64 : The number of estimate points associate with the Stories.
    - project_id::Int64 : The IDs for the Projects the Stories may be assigned to.
    - completed_at_start::ZonedDateTime : Stories should have been completed on or after this date.
    - updated_at_start::ZonedDateTime : Stories should have been updated on or after this date.
"""
Base.@kwdef mutable struct SearchStories <: OpenAPI.APIModel
    archived::Union{Nothing, Bool} = nothing
    owner_id::Union{Nothing, String} = nothing
    story_type::Union{Nothing, String} = nothing
    epic_ids::Union{Nothing, Vector{Int64}} = nothing
    project_ids::Union{Nothing, Vector{Int64}} = nothing
    updated_at_end::Union{Nothing, ZonedDateTime} = nothing
    completed_at_end::Union{Nothing, ZonedDateTime} = nothing
    workflow_state_types::Union{Nothing, Vector{String}} = nothing
    deadline_end::Union{Nothing, ZonedDateTime} = nothing
    created_at_start::Union{Nothing, ZonedDateTime} = nothing
    epic_id::Union{Nothing, Int64} = nothing
    label_name::Union{Nothing, String} = nothing
    requested_by_id::Union{Nothing, String} = nothing
    iteration_id::Union{Nothing, Int64} = nothing
    label_ids::Union{Nothing, Vector{Int64}} = nothing
    group_id::Union{Nothing, String} = nothing
    workflow_state_id::Union{Nothing, Int64} = nothing
    iteration_ids::Union{Nothing, Vector{Int64}} = nothing
    created_at_end::Union{Nothing, ZonedDateTime} = nothing
    deadline_start::Union{Nothing, ZonedDateTime} = nothing
    group_ids::Union{Nothing, Vector{String}} = nothing
    owner_ids::Union{Nothing, Vector{String}} = nothing
    external_id::Union{Nothing, String} = nothing
    includes_description::Union{Nothing, Bool} = nothing
    estimate::Union{Nothing, Int64} = nothing
    project_id::Union{Nothing, Int64} = nothing
    completed_at_start::Union{Nothing, ZonedDateTime} = nothing
    updated_at_start::Union{Nothing, ZonedDateTime} = nothing

    function SearchStories(archived, owner_id, story_type, epic_ids, project_ids, updated_at_end, completed_at_end, workflow_state_types, deadline_end, created_at_start, epic_id, label_name, requested_by_id, iteration_id, label_ids, group_id, workflow_state_id, iteration_ids, created_at_end, deadline_start, group_ids, owner_ids, external_id, includes_description, estimate, project_id, completed_at_start, updated_at_start, )
        OpenAPI.validate_property(SearchStories, Symbol("archived"), archived)
        OpenAPI.validate_property(SearchStories, Symbol("owner_id"), owner_id)
        OpenAPI.validate_property(SearchStories, Symbol("story_type"), story_type)
        OpenAPI.validate_property(SearchStories, Symbol("epic_ids"), epic_ids)
        OpenAPI.validate_property(SearchStories, Symbol("project_ids"), project_ids)
        OpenAPI.validate_property(SearchStories, Symbol("updated_at_end"), updated_at_end)
        OpenAPI.validate_property(SearchStories, Symbol("completed_at_end"), completed_at_end)
        OpenAPI.validate_property(SearchStories, Symbol("workflow_state_types"), workflow_state_types)
        OpenAPI.validate_property(SearchStories, Symbol("deadline_end"), deadline_end)
        OpenAPI.validate_property(SearchStories, Symbol("created_at_start"), created_at_start)
        OpenAPI.validate_property(SearchStories, Symbol("epic_id"), epic_id)
        OpenAPI.validate_property(SearchStories, Symbol("label_name"), label_name)
        OpenAPI.validate_property(SearchStories, Symbol("requested_by_id"), requested_by_id)
        OpenAPI.validate_property(SearchStories, Symbol("iteration_id"), iteration_id)
        OpenAPI.validate_property(SearchStories, Symbol("label_ids"), label_ids)
        OpenAPI.validate_property(SearchStories, Symbol("group_id"), group_id)
        OpenAPI.validate_property(SearchStories, Symbol("workflow_state_id"), workflow_state_id)
        OpenAPI.validate_property(SearchStories, Symbol("iteration_ids"), iteration_ids)
        OpenAPI.validate_property(SearchStories, Symbol("created_at_end"), created_at_end)
        OpenAPI.validate_property(SearchStories, Symbol("deadline_start"), deadline_start)
        OpenAPI.validate_property(SearchStories, Symbol("group_ids"), group_ids)
        OpenAPI.validate_property(SearchStories, Symbol("owner_ids"), owner_ids)
        OpenAPI.validate_property(SearchStories, Symbol("external_id"), external_id)
        OpenAPI.validate_property(SearchStories, Symbol("includes_description"), includes_description)
        OpenAPI.validate_property(SearchStories, Symbol("estimate"), estimate)
        OpenAPI.validate_property(SearchStories, Symbol("project_id"), project_id)
        OpenAPI.validate_property(SearchStories, Symbol("completed_at_start"), completed_at_start)
        OpenAPI.validate_property(SearchStories, Symbol("updated_at_start"), updated_at_start)
        return new(archived, owner_id, story_type, epic_ids, project_ids, updated_at_end, completed_at_end, workflow_state_types, deadline_end, created_at_start, epic_id, label_name, requested_by_id, iteration_id, label_ids, group_id, workflow_state_id, iteration_ids, created_at_end, deadline_start, group_ids, owner_ids, external_id, includes_description, estimate, project_id, completed_at_start, updated_at_start, )
    end
end # type SearchStories

const _property_types_SearchStories = Dict{Symbol,String}(Symbol("archived")=>"Bool", Symbol("owner_id")=>"String", Symbol("story_type")=>"String", Symbol("epic_ids")=>"Vector{Int64}", Symbol("project_ids")=>"Vector{Int64}", Symbol("updated_at_end")=>"ZonedDateTime", Symbol("completed_at_end")=>"ZonedDateTime", Symbol("workflow_state_types")=>"Vector{String}", Symbol("deadline_end")=>"ZonedDateTime", Symbol("created_at_start")=>"ZonedDateTime", Symbol("epic_id")=>"Int64", Symbol("label_name")=>"String", Symbol("requested_by_id")=>"String", Symbol("iteration_id")=>"Int64", Symbol("label_ids")=>"Vector{Int64}", Symbol("group_id")=>"String", Symbol("workflow_state_id")=>"Int64", Symbol("iteration_ids")=>"Vector{Int64}", Symbol("created_at_end")=>"ZonedDateTime", Symbol("deadline_start")=>"ZonedDateTime", Symbol("group_ids")=>"Vector{String}", Symbol("owner_ids")=>"Vector{String}", Symbol("external_id")=>"String", Symbol("includes_description")=>"Bool", Symbol("estimate")=>"Int64", Symbol("project_id")=>"Int64", Symbol("completed_at_start")=>"ZonedDateTime", Symbol("updated_at_start")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ SearchStories }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SearchStories[name]))}

function check_required(o::SearchStories)
    true
end

function OpenAPI.validate_property(::Type{ SearchStories }, name::Symbol, val)


    if name === Symbol("owner_id")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "uuid")
    end

    if name === Symbol("story_type")
        OpenAPI.validate_param(name, "SearchStories", :enum, val, ["feature", "chore", "bug"])
    end


    if name === Symbol("epic_ids")
        OpenAPI.validate_param(name, "SearchStories", :uniqueItems, val, true)
    end

    if name === Symbol("project_ids")
        OpenAPI.validate_param(name, "SearchStories", :uniqueItems, val, true)
    end

    if name === Symbol("updated_at_end")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "date-time")
    end

    if name === Symbol("completed_at_end")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "date-time")
    end

    if name === Symbol("workflow_state_types")
        OpenAPI.validate_param(name, "SearchStories", :enum, val, ["started", "backlog", "unstarted", "done"])
    end


    if name === Symbol("deadline_end")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "date-time")
    end

    if name === Symbol("created_at_start")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "date-time")
    end

    if name === Symbol("epic_id")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "int64")
    end

    if name === Symbol("label_name")
        OpenAPI.validate_param(name, "SearchStories", :minLength, val, 1)
    end

    if name === Symbol("requested_by_id")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "uuid")
    end

    if name === Symbol("iteration_id")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "int64")
    end

    if name === Symbol("label_ids")
        OpenAPI.validate_param(name, "SearchStories", :uniqueItems, val, true)
    end

    if name === Symbol("group_id")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "uuid")
    end

    if name === Symbol("workflow_state_id")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "int64")
    end

    if name === Symbol("iteration_ids")
        OpenAPI.validate_param(name, "SearchStories", :uniqueItems, val, true)
    end

    if name === Symbol("created_at_end")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "date-time")
    end

    if name === Symbol("deadline_start")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "date-time")
    end

    if name === Symbol("group_ids")
        OpenAPI.validate_param(name, "SearchStories", :uniqueItems, val, true)
    end

    if name === Symbol("owner_ids")
        OpenAPI.validate_param(name, "SearchStories", :uniqueItems, val, true)
    end

    if name === Symbol("external_id")
        OpenAPI.validate_param(name, "SearchStories", :maxLength, val, 1024)
    end


    if name === Symbol("estimate")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "int64")
    end

    if name === Symbol("project_id")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "int64")
    end

    if name === Symbol("completed_at_start")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "date-time")
    end

    if name === Symbol("updated_at_start")
        OpenAPI.validate_param(name, "SearchStories", :format, val, "date-time")
    end
end
