# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Workflow
Workflow is the array of defined Workflow States. Workflow can be queried using the API but must be updated in the Shortcut UI. 

    Workflow(;
        description=nothing,
        entity_type=nothing,
        project_ids=nothing,
        states=nothing,
        name=nothing,
        updated_at=nothing,
        auto_assign_owner=nothing,
        id=nothing,
        team_id=nothing,
        created_at=nothing,
        default_state_id=nothing,
    )

    - description::String : A description of the workflow.
    - entity_type::String : A string description of this resource.
    - project_ids::Vector{Float64} : An array of IDs of projects within the Workflow.
    - states::Vector{WorkflowState} : A map of the states in this Workflow.
    - name::String : The name of the workflow.
    - updated_at::ZonedDateTime : The date the Workflow was updated.
    - auto_assign_owner::Bool : Indicates if an owner is automatically assigned when an unowned story is started.
    - id::Int64 : The unique ID of the Workflow.
    - team_id::Int64 : The ID of the team the workflow belongs to.
    - created_at::ZonedDateTime : The date the Workflow was created.
    - default_state_id::Int64 : The unique ID of the default state that new Stories are entered into.
"""
Base.@kwdef mutable struct Workflow <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    project_ids::Union{Nothing, Vector{Float64}} = nothing
    states::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WorkflowState} }
    name::Union{Nothing, String} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    auto_assign_owner::Union{Nothing, Bool} = nothing
    id::Union{Nothing, Int64} = nothing
    team_id::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    default_state_id::Union{Nothing, Int64} = nothing

    function Workflow(description, entity_type, project_ids, states, name, updated_at, auto_assign_owner, id, team_id, created_at, default_state_id, )
        OpenAPI.validate_property(Workflow, Symbol("description"), description)
        OpenAPI.validate_property(Workflow, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Workflow, Symbol("project_ids"), project_ids)
        OpenAPI.validate_property(Workflow, Symbol("states"), states)
        OpenAPI.validate_property(Workflow, Symbol("name"), name)
        OpenAPI.validate_property(Workflow, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(Workflow, Symbol("auto_assign_owner"), auto_assign_owner)
        OpenAPI.validate_property(Workflow, Symbol("id"), id)
        OpenAPI.validate_property(Workflow, Symbol("team_id"), team_id)
        OpenAPI.validate_property(Workflow, Symbol("created_at"), created_at)
        OpenAPI.validate_property(Workflow, Symbol("default_state_id"), default_state_id)
        return new(description, entity_type, project_ids, states, name, updated_at, auto_assign_owner, id, team_id, created_at, default_state_id, )
    end
end # type Workflow

const _property_types_Workflow = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("entity_type")=>"String", Symbol("project_ids")=>"Vector{Float64}", Symbol("states")=>"Vector{WorkflowState}", Symbol("name")=>"String", Symbol("updated_at")=>"ZonedDateTime", Symbol("auto_assign_owner")=>"Bool", Symbol("id")=>"Int64", Symbol("team_id")=>"Int64", Symbol("created_at")=>"ZonedDateTime", Symbol("default_state_id")=>"Int64", )
OpenAPI.property_type(::Type{ Workflow }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Workflow[name]))}

function check_required(o::Workflow)
    o.description === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.project_ids === nothing && (return false)
    o.states === nothing && (return false)
    o.name === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.auto_assign_owner === nothing && (return false)
    o.id === nothing && (return false)
    o.team_id === nothing && (return false)
    o.created_at === nothing && (return false)
    o.default_state_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Workflow }, name::Symbol, val)






    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "Workflow", :format, val, "date-time")
    end


    if name === Symbol("id")
        OpenAPI.validate_param(name, "Workflow", :format, val, "int64")
    end

    if name === Symbol("team_id")
        OpenAPI.validate_param(name, "Workflow", :format, val, "int64")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Workflow", :format, val, "date-time")
    end

    if name === Symbol("default_state_id")
        OpenAPI.validate_param(name, "Workflow", :format, val, "int64")
    end
end
