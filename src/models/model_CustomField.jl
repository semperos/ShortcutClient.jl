# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CustomField

    CustomField(;
        description=nothing,
        icon_set_identifier=nothing,
        entity_type=nothing,
        story_types=nothing,
        name=nothing,
        fixed_position=nothing,
        updated_at=nothing,
        id=nothing,
        values=nothing,
        field_type=nothing,
        position=nothing,
        canonical_name=nothing,
        enabled=nothing,
        created_at=nothing,
    )

    - description::String : A string description of the CustomField
    - icon_set_identifier::String : A string that represents the icon that corresponds to this custom field.
    - entity_type::String : A string description of this resource.
    - story_types::Vector{String} : The types of stories this CustomField is scoped to.
    - name::String : The name of the Custom Field.
    - fixed_position::Bool : When true, the CustomFieldEnumValues may not be reordered.
    - updated_at::ZonedDateTime : The instant when this CustomField was last updated.
    - id::String : The unique public ID for the CustomField.
    - values::Vector{CustomFieldEnumValue} : A collection of legal values for a CustomField.
    - field_type::String : The type of Custom Field, eg. &#39;enum&#39;.
    - position::Int64 : An integer indicating the position of this Custom Field with respect to the other CustomField
    - canonical_name::String : The canonical name for a Shortcut-defined field.
    - enabled::Bool : When true, the CustomField can be applied to entities in the Workspace.
    - created_at::ZonedDateTime : The instant when this CustomField was created.
"""
Base.@kwdef mutable struct CustomField <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    icon_set_identifier::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    story_types::Union{Nothing, Vector{String}} = nothing
    name::Union{Nothing, String} = nothing
    fixed_position::Union{Nothing, Bool} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    id::Union{Nothing, String} = nothing
    values::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomFieldEnumValue} }
    field_type::Union{Nothing, String} = nothing
    position::Union{Nothing, Int64} = nothing
    canonical_name::Union{Nothing, String} = nothing
    enabled::Union{Nothing, Bool} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function CustomField(description, icon_set_identifier, entity_type, story_types, name, fixed_position, updated_at, id, values, field_type, position, canonical_name, enabled, created_at, )
        OpenAPI.validate_property(CustomField, Symbol("description"), description)
        OpenAPI.validate_property(CustomField, Symbol("icon_set_identifier"), icon_set_identifier)
        OpenAPI.validate_property(CustomField, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(CustomField, Symbol("story_types"), story_types)
        OpenAPI.validate_property(CustomField, Symbol("name"), name)
        OpenAPI.validate_property(CustomField, Symbol("fixed_position"), fixed_position)
        OpenAPI.validate_property(CustomField, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(CustomField, Symbol("id"), id)
        OpenAPI.validate_property(CustomField, Symbol("values"), values)
        OpenAPI.validate_property(CustomField, Symbol("field_type"), field_type)
        OpenAPI.validate_property(CustomField, Symbol("position"), position)
        OpenAPI.validate_property(CustomField, Symbol("canonical_name"), canonical_name)
        OpenAPI.validate_property(CustomField, Symbol("enabled"), enabled)
        OpenAPI.validate_property(CustomField, Symbol("created_at"), created_at)
        return new(description, icon_set_identifier, entity_type, story_types, name, fixed_position, updated_at, id, values, field_type, position, canonical_name, enabled, created_at, )
    end
end # type CustomField

const _property_types_CustomField = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("icon_set_identifier")=>"String", Symbol("entity_type")=>"String", Symbol("story_types")=>"Vector{String}", Symbol("name")=>"String", Symbol("fixed_position")=>"Bool", Symbol("updated_at")=>"ZonedDateTime", Symbol("id")=>"String", Symbol("values")=>"Vector{CustomFieldEnumValue}", Symbol("field_type")=>"String", Symbol("position")=>"Int64", Symbol("canonical_name")=>"String", Symbol("enabled")=>"Bool", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ CustomField }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CustomField[name]))}

function check_required(o::CustomField)
    o.entity_type === nothing && (return false)
    o.name === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.id === nothing && (return false)
    o.field_type === nothing && (return false)
    o.position === nothing && (return false)
    o.enabled === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CustomField }, name::Symbol, val)

    if name === Symbol("description")
        OpenAPI.validate_param(name, "CustomField", :maxLength, val, 512)
        OpenAPI.validate_param(name, "CustomField", :minLength, val, 1)
    end

    if name === Symbol("icon_set_identifier")
        OpenAPI.validate_param(name, "CustomField", :maxLength, val, 63)
        OpenAPI.validate_param(name, "CustomField", :minLength, val, 1)
    end

    if name === Symbol("entity_type")
        OpenAPI.validate_param(name, "CustomField", :enum, val, ["custom-field"])
    end



    if name === Symbol("name")
        OpenAPI.validate_param(name, "CustomField", :maxLength, val, 63)
        OpenAPI.validate_param(name, "CustomField", :minLength, val, 1)
    end


    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "CustomField", :format, val, "date-time")
    end

    if name === Symbol("id")
        OpenAPI.validate_param(name, "CustomField", :format, val, "uuid")
    end


    if name === Symbol("field_type")
        OpenAPI.validate_param(name, "CustomField", :enum, val, ["enum"])
    end


    if name === Symbol("position")
        OpenAPI.validate_param(name, "CustomField", :format, val, "int64")
    end



    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "CustomField", :format, val, "date-time")
    end
end
