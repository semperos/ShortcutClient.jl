# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryReferenceCommit
A reference to a VCS Commit.

    HistoryReferenceCommit(;
        id=nothing,
        entity_type=nothing,
        message=nothing,
        url=nothing,
    )

    - id::Any : The ID of the entity referenced.
    - entity_type::String : The type of entity referenced.
    - message::String : The message from the Commit.
    - url::String : The external URL for the Branch.
"""
Base.@kwdef mutable struct HistoryReferenceCommit <: OpenAPI.APIModel
    id::Union{Nothing, Any} = nothing
    entity_type::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing

    function HistoryReferenceCommit(id, entity_type, message, url, )
        OpenAPI.validate_property(HistoryReferenceCommit, Symbol("id"), id)
        OpenAPI.validate_property(HistoryReferenceCommit, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryReferenceCommit, Symbol("message"), message)
        OpenAPI.validate_property(HistoryReferenceCommit, Symbol("url"), url)
        return new(id, entity_type, message, url, )
    end
end # type HistoryReferenceCommit

const _property_types_HistoryReferenceCommit = Dict{Symbol,String}(Symbol("id")=>"Any", Symbol("entity_type")=>"String", Symbol("message")=>"String", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ HistoryReferenceCommit }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryReferenceCommit[name]))}

function check_required(o::HistoryReferenceCommit)
    o.id === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.message === nothing && (return false)
    o.url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryReferenceCommit }, name::Symbol, val)




    if name === Symbol("url")
        OpenAPI.validate_param(name, "HistoryReferenceCommit", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "HistoryReferenceCommit", :pattern, val, r"^https?:\/\/.+$")
    end
end
