# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateStoryCommentParams
Request parameters for creating a Comment on a Shortcut Story.

    CreateStoryCommentParams(;
        text=nothing,
        author_id=nothing,
        created_at=nothing,
        updated_at=nothing,
        external_id=nothing,
        parent_id=nothing,
    )

    - text::String : The comment text.
    - author_id::String : The Member ID of the Comment&#39;s author. Defaults to the user identified by the API token.
    - created_at::ZonedDateTime : Defaults to the time/date the comment is created, but can be set to reflect another date.
    - updated_at::ZonedDateTime : Defaults to the time/date the comment is last updated, but can be set to reflect another date.
    - external_id::String : This field can be set to another unique ID. In the case that the comment has been imported from another tool, the ID in the other tool can be indicated here.
    - parent_id::Int64 : The ID of the Comment that this comment is threaded under.
"""
Base.@kwdef mutable struct CreateStoryCommentParams <: OpenAPI.APIModel
    text::Union{Nothing, String} = nothing
    author_id::Union{Nothing, String} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    external_id::Union{Nothing, String} = nothing
    parent_id::Union{Nothing, Int64} = nothing

    function CreateStoryCommentParams(text, author_id, created_at, updated_at, external_id, parent_id, )
        OpenAPI.validate_property(CreateStoryCommentParams, Symbol("text"), text)
        OpenAPI.validate_property(CreateStoryCommentParams, Symbol("author_id"), author_id)
        OpenAPI.validate_property(CreateStoryCommentParams, Symbol("created_at"), created_at)
        OpenAPI.validate_property(CreateStoryCommentParams, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(CreateStoryCommentParams, Symbol("external_id"), external_id)
        OpenAPI.validate_property(CreateStoryCommentParams, Symbol("parent_id"), parent_id)
        return new(text, author_id, created_at, updated_at, external_id, parent_id, )
    end
end # type CreateStoryCommentParams

const _property_types_CreateStoryCommentParams = Dict{Symbol,String}(Symbol("text")=>"String", Symbol("author_id")=>"String", Symbol("created_at")=>"ZonedDateTime", Symbol("updated_at")=>"ZonedDateTime", Symbol("external_id")=>"String", Symbol("parent_id")=>"Int64", )
OpenAPI.property_type(::Type{ CreateStoryCommentParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateStoryCommentParams[name]))}

function check_required(o::CreateStoryCommentParams)
    o.text === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateStoryCommentParams }, name::Symbol, val)

    if name === Symbol("text")
        OpenAPI.validate_param(name, "CreateStoryCommentParams", :maxLength, val, 100000)
    end

    if name === Symbol("author_id")
        OpenAPI.validate_param(name, "CreateStoryCommentParams", :format, val, "uuid")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "CreateStoryCommentParams", :format, val, "date-time")
    end

    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "CreateStoryCommentParams", :format, val, "date-time")
    end

    if name === Symbol("external_id")
        OpenAPI.validate_param(name, "CreateStoryCommentParams", :maxLength, val, 1024)
    end

    if name === Symbol("parent_id")
        OpenAPI.validate_param(name, "CreateStoryCommentParams", :format, val, "int64")
    end
end
