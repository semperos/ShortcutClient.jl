# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryActionPullRequest
An action representing various operations for a Pull Request.

    HistoryActionPullRequest(;
        id=nothing,
        entity_type=nothing,
        action=nothing,
        number=nothing,
        title=nothing,
        url=nothing,
    )

    - id::Int64 : The ID of the entity referenced.
    - entity_type::String : The type of entity referenced.
    - action::String : The action of the entity referenced.
    - number::Int64 : The VCS Repository-specific ID for the Pull Request.
    - title::String : The title of the Pull Request.
    - url::String : The URL from the provider of the VCS Pull Request.
"""
Base.@kwdef mutable struct HistoryActionPullRequest <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    entity_type::Union{Nothing, String} = nothing
    action::Union{Nothing, String} = nothing
    number::Union{Nothing, Int64} = nothing
    title::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing

    function HistoryActionPullRequest(id, entity_type, action, number, title, url, )
        OpenAPI.validate_property(HistoryActionPullRequest, Symbol("id"), id)
        OpenAPI.validate_property(HistoryActionPullRequest, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryActionPullRequest, Symbol("action"), action)
        OpenAPI.validate_property(HistoryActionPullRequest, Symbol("number"), number)
        OpenAPI.validate_property(HistoryActionPullRequest, Symbol("title"), title)
        OpenAPI.validate_property(HistoryActionPullRequest, Symbol("url"), url)
        return new(id, entity_type, action, number, title, url, )
    end
end # type HistoryActionPullRequest

const _property_types_HistoryActionPullRequest = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("entity_type")=>"String", Symbol("action")=>"String", Symbol("number")=>"Int64", Symbol("title")=>"String", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ HistoryActionPullRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryActionPullRequest[name]))}

function check_required(o::HistoryActionPullRequest)
    o.id === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.action === nothing && (return false)
    o.number === nothing && (return false)
    o.title === nothing && (return false)
    o.url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryActionPullRequest }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "HistoryActionPullRequest", :format, val, "int64")
    end


    if name === Symbol("action")
        OpenAPI.validate_param(name, "HistoryActionPullRequest", :enum, val, ["open", "update", "reopen", "close", "sync", "comment"])
    end


    if name === Symbol("number")
        OpenAPI.validate_param(name, "HistoryActionPullRequest", :format, val, "int64")
    end


    if name === Symbol("url")
        OpenAPI.validate_param(name, "HistoryActionPullRequest", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "HistoryActionPullRequest", :pattern, val, r"^https?:\/\/.+$")
    end
end
