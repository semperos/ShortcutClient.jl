# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryReferenceStoryTask
A reference to a Story Task.

    HistoryReferenceStoryTask(;
        id=nothing,
        entity_type=nothing,
        description=nothing,
    )

    - id::Any : The ID of the entity referenced.
    - entity_type::String : The type of entity referenced.
    - description::String : The description of the Story Task.
"""
Base.@kwdef mutable struct HistoryReferenceStoryTask <: OpenAPI.APIModel
    id::Union{Nothing, Any} = nothing
    entity_type::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing

    function HistoryReferenceStoryTask(id, entity_type, description, )
        OpenAPI.validate_property(HistoryReferenceStoryTask, Symbol("id"), id)
        OpenAPI.validate_property(HistoryReferenceStoryTask, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryReferenceStoryTask, Symbol("description"), description)
        return new(id, entity_type, description, )
    end
end # type HistoryReferenceStoryTask

const _property_types_HistoryReferenceStoryTask = Dict{Symbol,String}(Symbol("id")=>"Any", Symbol("entity_type")=>"String", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ HistoryReferenceStoryTask }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryReferenceStoryTask[name]))}

function check_required(o::HistoryReferenceStoryTask)
    o.id === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.description === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryReferenceStoryTask }, name::Symbol, val)



end
