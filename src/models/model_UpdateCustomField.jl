# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateCustomField

    UpdateCustomField(;
        enabled=nothing,
        name=nothing,
        values=nothing,
        icon_set_identifier=nothing,
        description=nothing,
        before_id=nothing,
        after_id=nothing,
    )

    - enabled::Bool : Indicates whether the Field is enabled for the Workspace. Only enabled fields can be applied to Stories.
    - name::String : A collection of objects representing reporting periods for years.
    - values::Vector{UpdateCustomFieldEnumValue} : A collection of EnumValue objects representing the values in the domain of some Custom Field.
    - icon_set_identifier::String : A frontend-controlled string that represents the icon for this custom field.
    - description::String : A description of the purpose of this field.
    - before_id::String : The ID of the CustomField we want to move this CustomField before.
    - after_id::String : The ID of the CustomField we want to move this CustomField after.
"""
Base.@kwdef mutable struct UpdateCustomField <: OpenAPI.APIModel
    enabled::Union{Nothing, Bool} = nothing
    name::Union{Nothing, String} = nothing
    values::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UpdateCustomFieldEnumValue} }
    icon_set_identifier::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    before_id::Union{Nothing, String} = nothing
    after_id::Union{Nothing, String} = nothing

    function UpdateCustomField(enabled, name, values, icon_set_identifier, description, before_id, after_id, )
        OpenAPI.validate_property(UpdateCustomField, Symbol("enabled"), enabled)
        OpenAPI.validate_property(UpdateCustomField, Symbol("name"), name)
        OpenAPI.validate_property(UpdateCustomField, Symbol("values"), values)
        OpenAPI.validate_property(UpdateCustomField, Symbol("icon_set_identifier"), icon_set_identifier)
        OpenAPI.validate_property(UpdateCustomField, Symbol("description"), description)
        OpenAPI.validate_property(UpdateCustomField, Symbol("before_id"), before_id)
        OpenAPI.validate_property(UpdateCustomField, Symbol("after_id"), after_id)
        return new(enabled, name, values, icon_set_identifier, description, before_id, after_id, )
    end
end # type UpdateCustomField

const _property_types_UpdateCustomField = Dict{Symbol,String}(Symbol("enabled")=>"Bool", Symbol("name")=>"String", Symbol("values")=>"Vector{UpdateCustomFieldEnumValue}", Symbol("icon_set_identifier")=>"String", Symbol("description")=>"String", Symbol("before_id")=>"String", Symbol("after_id")=>"String", )
OpenAPI.property_type(::Type{ UpdateCustomField }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateCustomField[name]))}

function check_required(o::UpdateCustomField)
    true
end

function OpenAPI.validate_property(::Type{ UpdateCustomField }, name::Symbol, val)


    if name === Symbol("name")
        OpenAPI.validate_param(name, "UpdateCustomField", :maxLength, val, 63)
        OpenAPI.validate_param(name, "UpdateCustomField", :minLength, val, 1)
    end


    if name === Symbol("icon_set_identifier")
        OpenAPI.validate_param(name, "UpdateCustomField", :maxLength, val, 63)
        OpenAPI.validate_param(name, "UpdateCustomField", :minLength, val, 1)
    end


    if name === Symbol("before_id")
        OpenAPI.validate_param(name, "UpdateCustomField", :format, val, "uuid")
    end

    if name === Symbol("after_id")
        OpenAPI.validate_param(name, "UpdateCustomField", :format, val, "uuid")
    end
end
