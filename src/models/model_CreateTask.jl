# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateTask

    CreateTask(;
        description=nothing,
        complete=nothing,
        owner_ids=nothing,
        external_id=nothing,
        created_at=nothing,
        updated_at=nothing,
    )

    - description::String : The Task description.
    - complete::Bool : True/false boolean indicating whether the Task is completed. Defaults to false.
    - owner_ids::Vector{String} : An array of UUIDs for any members you want to add as Owners on this new Task.
    - external_id::String : This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.
    - created_at::ZonedDateTime : Defaults to the time/date the Task is created but can be set to reflect another creation time/date.
    - updated_at::ZonedDateTime : Defaults to the time/date the Task is created in Shortcut but can be set to reflect another time/date.
"""
Base.@kwdef mutable struct CreateTask <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    complete::Union{Nothing, Bool} = nothing
    owner_ids::Union{Nothing, Vector{String}} = nothing
    external_id::Union{Nothing, String} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing

    function CreateTask(description, complete, owner_ids, external_id, created_at, updated_at, )
        OpenAPI.validate_property(CreateTask, Symbol("description"), description)
        OpenAPI.validate_property(CreateTask, Symbol("complete"), complete)
        OpenAPI.validate_property(CreateTask, Symbol("owner_ids"), owner_ids)
        OpenAPI.validate_property(CreateTask, Symbol("external_id"), external_id)
        OpenAPI.validate_property(CreateTask, Symbol("created_at"), created_at)
        OpenAPI.validate_property(CreateTask, Symbol("updated_at"), updated_at)
        return new(description, complete, owner_ids, external_id, created_at, updated_at, )
    end
end # type CreateTask

const _property_types_CreateTask = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("complete")=>"Bool", Symbol("owner_ids")=>"Vector{String}", Symbol("external_id")=>"String", Symbol("created_at")=>"ZonedDateTime", Symbol("updated_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ CreateTask }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateTask[name]))}

function check_required(o::CreateTask)
    o.description === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateTask }, name::Symbol, val)

    if name === Symbol("description")
        OpenAPI.validate_param(name, "CreateTask", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "CreateTask", :minLength, val, 1)
    end



    if name === Symbol("external_id")
        OpenAPI.validate_param(name, "CreateTask", :maxLength, val, 128)
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "CreateTask", :format, val, "date-time")
    end

    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "CreateTask", :format, val, "date-time")
    end
end
