# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Iteration
An Iteration is a defined, time-boxed period of development for a collection of Stories. See https://help.shortcut.com/hc/en-us/articles/360028953452-Iterations-Overview for more information.

    Iteration(;
        app_url=nothing,
        description=nothing,
        entity_type=nothing,
        labels=nothing,
        mention_ids=nothing,
        member_mention_ids=nothing,
        associated_groups=nothing,
        name=nothing,
        global_id=nothing,
        label_ids=nothing,
        updated_at=nothing,
        group_mention_ids=nothing,
        end_date=nothing,
        follower_ids=nothing,
        group_ids=nothing,
        start_date=nothing,
        status=nothing,
        id=nothing,
        stats=nothing,
        created_at=nothing,
    )

    - app_url::String : The Shortcut application url for the Iteration.
    - description::String : The description of the iteration.
    - entity_type::String : A string description of this resource
    - labels::Vector{Label} : An array of labels attached to the iteration.
    - mention_ids::Vector{String} : &#x60;Deprecated:&#x60; use &#x60;member_mention_ids&#x60;.
    - member_mention_ids::Vector{String} : An array of Member IDs that have been mentioned in the Story description.
    - associated_groups::Vector{IterationAssociatedGroup} : An array containing Group IDs and Group-owned story counts for the Iteration&#39;s associated groups.
    - name::String : The name of the iteration.
    - global_id::String
    - label_ids::Vector{Int64} : An array of label ids attached to the iteration.
    - updated_at::ZonedDateTime : The instant when this iteration was last updated.
    - group_mention_ids::Vector{String} : An array of Group IDs that have been mentioned in the Story description.
    - end_date::ZonedDateTime : The date this iteration ends.
    - follower_ids::Vector{String} : An array of UUIDs for any Members listed as Followers.
    - group_ids::Vector{String} : An array of UUIDs for any Groups you want to add as Followers. Currently, only one Group association is presented in our web UI.
    - start_date::ZonedDateTime : The date this iteration begins.
    - status::String : The status of the iteration. Values are either \&quot;unstarted\&quot;, \&quot;started\&quot;, or \&quot;done\&quot;.
    - id::Int64 : The ID of the iteration.
    - stats::IterationStats
    - created_at::ZonedDateTime : The instant when this iteration was created.
"""
Base.@kwdef mutable struct Iteration <: OpenAPI.APIModel
    app_url::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    labels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Label} }
    mention_ids::Union{Nothing, Vector{String}} = nothing
    member_mention_ids::Union{Nothing, Vector{String}} = nothing
    associated_groups::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IterationAssociatedGroup} }
    name::Union{Nothing, String} = nothing
    global_id::Union{Nothing, String} = nothing
    label_ids::Union{Nothing, Vector{Int64}} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    group_mention_ids::Union{Nothing, Vector{String}} = nothing
    end_date::Union{Nothing, ZonedDateTime} = nothing
    follower_ids::Union{Nothing, Vector{String}} = nothing
    group_ids::Union{Nothing, Vector{String}} = nothing
    start_date::Union{Nothing, ZonedDateTime} = nothing
    status::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    stats = nothing # spec type: Union{ Nothing, IterationStats }
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function Iteration(app_url, description, entity_type, labels, mention_ids, member_mention_ids, associated_groups, name, global_id, label_ids, updated_at, group_mention_ids, end_date, follower_ids, group_ids, start_date, status, id, stats, created_at, )
        OpenAPI.validate_property(Iteration, Symbol("app_url"), app_url)
        OpenAPI.validate_property(Iteration, Symbol("description"), description)
        OpenAPI.validate_property(Iteration, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Iteration, Symbol("labels"), labels)
        OpenAPI.validate_property(Iteration, Symbol("mention_ids"), mention_ids)
        OpenAPI.validate_property(Iteration, Symbol("member_mention_ids"), member_mention_ids)
        OpenAPI.validate_property(Iteration, Symbol("associated_groups"), associated_groups)
        OpenAPI.validate_property(Iteration, Symbol("name"), name)
        OpenAPI.validate_property(Iteration, Symbol("global_id"), global_id)
        OpenAPI.validate_property(Iteration, Symbol("label_ids"), label_ids)
        OpenAPI.validate_property(Iteration, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(Iteration, Symbol("group_mention_ids"), group_mention_ids)
        OpenAPI.validate_property(Iteration, Symbol("end_date"), end_date)
        OpenAPI.validate_property(Iteration, Symbol("follower_ids"), follower_ids)
        OpenAPI.validate_property(Iteration, Symbol("group_ids"), group_ids)
        OpenAPI.validate_property(Iteration, Symbol("start_date"), start_date)
        OpenAPI.validate_property(Iteration, Symbol("status"), status)
        OpenAPI.validate_property(Iteration, Symbol("id"), id)
        OpenAPI.validate_property(Iteration, Symbol("stats"), stats)
        OpenAPI.validate_property(Iteration, Symbol("created_at"), created_at)
        return new(app_url, description, entity_type, labels, mention_ids, member_mention_ids, associated_groups, name, global_id, label_ids, updated_at, group_mention_ids, end_date, follower_ids, group_ids, start_date, status, id, stats, created_at, )
    end
end # type Iteration

const _property_types_Iteration = Dict{Symbol,String}(Symbol("app_url")=>"String", Symbol("description")=>"String", Symbol("entity_type")=>"String", Symbol("labels")=>"Vector{Label}", Symbol("mention_ids")=>"Vector{String}", Symbol("member_mention_ids")=>"Vector{String}", Symbol("associated_groups")=>"Vector{IterationAssociatedGroup}", Symbol("name")=>"String", Symbol("global_id")=>"String", Symbol("label_ids")=>"Vector{Int64}", Symbol("updated_at")=>"ZonedDateTime", Symbol("group_mention_ids")=>"Vector{String}", Symbol("end_date")=>"ZonedDateTime", Symbol("follower_ids")=>"Vector{String}", Symbol("group_ids")=>"Vector{String}", Symbol("start_date")=>"ZonedDateTime", Symbol("status")=>"String", Symbol("id")=>"Int64", Symbol("stats")=>"IterationStats", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ Iteration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Iteration[name]))}

function check_required(o::Iteration)
    o.app_url === nothing && (return false)
    o.description === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.labels === nothing && (return false)
    o.mention_ids === nothing && (return false)
    o.member_mention_ids === nothing && (return false)
    o.associated_groups === nothing && (return false)
    o.name === nothing && (return false)
    o.global_id === nothing && (return false)
    o.label_ids === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.group_mention_ids === nothing && (return false)
    o.end_date === nothing && (return false)
    o.follower_ids === nothing && (return false)
    o.group_ids === nothing && (return false)
    o.start_date === nothing && (return false)
    o.status === nothing && (return false)
    o.id === nothing && (return false)
    o.stats === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Iteration }, name::Symbol, val)











    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "Iteration", :format, val, "date-time")
    end


    if name === Symbol("end_date")
        OpenAPI.validate_param(name, "Iteration", :format, val, "date-time")
    end



    if name === Symbol("start_date")
        OpenAPI.validate_param(name, "Iteration", :format, val, "date-time")
    end


    if name === Symbol("id")
        OpenAPI.validate_param(name, "Iteration", :format, val, "int64")
    end


    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Iteration", :format, val, "date-time")
    end
end
