# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ThreadedComment
Comments associated with Epic Discussions.

    ThreadedComment(;
        app_url=nothing,
        entity_type=nothing,
        deleted=nothing,
        mention_ids=nothing,
        author_id=nothing,
        member_mention_ids=nothing,
        comments=nothing,
        updated_at=nothing,
        group_mention_ids=nothing,
        external_id=nothing,
        id=nothing,
        created_at=nothing,
        text=nothing,
    )

    - app_url::String : The Shortcut application url for the Comment.
    - entity_type::String : A string description of this resource.
    - deleted::Bool : True/false boolean indicating whether the Comment is deleted.
    - mention_ids::Vector{String} : &#x60;Deprecated:&#x60; use &#x60;member_mention_ids&#x60;.
    - author_id::String : The unique ID of the Member that authored the Comment.
    - member_mention_ids::Vector{String} : An array of Member IDs that have been mentioned in this Comment.
    - comments::Vector{ThreadedComment} : A nested array of threaded comments.
    - updated_at::ZonedDateTime : The time/date the Comment was updated.
    - group_mention_ids::Vector{String} : An array of Group IDs that have been mentioned in this Comment.
    - external_id::String : This field can be set to another unique ID. In the case that the Comment has been imported from another tool, the ID in the other tool can be indicated here.
    - id::Int64 : The unique ID of the Comment.
    - created_at::ZonedDateTime : The time/date the Comment was created.
    - text::String : The text of the Comment.
"""
Base.@kwdef mutable struct ThreadedComment <: OpenAPI.APIModel
    app_url::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    deleted::Union{Nothing, Bool} = nothing
    mention_ids::Union{Nothing, Vector{String}} = nothing
    author_id::Union{Nothing, String} = nothing
    member_mention_ids::Union{Nothing, Vector{String}} = nothing
    comments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ThreadedComment} }
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    group_mention_ids::Union{Nothing, Vector{String}} = nothing
    external_id::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    text::Union{Nothing, String} = nothing

    function ThreadedComment(app_url, entity_type, deleted, mention_ids, author_id, member_mention_ids, comments, updated_at, group_mention_ids, external_id, id, created_at, text, )
        OpenAPI.validate_property(ThreadedComment, Symbol("app_url"), app_url)
        OpenAPI.validate_property(ThreadedComment, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(ThreadedComment, Symbol("deleted"), deleted)
        OpenAPI.validate_property(ThreadedComment, Symbol("mention_ids"), mention_ids)
        OpenAPI.validate_property(ThreadedComment, Symbol("author_id"), author_id)
        OpenAPI.validate_property(ThreadedComment, Symbol("member_mention_ids"), member_mention_ids)
        OpenAPI.validate_property(ThreadedComment, Symbol("comments"), comments)
        OpenAPI.validate_property(ThreadedComment, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(ThreadedComment, Symbol("group_mention_ids"), group_mention_ids)
        OpenAPI.validate_property(ThreadedComment, Symbol("external_id"), external_id)
        OpenAPI.validate_property(ThreadedComment, Symbol("id"), id)
        OpenAPI.validate_property(ThreadedComment, Symbol("created_at"), created_at)
        OpenAPI.validate_property(ThreadedComment, Symbol("text"), text)
        return new(app_url, entity_type, deleted, mention_ids, author_id, member_mention_ids, comments, updated_at, group_mention_ids, external_id, id, created_at, text, )
    end
end # type ThreadedComment

const _property_types_ThreadedComment = Dict{Symbol,String}(Symbol("app_url")=>"String", Symbol("entity_type")=>"String", Symbol("deleted")=>"Bool", Symbol("mention_ids")=>"Vector{String}", Symbol("author_id")=>"String", Symbol("member_mention_ids")=>"Vector{String}", Symbol("comments")=>"Vector{ThreadedComment}", Symbol("updated_at")=>"ZonedDateTime", Symbol("group_mention_ids")=>"Vector{String}", Symbol("external_id")=>"String", Symbol("id")=>"Int64", Symbol("created_at")=>"ZonedDateTime", Symbol("text")=>"String", )
OpenAPI.property_type(::Type{ ThreadedComment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ThreadedComment[name]))}

function check_required(o::ThreadedComment)
    o.app_url === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.deleted === nothing && (return false)
    o.mention_ids === nothing && (return false)
    o.author_id === nothing && (return false)
    o.member_mention_ids === nothing && (return false)
    o.comments === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.group_mention_ids === nothing && (return false)
    o.external_id === nothing && (return false)
    o.id === nothing && (return false)
    o.created_at === nothing && (return false)
    o.text === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ThreadedComment }, name::Symbol, val)





    if name === Symbol("author_id")
        OpenAPI.validate_param(name, "ThreadedComment", :format, val, "uuid")
    end



    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "ThreadedComment", :format, val, "date-time")
    end



    if name === Symbol("id")
        OpenAPI.validate_param(name, "ThreadedComment", :format, val, "int64")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "ThreadedComment", :format, val, "date-time")
    end

end
