# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PullRequest
Corresponds to a VCS Pull Request attached to a Shortcut story.

    PullRequest(;
        entity_type=nothing,
        closed=nothing,
        merged=nothing,
        num_added=nothing,
        branch_id=nothing,
        overlapping_stories=nothing,
        number=nothing,
        branch_name=nothing,
        target_branch_name=nothing,
        num_commits=nothing,
        title=nothing,
        updated_at=nothing,
        has_overlapping_stories=nothing,
        draft=nothing,
        id=nothing,
        vcs_labels=nothing,
        url=nothing,
        num_removed=nothing,
        review_status=nothing,
        num_modified=nothing,
        build_status=nothing,
        target_branch_id=nothing,
        repository_id=nothing,
        created_at=nothing,
    )

    - entity_type::String : A string description of this resource.
    - closed::Bool : True/False boolean indicating whether the VCS pull request has been closed.
    - merged::Bool : True/False boolean indicating whether the VCS pull request has been merged.
    - num_added::Int64 : Number of lines added in the pull request, according to VCS.
    - branch_id::Int64 : The ID of the branch for the particular pull request.
    - overlapping_stories::Vector{Int64} : An array of Story ids that have Pull Requests that change at least one of the same lines this Pull Request changes.
    - number::Int64 : The pull request&#39;s unique number ID in VCS.
    - branch_name::String : The name of the branch for the particular pull request.
    - target_branch_name::String : The name of the target branch for the particular pull request.
    - num_commits::Int64 : The number of commits on the pull request.
    - title::String : The title of the pull request.
    - updated_at::ZonedDateTime : The time/date the pull request was created.
    - has_overlapping_stories::Bool : Boolean indicating that the Pull Request has Stories that have Pull Requests that change at least one of the same lines this Pull Request changes.
    - draft::Bool : True/False boolean indicating whether the VCS pull request is in the draft state.
    - id::Int64 : The unique ID associated with the pull request in Shortcut.
    - vcs_labels::Vector{PullRequestLabel} : An array of PullRequestLabels attached to the PullRequest.
    - url::String : The URL for the pull request.
    - num_removed::Int64 : Number of lines removed in the pull request, according to VCS.
    - review_status::String : The status of the review for the pull request.
    - num_modified::Int64 : Number of lines modified in the pull request, according to VCS.
    - build_status::String : The status of the Continuous Integration workflow for the pull request.
    - target_branch_id::Int64 : The ID of the target branch for the particular pull request.
    - repository_id::Int64 : The ID of the repository for the particular pull request.
    - created_at::ZonedDateTime : The time/date the pull request was created.
"""
Base.@kwdef mutable struct PullRequest <: OpenAPI.APIModel
    entity_type::Union{Nothing, String} = nothing
    closed::Union{Nothing, Bool} = nothing
    merged::Union{Nothing, Bool} = nothing
    num_added::Union{Nothing, Int64} = nothing
    branch_id::Union{Nothing, Int64} = nothing
    overlapping_stories::Union{Nothing, Vector{Int64}} = nothing
    number::Union{Nothing, Int64} = nothing
    branch_name::Union{Nothing, String} = nothing
    target_branch_name::Union{Nothing, String} = nothing
    num_commits::Union{Nothing, Int64} = nothing
    title::Union{Nothing, String} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    has_overlapping_stories::Union{Nothing, Bool} = nothing
    draft::Union{Nothing, Bool} = nothing
    id::Union{Nothing, Int64} = nothing
    vcs_labels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PullRequestLabel} }
    url::Union{Nothing, String} = nothing
    num_removed::Union{Nothing, Int64} = nothing
    review_status::Union{Nothing, String} = nothing
    num_modified::Union{Nothing, Int64} = nothing
    build_status::Union{Nothing, String} = nothing
    target_branch_id::Union{Nothing, Int64} = nothing
    repository_id::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function PullRequest(entity_type, closed, merged, num_added, branch_id, overlapping_stories, number, branch_name, target_branch_name, num_commits, title, updated_at, has_overlapping_stories, draft, id, vcs_labels, url, num_removed, review_status, num_modified, build_status, target_branch_id, repository_id, created_at, )
        OpenAPI.validate_property(PullRequest, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(PullRequest, Symbol("closed"), closed)
        OpenAPI.validate_property(PullRequest, Symbol("merged"), merged)
        OpenAPI.validate_property(PullRequest, Symbol("num_added"), num_added)
        OpenAPI.validate_property(PullRequest, Symbol("branch_id"), branch_id)
        OpenAPI.validate_property(PullRequest, Symbol("overlapping_stories"), overlapping_stories)
        OpenAPI.validate_property(PullRequest, Symbol("number"), number)
        OpenAPI.validate_property(PullRequest, Symbol("branch_name"), branch_name)
        OpenAPI.validate_property(PullRequest, Symbol("target_branch_name"), target_branch_name)
        OpenAPI.validate_property(PullRequest, Symbol("num_commits"), num_commits)
        OpenAPI.validate_property(PullRequest, Symbol("title"), title)
        OpenAPI.validate_property(PullRequest, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(PullRequest, Symbol("has_overlapping_stories"), has_overlapping_stories)
        OpenAPI.validate_property(PullRequest, Symbol("draft"), draft)
        OpenAPI.validate_property(PullRequest, Symbol("id"), id)
        OpenAPI.validate_property(PullRequest, Symbol("vcs_labels"), vcs_labels)
        OpenAPI.validate_property(PullRequest, Symbol("url"), url)
        OpenAPI.validate_property(PullRequest, Symbol("num_removed"), num_removed)
        OpenAPI.validate_property(PullRequest, Symbol("review_status"), review_status)
        OpenAPI.validate_property(PullRequest, Symbol("num_modified"), num_modified)
        OpenAPI.validate_property(PullRequest, Symbol("build_status"), build_status)
        OpenAPI.validate_property(PullRequest, Symbol("target_branch_id"), target_branch_id)
        OpenAPI.validate_property(PullRequest, Symbol("repository_id"), repository_id)
        OpenAPI.validate_property(PullRequest, Symbol("created_at"), created_at)
        return new(entity_type, closed, merged, num_added, branch_id, overlapping_stories, number, branch_name, target_branch_name, num_commits, title, updated_at, has_overlapping_stories, draft, id, vcs_labels, url, num_removed, review_status, num_modified, build_status, target_branch_id, repository_id, created_at, )
    end
end # type PullRequest

const _property_types_PullRequest = Dict{Symbol,String}(Symbol("entity_type")=>"String", Symbol("closed")=>"Bool", Symbol("merged")=>"Bool", Symbol("num_added")=>"Int64", Symbol("branch_id")=>"Int64", Symbol("overlapping_stories")=>"Vector{Int64}", Symbol("number")=>"Int64", Symbol("branch_name")=>"String", Symbol("target_branch_name")=>"String", Symbol("num_commits")=>"Int64", Symbol("title")=>"String", Symbol("updated_at")=>"ZonedDateTime", Symbol("has_overlapping_stories")=>"Bool", Symbol("draft")=>"Bool", Symbol("id")=>"Int64", Symbol("vcs_labels")=>"Vector{PullRequestLabel}", Symbol("url")=>"String", Symbol("num_removed")=>"Int64", Symbol("review_status")=>"String", Symbol("num_modified")=>"Int64", Symbol("build_status")=>"String", Symbol("target_branch_id")=>"Int64", Symbol("repository_id")=>"Int64", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ PullRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PullRequest[name]))}

function check_required(o::PullRequest)
    o.entity_type === nothing && (return false)
    o.closed === nothing && (return false)
    o.merged === nothing && (return false)
    o.num_added === nothing && (return false)
    o.branch_id === nothing && (return false)
    o.number === nothing && (return false)
    o.branch_name === nothing && (return false)
    o.target_branch_name === nothing && (return false)
    o.num_commits === nothing && (return false)
    o.title === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.has_overlapping_stories === nothing && (return false)
    o.draft === nothing && (return false)
    o.id === nothing && (return false)
    o.url === nothing && (return false)
    o.num_removed === nothing && (return false)
    o.num_modified === nothing && (return false)
    o.target_branch_id === nothing && (return false)
    o.repository_id === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PullRequest }, name::Symbol, val)




    if name === Symbol("num_added")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end

    if name === Symbol("branch_id")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end


    if name === Symbol("number")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end



    if name === Symbol("num_commits")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end


    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "date-time")
    end



    if name === Symbol("id")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end



    if name === Symbol("num_removed")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end


    if name === Symbol("num_modified")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end


    if name === Symbol("target_branch_id")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end

    if name === Symbol("repository_id")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "int64")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "PullRequest", :format, val, "date-time")
    end
end
