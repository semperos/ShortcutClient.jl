# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Member
Details about an individual user within the Workspace.

    Member(;
        role=nothing,
        entity_type=nothing,
        disabled=nothing,
        global_id=nothing,
        state=nothing,
        updated_at=nothing,
        created_without_invite=nothing,
        group_ids=nothing,
        id=nothing,
        profile=nothing,
        created_at=nothing,
        replaced_by=nothing,
    )

    - role::String : The Member&#39;s role in the Workspace.
    - entity_type::String : A string description of this resource.
    - disabled::Bool : True/false boolean indicating whether the Member has been disabled within the Workspace.
    - global_id::String
    - state::String : The user state, one of partial, full, disabled, or imported.  A partial user is disabled, has no means to log in, and is not an import user.  A full user is enabled and has a means to log in.  A disabled user is disabled and has a means to log in.  An import user is disabled, has no means to log in, and is marked as an import user.
    - updated_at::ZonedDateTime : The time/date the Member was last updated.
    - created_without_invite::Bool : Whether this member was created as a placeholder entity.
    - group_ids::Vector{String} : The Member&#39;s group ids
    - id::String : The Member&#39;s ID in Shortcut.
    - profile::Profile
    - created_at::ZonedDateTime : The time/date the Member was created.
    - replaced_by::String : The id of the member that replaces this one when merged.
"""
Base.@kwdef mutable struct Member <: OpenAPI.APIModel
    role::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    disabled::Union{Nothing, Bool} = nothing
    global_id::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    created_without_invite::Union{Nothing, Bool} = nothing
    group_ids::Union{Nothing, Vector{String}} = nothing
    id::Union{Nothing, String} = nothing
    profile = nothing # spec type: Union{ Nothing, Profile }
    created_at::Union{Nothing, ZonedDateTime} = nothing
    replaced_by::Union{Nothing, String} = nothing

    function Member(role, entity_type, disabled, global_id, state, updated_at, created_without_invite, group_ids, id, profile, created_at, replaced_by, )
        OpenAPI.validate_property(Member, Symbol("role"), role)
        OpenAPI.validate_property(Member, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Member, Symbol("disabled"), disabled)
        OpenAPI.validate_property(Member, Symbol("global_id"), global_id)
        OpenAPI.validate_property(Member, Symbol("state"), state)
        OpenAPI.validate_property(Member, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(Member, Symbol("created_without_invite"), created_without_invite)
        OpenAPI.validate_property(Member, Symbol("group_ids"), group_ids)
        OpenAPI.validate_property(Member, Symbol("id"), id)
        OpenAPI.validate_property(Member, Symbol("profile"), profile)
        OpenAPI.validate_property(Member, Symbol("created_at"), created_at)
        OpenAPI.validate_property(Member, Symbol("replaced_by"), replaced_by)
        return new(role, entity_type, disabled, global_id, state, updated_at, created_without_invite, group_ids, id, profile, created_at, replaced_by, )
    end
end # type Member

const _property_types_Member = Dict{Symbol,String}(Symbol("role")=>"String", Symbol("entity_type")=>"String", Symbol("disabled")=>"Bool", Symbol("global_id")=>"String", Symbol("state")=>"String", Symbol("updated_at")=>"ZonedDateTime", Symbol("created_without_invite")=>"Bool", Symbol("group_ids")=>"Vector{String}", Symbol("id")=>"String", Symbol("profile")=>"Profile", Symbol("created_at")=>"ZonedDateTime", Symbol("replaced_by")=>"String", )
OpenAPI.property_type(::Type{ Member }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Member[name]))}

function check_required(o::Member)
    o.role === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.disabled === nothing && (return false)
    o.global_id === nothing && (return false)
    o.state === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.created_without_invite === nothing && (return false)
    o.group_ids === nothing && (return false)
    o.id === nothing && (return false)
    o.profile === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Member }, name::Symbol, val)





    if name === Symbol("state")
        OpenAPI.validate_param(name, "Member", :enum, val, ["partial", "full", "disabled", "imported"])
    end


    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "Member", :format, val, "date-time")
    end



    if name === Symbol("id")
        OpenAPI.validate_param(name, "Member", :format, val, "uuid")
    end


    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Member", :format, val, "date-time")
    end

    if name === Symbol("replaced_by")
        OpenAPI.validate_param(name, "Member", :format, val, "uuid")
    end
end
