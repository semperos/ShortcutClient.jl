# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Task
A Task on a Story.

    Task(;
        description=nothing,
        entity_type=nothing,
        story_id=nothing,
        mention_ids=nothing,
        member_mention_ids=nothing,
        completed_at=nothing,
        updated_at=nothing,
        group_mention_ids=nothing,
        owner_ids=nothing,
        external_id=nothing,
        id=nothing,
        position=nothing,
        complete=nothing,
        created_at=nothing,
    )

    - description::String : Full text of the Task.
    - entity_type::String : A string description of this resource.
    - story_id::Int64 : The unique identifier of the parent Story.
    - mention_ids::Vector{String} : &#x60;Deprecated:&#x60; use &#x60;member_mention_ids&#x60;.
    - member_mention_ids::Vector{String} : An array of UUIDs of Members mentioned in this Task.
    - completed_at::ZonedDateTime : The time/date the Task was completed.
    - updated_at::ZonedDateTime : The time/date the Task was updated.
    - group_mention_ids::Vector{String} : An array of UUIDs of Groups mentioned in this Task.
    - owner_ids::Vector{String} : An array of UUIDs of the Owners of this Task.
    - external_id::String : This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.
    - id::Int64 : The unique ID of the Task.
    - position::Int64 : The number corresponding to the Task&#39;s position within a list of Tasks on a Story.
    - complete::Bool : True/false boolean indicating whether the Task has been completed.
    - created_at::ZonedDateTime : The time/date the Task was created.
"""
Base.@kwdef mutable struct Task <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    entity_type::Union{Nothing, String} = nothing
    story_id::Union{Nothing, Int64} = nothing
    mention_ids::Union{Nothing, Vector{String}} = nothing
    member_mention_ids::Union{Nothing, Vector{String}} = nothing
    completed_at::Union{Nothing, ZonedDateTime} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    group_mention_ids::Union{Nothing, Vector{String}} = nothing
    owner_ids::Union{Nothing, Vector{String}} = nothing
    external_id::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    position::Union{Nothing, Int64} = nothing
    complete::Union{Nothing, Bool} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function Task(description, entity_type, story_id, mention_ids, member_mention_ids, completed_at, updated_at, group_mention_ids, owner_ids, external_id, id, position, complete, created_at, )
        OpenAPI.validate_property(Task, Symbol("description"), description)
        OpenAPI.validate_property(Task, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Task, Symbol("story_id"), story_id)
        OpenAPI.validate_property(Task, Symbol("mention_ids"), mention_ids)
        OpenAPI.validate_property(Task, Symbol("member_mention_ids"), member_mention_ids)
        OpenAPI.validate_property(Task, Symbol("completed_at"), completed_at)
        OpenAPI.validate_property(Task, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(Task, Symbol("group_mention_ids"), group_mention_ids)
        OpenAPI.validate_property(Task, Symbol("owner_ids"), owner_ids)
        OpenAPI.validate_property(Task, Symbol("external_id"), external_id)
        OpenAPI.validate_property(Task, Symbol("id"), id)
        OpenAPI.validate_property(Task, Symbol("position"), position)
        OpenAPI.validate_property(Task, Symbol("complete"), complete)
        OpenAPI.validate_property(Task, Symbol("created_at"), created_at)
        return new(description, entity_type, story_id, mention_ids, member_mention_ids, completed_at, updated_at, group_mention_ids, owner_ids, external_id, id, position, complete, created_at, )
    end
end # type Task

const _property_types_Task = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("entity_type")=>"String", Symbol("story_id")=>"Int64", Symbol("mention_ids")=>"Vector{String}", Symbol("member_mention_ids")=>"Vector{String}", Symbol("completed_at")=>"ZonedDateTime", Symbol("updated_at")=>"ZonedDateTime", Symbol("group_mention_ids")=>"Vector{String}", Symbol("owner_ids")=>"Vector{String}", Symbol("external_id")=>"String", Symbol("id")=>"Int64", Symbol("position")=>"Int64", Symbol("complete")=>"Bool", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ Task }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Task[name]))}

function check_required(o::Task)
    o.description === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.story_id === nothing && (return false)
    o.mention_ids === nothing && (return false)
    o.member_mention_ids === nothing && (return false)
    o.completed_at === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.group_mention_ids === nothing && (return false)
    o.owner_ids === nothing && (return false)
    o.external_id === nothing && (return false)
    o.id === nothing && (return false)
    o.position === nothing && (return false)
    o.complete === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Task }, name::Symbol, val)



    if name === Symbol("story_id")
        OpenAPI.validate_param(name, "Task", :format, val, "int64")
    end



    if name === Symbol("completed_at")
        OpenAPI.validate_param(name, "Task", :format, val, "date-time")
    end

    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "Task", :format, val, "date-time")
    end




    if name === Symbol("id")
        OpenAPI.validate_param(name, "Task", :format, val, "int64")
    end

    if name === Symbol("position")
        OpenAPI.validate_param(name, "Task", :format, val, "int64")
    end


    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Task", :format, val, "date-time")
    end
end
