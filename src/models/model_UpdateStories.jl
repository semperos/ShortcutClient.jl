# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateStories

    UpdateStories(;
        archived=nothing,
        story_ids=nothing,
        story_type=nothing,
        move_to=nothing,
        follower_ids_add=nothing,
        epic_id=nothing,
        external_links=nothing,
        follower_ids_remove=nothing,
        requested_by_id=nothing,
        iteration_id=nothing,
        custom_fields_remove=nothing,
        labels_add=nothing,
        group_id=nothing,
        workflow_state_id=nothing,
        before_id=nothing,
        estimate=nothing,
        after_id=nothing,
        owner_ids_remove=nothing,
        custom_fields_add=nothing,
        project_id=nothing,
        labels_remove=nothing,
        deadline=nothing,
        owner_ids_add=nothing,
    )

    - archived::Bool : If the Stories should be archived or not.
    - story_ids::Vector{Int64} : The Ids of the Stories you wish to update.
    - story_type::String : The type of story (feature, bug, chore).
    - move_to::String : One of \&quot;first\&quot; or \&quot;last\&quot;. This can be used to move the given story to the first or last position in the workflow state.
    - follower_ids_add::Vector{String} : The UUIDs of the new followers to be added.
    - epic_id::Int64 : The ID of the epic the story belongs to.
    - external_links::Vector{String} : An array of External Links associated with this story.
    - follower_ids_remove::Vector{String} : The UUIDs of the followers to be removed.
    - requested_by_id::String : The ID of the member that requested the story.
    - iteration_id::Int64 : The ID of the iteration the story belongs to.
    - custom_fields_remove::Vector{CustomFieldValueParams} : A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
    - labels_add::Vector{CreateLabelParams} : An array of labels to be added.
    - group_id::String : The Id of the Group the Stories should belong to.
    - workflow_state_id::Int64 : The ID of the workflow state to put the stories in.
    - before_id::Int64 : The ID of the story that the stories are to be moved before.
    - estimate::Int64 : The numeric point estimate of the story. Can also be null, which means unestimated.
    - after_id::Int64 : The ID of the story that the stories are to be moved below.
    - owner_ids_remove::Vector{String} : The UUIDs of the owners to be removed.
    - custom_fields_add::Vector{CustomFieldValueParams} : A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
    - project_id::Int64 : The ID of the Project the Stories should belong to.
    - labels_remove::Vector{CreateLabelParams} : An array of labels to be removed.
    - deadline::ZonedDateTime : The due date of the story.
    - owner_ids_add::Vector{String} : The UUIDs of the new owners to be added.
"""
Base.@kwdef mutable struct UpdateStories <: OpenAPI.APIModel
    archived::Union{Nothing, Bool} = nothing
    story_ids::Union{Nothing, Vector{Int64}} = nothing
    story_type::Union{Nothing, String} = nothing
    move_to::Union{Nothing, String} = nothing
    follower_ids_add::Union{Nothing, Vector{String}} = nothing
    epic_id::Union{Nothing, Int64} = nothing
    external_links::Union{Nothing, Vector{String}} = nothing
    follower_ids_remove::Union{Nothing, Vector{String}} = nothing
    requested_by_id::Union{Nothing, String} = nothing
    iteration_id::Union{Nothing, Int64} = nothing
    custom_fields_remove::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomFieldValueParams} }
    labels_add::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateLabelParams} }
    group_id::Union{Nothing, String} = nothing
    workflow_state_id::Union{Nothing, Int64} = nothing
    before_id::Union{Nothing, Int64} = nothing
    estimate::Union{Nothing, Int64} = nothing
    after_id::Union{Nothing, Int64} = nothing
    owner_ids_remove::Union{Nothing, Vector{String}} = nothing
    custom_fields_add::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomFieldValueParams} }
    project_id::Union{Nothing, Int64} = nothing
    labels_remove::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateLabelParams} }
    deadline::Union{Nothing, ZonedDateTime} = nothing
    owner_ids_add::Union{Nothing, Vector{String}} = nothing

    function UpdateStories(archived, story_ids, story_type, move_to, follower_ids_add, epic_id, external_links, follower_ids_remove, requested_by_id, iteration_id, custom_fields_remove, labels_add, group_id, workflow_state_id, before_id, estimate, after_id, owner_ids_remove, custom_fields_add, project_id, labels_remove, deadline, owner_ids_add, )
        OpenAPI.validate_property(UpdateStories, Symbol("archived"), archived)
        OpenAPI.validate_property(UpdateStories, Symbol("story_ids"), story_ids)
        OpenAPI.validate_property(UpdateStories, Symbol("story_type"), story_type)
        OpenAPI.validate_property(UpdateStories, Symbol("move_to"), move_to)
        OpenAPI.validate_property(UpdateStories, Symbol("follower_ids_add"), follower_ids_add)
        OpenAPI.validate_property(UpdateStories, Symbol("epic_id"), epic_id)
        OpenAPI.validate_property(UpdateStories, Symbol("external_links"), external_links)
        OpenAPI.validate_property(UpdateStories, Symbol("follower_ids_remove"), follower_ids_remove)
        OpenAPI.validate_property(UpdateStories, Symbol("requested_by_id"), requested_by_id)
        OpenAPI.validate_property(UpdateStories, Symbol("iteration_id"), iteration_id)
        OpenAPI.validate_property(UpdateStories, Symbol("custom_fields_remove"), custom_fields_remove)
        OpenAPI.validate_property(UpdateStories, Symbol("labels_add"), labels_add)
        OpenAPI.validate_property(UpdateStories, Symbol("group_id"), group_id)
        OpenAPI.validate_property(UpdateStories, Symbol("workflow_state_id"), workflow_state_id)
        OpenAPI.validate_property(UpdateStories, Symbol("before_id"), before_id)
        OpenAPI.validate_property(UpdateStories, Symbol("estimate"), estimate)
        OpenAPI.validate_property(UpdateStories, Symbol("after_id"), after_id)
        OpenAPI.validate_property(UpdateStories, Symbol("owner_ids_remove"), owner_ids_remove)
        OpenAPI.validate_property(UpdateStories, Symbol("custom_fields_add"), custom_fields_add)
        OpenAPI.validate_property(UpdateStories, Symbol("project_id"), project_id)
        OpenAPI.validate_property(UpdateStories, Symbol("labels_remove"), labels_remove)
        OpenAPI.validate_property(UpdateStories, Symbol("deadline"), deadline)
        OpenAPI.validate_property(UpdateStories, Symbol("owner_ids_add"), owner_ids_add)
        return new(archived, story_ids, story_type, move_to, follower_ids_add, epic_id, external_links, follower_ids_remove, requested_by_id, iteration_id, custom_fields_remove, labels_add, group_id, workflow_state_id, before_id, estimate, after_id, owner_ids_remove, custom_fields_add, project_id, labels_remove, deadline, owner_ids_add, )
    end
end # type UpdateStories

const _property_types_UpdateStories = Dict{Symbol,String}(Symbol("archived")=>"Bool", Symbol("story_ids")=>"Vector{Int64}", Symbol("story_type")=>"String", Symbol("move_to")=>"String", Symbol("follower_ids_add")=>"Vector{String}", Symbol("epic_id")=>"Int64", Symbol("external_links")=>"Vector{String}", Symbol("follower_ids_remove")=>"Vector{String}", Symbol("requested_by_id")=>"String", Symbol("iteration_id")=>"Int64", Symbol("custom_fields_remove")=>"Vector{CustomFieldValueParams}", Symbol("labels_add")=>"Vector{CreateLabelParams}", Symbol("group_id")=>"String", Symbol("workflow_state_id")=>"Int64", Symbol("before_id")=>"Int64", Symbol("estimate")=>"Int64", Symbol("after_id")=>"Int64", Symbol("owner_ids_remove")=>"Vector{String}", Symbol("custom_fields_add")=>"Vector{CustomFieldValueParams}", Symbol("project_id")=>"Int64", Symbol("labels_remove")=>"Vector{CreateLabelParams}", Symbol("deadline")=>"ZonedDateTime", Symbol("owner_ids_add")=>"Vector{String}", )
OpenAPI.property_type(::Type{ UpdateStories }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateStories[name]))}

function check_required(o::UpdateStories)
    o.story_ids === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UpdateStories }, name::Symbol, val)


    if name === Symbol("story_ids")
        OpenAPI.validate_param(name, "UpdateStories", :uniqueItems, val, true)
    end

    if name === Symbol("story_type")
        OpenAPI.validate_param(name, "UpdateStories", :enum, val, ["feature", "chore", "bug"])
    end


    if name === Symbol("move_to")
        OpenAPI.validate_param(name, "UpdateStories", :enum, val, ["last", "first"])
    end


    if name === Symbol("follower_ids_add")
        OpenAPI.validate_param(name, "UpdateStories", :uniqueItems, val, true)
    end

    if name === Symbol("epic_id")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "int64")
    end


    if name === Symbol("follower_ids_remove")
        OpenAPI.validate_param(name, "UpdateStories", :uniqueItems, val, true)
    end

    if name === Symbol("requested_by_id")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "uuid")
    end

    if name === Symbol("iteration_id")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "int64")
    end



    if name === Symbol("group_id")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "uuid")
    end

    if name === Symbol("workflow_state_id")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "int64")
    end

    if name === Symbol("before_id")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "int64")
    end

    if name === Symbol("estimate")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "int64")
    end

    if name === Symbol("after_id")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "int64")
    end

    if name === Symbol("owner_ids_remove")
        OpenAPI.validate_param(name, "UpdateStories", :uniqueItems, val, true)
    end


    if name === Symbol("project_id")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "int64")
    end


    if name === Symbol("deadline")
        OpenAPI.validate_param(name, "UpdateStories", :format, val, "date-time")
    end

    if name === Symbol("owner_ids_add")
        OpenAPI.validate_param(name, "UpdateStories", :uniqueItems, val, true)
    end
end
