# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Category
A Category can be used to associate Objectives.

    Category(;
        archived=nothing,
        entity_type=nothing,
        color=nothing,
        name=nothing,
        global_id=nothing,
        type=nothing,
        updated_at=nothing,
        external_id=nothing,
        id=nothing,
        created_at=nothing,
    )

    - archived::Bool : A true/false boolean indicating if the Category has been archived.
    - entity_type::String : A string description of this resource.
    - color::String : The hex color to be displayed with the Category (for example, \&quot;#ff0000\&quot;).
    - name::String : The name of the Category.
    - global_id::String : The Global ID of the Category.
    - type::String : The type of entity this Category is associated with; currently Milestone or Objective is the only type of Category.
    - updated_at::ZonedDateTime : The time/date that the Category was updated.
    - external_id::String : This field can be set to another unique ID. In the case that the Category has been imported from another tool, the ID in the other tool can be indicated here.
    - id::Int64 : The unique ID of the Category.
    - created_at::ZonedDateTime : The time/date that the Category was created.
"""
Base.@kwdef mutable struct Category <: OpenAPI.APIModel
    archived::Union{Nothing, Bool} = nothing
    entity_type::Union{Nothing, String} = nothing
    color::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    global_id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    external_id::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function Category(archived, entity_type, color, name, global_id, type, updated_at, external_id, id, created_at, )
        OpenAPI.validate_property(Category, Symbol("archived"), archived)
        OpenAPI.validate_property(Category, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Category, Symbol("color"), color)
        OpenAPI.validate_property(Category, Symbol("name"), name)
        OpenAPI.validate_property(Category, Symbol("global_id"), global_id)
        OpenAPI.validate_property(Category, Symbol("type"), type)
        OpenAPI.validate_property(Category, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(Category, Symbol("external_id"), external_id)
        OpenAPI.validate_property(Category, Symbol("id"), id)
        OpenAPI.validate_property(Category, Symbol("created_at"), created_at)
        return new(archived, entity_type, color, name, global_id, type, updated_at, external_id, id, created_at, )
    end
end # type Category

const _property_types_Category = Dict{Symbol,String}(Symbol("archived")=>"Bool", Symbol("entity_type")=>"String", Symbol("color")=>"String", Symbol("name")=>"String", Symbol("global_id")=>"String", Symbol("type")=>"String", Symbol("updated_at")=>"ZonedDateTime", Symbol("external_id")=>"String", Symbol("id")=>"Int64", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ Category }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Category[name]))}

function check_required(o::Category)
    o.archived === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.color === nothing && (return false)
    o.name === nothing && (return false)
    o.global_id === nothing && (return false)
    o.type === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.external_id === nothing && (return false)
    o.id === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Category }, name::Symbol, val)



    if name === Symbol("color")
        OpenAPI.validate_param(name, "Category", :format, val, "css-color")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "Category", :minLength, val, 1)
        OpenAPI.validate_param(name, "Category", :pattern, val, r"^#[a-fA-F0-9]{6}$")
    end




    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "Category", :format, val, "date-time")
    end


    if name === Symbol("id")
        OpenAPI.validate_param(name, "Category", :format, val, "int64")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Category", :format, val, "date-time")
    end
end
