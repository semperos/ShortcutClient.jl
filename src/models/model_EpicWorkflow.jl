# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EpicWorkflow
Epic Workflow is the array of defined Epic States. Epic Workflow can be queried using the API but must be updated in the Shortcut UI. 

    EpicWorkflow(;
        entity_type=nothing,
        id=nothing,
        created_at=nothing,
        updated_at=nothing,
        default_epic_state_id=nothing,
        epic_states=nothing,
    )

    - entity_type::String : A string description of this resource.
    - id::Int64 : The unique ID of the Epic Workflow.
    - created_at::ZonedDateTime : The date the Epic Workflow was created.
    - updated_at::ZonedDateTime : The date the Epic Workflow was updated.
    - default_epic_state_id::Int64 : The unique ID of the default Epic State that new Epics are assigned by default.
    - epic_states::Vector{EpicState} : A map of the Epic States in this Epic Workflow.
"""
Base.@kwdef mutable struct EpicWorkflow <: OpenAPI.APIModel
    entity_type::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    default_epic_state_id::Union{Nothing, Int64} = nothing
    epic_states::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EpicState} }

    function EpicWorkflow(entity_type, id, created_at, updated_at, default_epic_state_id, epic_states, )
        OpenAPI.validate_property(EpicWorkflow, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(EpicWorkflow, Symbol("id"), id)
        OpenAPI.validate_property(EpicWorkflow, Symbol("created_at"), created_at)
        OpenAPI.validate_property(EpicWorkflow, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(EpicWorkflow, Symbol("default_epic_state_id"), default_epic_state_id)
        OpenAPI.validate_property(EpicWorkflow, Symbol("epic_states"), epic_states)
        return new(entity_type, id, created_at, updated_at, default_epic_state_id, epic_states, )
    end
end # type EpicWorkflow

const _property_types_EpicWorkflow = Dict{Symbol,String}(Symbol("entity_type")=>"String", Symbol("id")=>"Int64", Symbol("created_at")=>"ZonedDateTime", Symbol("updated_at")=>"ZonedDateTime", Symbol("default_epic_state_id")=>"Int64", Symbol("epic_states")=>"Vector{EpicState}", )
OpenAPI.property_type(::Type{ EpicWorkflow }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EpicWorkflow[name]))}

function check_required(o::EpicWorkflow)
    o.entity_type === nothing && (return false)
    o.id === nothing && (return false)
    o.created_at === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.default_epic_state_id === nothing && (return false)
    o.epic_states === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ EpicWorkflow }, name::Symbol, val)


    if name === Symbol("id")
        OpenAPI.validate_param(name, "EpicWorkflow", :format, val, "int64")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "EpicWorkflow", :format, val, "date-time")
    end

    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "EpicWorkflow", :format, val, "date-time")
    end

    if name === Symbol("default_epic_state_id")
        OpenAPI.validate_param(name, "EpicWorkflow", :format, val, "int64")
    end

end
