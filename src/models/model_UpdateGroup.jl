# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateGroup

    UpdateGroup(;
        description=nothing,
        archived=nothing,
        color=nothing,
        display_icon_id=nothing,
        mention_name=nothing,
        name=nothing,
        color_key=nothing,
        member_ids=nothing,
        workflow_ids=nothing,
    )

    - description::String : The description of this Group.
    - archived::Bool : Whether or not this Group is archived.
    - color::String : The color you wish to use for the Group in the system.
    - display_icon_id::String : The Icon id for the avatar of this Group.
    - mention_name::String : The mention name of this Group.
    - name::String : The name of this Group.
    - color_key::String : The color key you wish to use for the Group in the system.
    - member_ids::Vector{String} : The Member ids to add to this Group.
    - workflow_ids::Vector{Int64} : The Workflow ids to add to the Group.
"""
Base.@kwdef mutable struct UpdateGroup <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    archived::Union{Nothing, Bool} = nothing
    color::Union{Nothing, String} = nothing
    display_icon_id::Union{Nothing, String} = nothing
    mention_name::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    color_key::Union{Nothing, String} = nothing
    member_ids::Union{Nothing, Vector{String}} = nothing
    workflow_ids::Union{Nothing, Vector{Int64}} = nothing

    function UpdateGroup(description, archived, color, display_icon_id, mention_name, name, color_key, member_ids, workflow_ids, )
        OpenAPI.validate_property(UpdateGroup, Symbol("description"), description)
        OpenAPI.validate_property(UpdateGroup, Symbol("archived"), archived)
        OpenAPI.validate_property(UpdateGroup, Symbol("color"), color)
        OpenAPI.validate_property(UpdateGroup, Symbol("display_icon_id"), display_icon_id)
        OpenAPI.validate_property(UpdateGroup, Symbol("mention_name"), mention_name)
        OpenAPI.validate_property(UpdateGroup, Symbol("name"), name)
        OpenAPI.validate_property(UpdateGroup, Symbol("color_key"), color_key)
        OpenAPI.validate_property(UpdateGroup, Symbol("member_ids"), member_ids)
        OpenAPI.validate_property(UpdateGroup, Symbol("workflow_ids"), workflow_ids)
        return new(description, archived, color, display_icon_id, mention_name, name, color_key, member_ids, workflow_ids, )
    end
end # type UpdateGroup

const _property_types_UpdateGroup = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("archived")=>"Bool", Symbol("color")=>"String", Symbol("display_icon_id")=>"String", Symbol("mention_name")=>"String", Symbol("name")=>"String", Symbol("color_key")=>"String", Symbol("member_ids")=>"Vector{String}", Symbol("workflow_ids")=>"Vector{Int64}", )
OpenAPI.property_type(::Type{ UpdateGroup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateGroup[name]))}

function check_required(o::UpdateGroup)
    true
end

function OpenAPI.validate_property(::Type{ UpdateGroup }, name::Symbol, val)

    if name === Symbol("description")
        OpenAPI.validate_param(name, "UpdateGroup", :maxLength, val, 4096)
    end


    if name === Symbol("color")
        OpenAPI.validate_param(name, "UpdateGroup", :format, val, "css-color")
    end
    if name === Symbol("color")
        OpenAPI.validate_param(name, "UpdateGroup", :minLength, val, 1)
        OpenAPI.validate_param(name, "UpdateGroup", :pattern, val, r"^#[a-fA-F0-9]{6}$")
    end

    if name === Symbol("display_icon_id")
        OpenAPI.validate_param(name, "UpdateGroup", :format, val, "uuid")
    end

    if name === Symbol("mention_name")
        OpenAPI.validate_param(name, "UpdateGroup", :maxLength, val, 63)
        OpenAPI.validate_param(name, "UpdateGroup", :minLength, val, 1)
    end

    if name === Symbol("name")
        OpenAPI.validate_param(name, "UpdateGroup", :maxLength, val, 63)
        OpenAPI.validate_param(name, "UpdateGroup", :minLength, val, 1)
    end

    if name === Symbol("color_key")
        OpenAPI.validate_param(name, "UpdateGroup", :enum, val, ["blue", "purple", "midnight-blue", "orange", "yellow-green", "brass", "gray", "fuchsia", "yellow", "pink", "sky-blue", "green", "red", "black", "slate", "turquoise"])
    end


    if name === Symbol("member_ids")
        OpenAPI.validate_param(name, "UpdateGroup", :uniqueItems, val, true)
    end

end
