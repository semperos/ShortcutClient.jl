# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Identity
The Identity of the VCS user that authored the Commit.

    Identity(;
        entity_type=nothing,
        name=nothing,
        type=nothing,
    )

    - entity_type::String : A string description of this resource.
    - name::String : This is your login in VCS.
    - type::String : The service this Identity is for.
"""
Base.@kwdef mutable struct Identity <: OpenAPI.APIModel
    entity_type::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function Identity(entity_type, name, type, )
        OpenAPI.validate_property(Identity, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(Identity, Symbol("name"), name)
        OpenAPI.validate_property(Identity, Symbol("type"), type)
        return new(entity_type, name, type, )
    end
end # type Identity

const _property_types_Identity = Dict{Symbol,String}(Symbol("entity_type")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ Identity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Identity[name]))}

function check_required(o::Identity)
    o.entity_type === nothing && (return false)
    o.name === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Identity }, name::Symbol, val)



    if name === Symbol("type")
        OpenAPI.validate_param(name, "Identity", :enum, val, ["slack", "github", "gitlab", "bitbucket"])
    end

end
