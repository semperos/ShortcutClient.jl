# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EntityTemplate
An entity template can be used to prefill various fields when creating new stories.

    EntityTemplate(;
        entity_type=nothing,
        id=nothing,
        created_at=nothing,
        updated_at=nothing,
        name=nothing,
        author_id=nothing,
        last_used_at=nothing,
        story_contents=nothing,
    )

    - entity_type::String : A string description of this resource.
    - id::String : The unique identifier for the entity template.
    - created_at::ZonedDateTime : The time/date when the entity template was created.
    - updated_at::ZonedDateTime : The time/date when the entity template was last updated.
    - name::String : The template&#39;s name.
    - author_id::String : The unique ID of the member who created the template.
    - last_used_at::ZonedDateTime : The last time that someone created an entity using this template.
    - story_contents::StoryContents
"""
Base.@kwdef mutable struct EntityTemplate <: OpenAPI.APIModel
    entity_type::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    author_id::Union{Nothing, String} = nothing
    last_used_at::Union{Nothing, ZonedDateTime} = nothing
    story_contents = nothing # spec type: Union{ Nothing, StoryContents }

    function EntityTemplate(entity_type, id, created_at, updated_at, name, author_id, last_used_at, story_contents, )
        OpenAPI.validate_property(EntityTemplate, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(EntityTemplate, Symbol("id"), id)
        OpenAPI.validate_property(EntityTemplate, Symbol("created_at"), created_at)
        OpenAPI.validate_property(EntityTemplate, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(EntityTemplate, Symbol("name"), name)
        OpenAPI.validate_property(EntityTemplate, Symbol("author_id"), author_id)
        OpenAPI.validate_property(EntityTemplate, Symbol("last_used_at"), last_used_at)
        OpenAPI.validate_property(EntityTemplate, Symbol("story_contents"), story_contents)
        return new(entity_type, id, created_at, updated_at, name, author_id, last_used_at, story_contents, )
    end
end # type EntityTemplate

const _property_types_EntityTemplate = Dict{Symbol,String}(Symbol("entity_type")=>"String", Symbol("id")=>"String", Symbol("created_at")=>"ZonedDateTime", Symbol("updated_at")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("author_id")=>"String", Symbol("last_used_at")=>"ZonedDateTime", Symbol("story_contents")=>"StoryContents", )
OpenAPI.property_type(::Type{ EntityTemplate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EntityTemplate[name]))}

function check_required(o::EntityTemplate)
    o.entity_type === nothing && (return false)
    o.id === nothing && (return false)
    o.created_at === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.name === nothing && (return false)
    o.author_id === nothing && (return false)
    o.last_used_at === nothing && (return false)
    o.story_contents === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ EntityTemplate }, name::Symbol, val)


    if name === Symbol("id")
        OpenAPI.validate_param(name, "EntityTemplate", :format, val, "uuid")
    end

    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "EntityTemplate", :format, val, "date-time")
    end

    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "EntityTemplate", :format, val, "date-time")
    end


    if name === Symbol("author_id")
        OpenAPI.validate_param(name, "EntityTemplate", :format, val, "uuid")
    end

    if name === Symbol("last_used_at")
        OpenAPI.validate_param(name, "EntityTemplate", :format, val, "date-time")
    end

end
