# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""History
A history item is a group of actions that represent a transactional change to a Story.

    History(;
        changed_at=nothing,
        primary_id=nothing,
        references=nothing,
        actions=nothing,
        member_id=nothing,
        external_id=nothing,
        id=nothing,
        version=nothing,
        webhook_id=nothing,
        automation_id=nothing,
    )

    - changed_at::String : The date when the change occurred.
    - primary_id::Any : The ID of the primary entity that has changed, if applicable.
    - references::Vector{Any} : An array of objects affected by the change. Reference objects provide basic information for the entities reference in the history actions. Some have specific fields, but they always contain an id, entity_type, and a name.
    - actions::Vector{Any} : An array of actions that were performed for the change.
    - member_id::String : The ID of the member who performed the change.
    - external_id::String : The ID of the webhook that handled the change.
    - id::String : The ID representing the change for the story.
    - version::String : The version of the change format.
    - webhook_id::String : The ID of the webhook that handled the change.
    - automation_id::String : The ID of the automation that performed the change.
"""
Base.@kwdef mutable struct History <: OpenAPI.APIModel
    changed_at::Union{Nothing, String} = nothing
    primary_id::Union{Nothing, Any} = nothing
    references::Union{Nothing, Vector{Any}} = nothing
    actions::Union{Nothing, Vector{Any}} = nothing
    member_id::Union{Nothing, String} = nothing
    external_id::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing
    webhook_id::Union{Nothing, String} = nothing
    automation_id::Union{Nothing, String} = nothing

    function History(changed_at, primary_id, references, actions, member_id, external_id, id, version, webhook_id, automation_id, )
        OpenAPI.validate_property(History, Symbol("changed_at"), changed_at)
        OpenAPI.validate_property(History, Symbol("primary_id"), primary_id)
        OpenAPI.validate_property(History, Symbol("references"), references)
        OpenAPI.validate_property(History, Symbol("actions"), actions)
        OpenAPI.validate_property(History, Symbol("member_id"), member_id)
        OpenAPI.validate_property(History, Symbol("external_id"), external_id)
        OpenAPI.validate_property(History, Symbol("id"), id)
        OpenAPI.validate_property(History, Symbol("version"), version)
        OpenAPI.validate_property(History, Symbol("webhook_id"), webhook_id)
        OpenAPI.validate_property(History, Symbol("automation_id"), automation_id)
        return new(changed_at, primary_id, references, actions, member_id, external_id, id, version, webhook_id, automation_id, )
    end
end # type History

const _property_types_History = Dict{Symbol,String}(Symbol("changed_at")=>"String", Symbol("primary_id")=>"Any", Symbol("references")=>"Vector{Any}", Symbol("actions")=>"Vector{Any}", Symbol("member_id")=>"String", Symbol("external_id")=>"String", Symbol("id")=>"String", Symbol("version")=>"String", Symbol("webhook_id")=>"String", Symbol("automation_id")=>"String", )
OpenAPI.property_type(::Type{ History }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_History[name]))}

function check_required(o::History)
    o.changed_at === nothing && (return false)
    o.actions === nothing && (return false)
    o.id === nothing && (return false)
    o.version === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ History }, name::Symbol, val)





    if name === Symbol("member_id")
        OpenAPI.validate_param(name, "History", :format, val, "uuid")
    end


    if name === Symbol("id")
        OpenAPI.validate_param(name, "History", :format, val, "uuid")
    end

    if name === Symbol("version")
        OpenAPI.validate_param(name, "History", :enum, val, ["v1"])
    end



    if name === Symbol("automation_id")
        OpenAPI.validate_param(name, "History", :format, val, "uuid")
    end
end
