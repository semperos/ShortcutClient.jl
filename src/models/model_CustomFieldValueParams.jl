# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CustomFieldValueParams

    CustomFieldValueParams(;
        field_id=nothing,
        value_id=nothing,
        value=nothing,
    )

    - field_id::String : The unique public ID for the CustomField.
    - value_id::String : The unique public ID for the CustomFieldEnumValue.
    - value::String : A literal value for the CustomField. Currently ignored.
"""
Base.@kwdef mutable struct CustomFieldValueParams <: OpenAPI.APIModel
    field_id::Union{Nothing, String} = nothing
    value_id::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing

    function CustomFieldValueParams(field_id, value_id, value, )
        OpenAPI.validate_property(CustomFieldValueParams, Symbol("field_id"), field_id)
        OpenAPI.validate_property(CustomFieldValueParams, Symbol("value_id"), value_id)
        OpenAPI.validate_property(CustomFieldValueParams, Symbol("value"), value)
        return new(field_id, value_id, value, )
    end
end # type CustomFieldValueParams

const _property_types_CustomFieldValueParams = Dict{Symbol,String}(Symbol("field_id")=>"String", Symbol("value_id")=>"String", Symbol("value")=>"String", )
OpenAPI.property_type(::Type{ CustomFieldValueParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CustomFieldValueParams[name]))}

function check_required(o::CustomFieldValueParams)
    o.field_id === nothing && (return false)
    o.value_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CustomFieldValueParams }, name::Symbol, val)

    if name === Symbol("field_id")
        OpenAPI.validate_param(name, "CustomFieldValueParams", :format, val, "uuid")
    end

    if name === Symbol("value_id")
        OpenAPI.validate_param(name, "CustomFieldValueParams", :format, val, "uuid")
    end

end
