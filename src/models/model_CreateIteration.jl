# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateIteration

    CreateIteration(;
        follower_ids=nothing,
        group_ids=nothing,
        labels=nothing,
        description=nothing,
        name=nothing,
        start_date=nothing,
        end_date=nothing,
    )

    - follower_ids::Vector{String} : An array of UUIDs for any Members you want to add as Followers.
    - group_ids::Vector{String} : An array of UUIDs for any Groups you want to add as Followers. Currently, only one Group association is presented in our web UI.
    - labels::Vector{CreateLabelParams} : An array of Labels attached to the Iteration.
    - description::String : The description of the Iteration.
    - name::String : The name of this Iteration.
    - start_date::String : The date this Iteration begins, e.g. 2019-07-01.
    - end_date::String : The date this Iteration ends, e.g. 2019-07-01.
"""
Base.@kwdef mutable struct CreateIteration <: OpenAPI.APIModel
    follower_ids::Union{Nothing, Vector{String}} = nothing
    group_ids::Union{Nothing, Vector{String}} = nothing
    labels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateLabelParams} }
    description::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    start_date::Union{Nothing, String} = nothing
    end_date::Union{Nothing, String} = nothing

    function CreateIteration(follower_ids, group_ids, labels, description, name, start_date, end_date, )
        OpenAPI.validate_property(CreateIteration, Symbol("follower_ids"), follower_ids)
        OpenAPI.validate_property(CreateIteration, Symbol("group_ids"), group_ids)
        OpenAPI.validate_property(CreateIteration, Symbol("labels"), labels)
        OpenAPI.validate_property(CreateIteration, Symbol("description"), description)
        OpenAPI.validate_property(CreateIteration, Symbol("name"), name)
        OpenAPI.validate_property(CreateIteration, Symbol("start_date"), start_date)
        OpenAPI.validate_property(CreateIteration, Symbol("end_date"), end_date)
        return new(follower_ids, group_ids, labels, description, name, start_date, end_date, )
    end
end # type CreateIteration

const _property_types_CreateIteration = Dict{Symbol,String}(Symbol("follower_ids")=>"Vector{String}", Symbol("group_ids")=>"Vector{String}", Symbol("labels")=>"Vector{CreateLabelParams}", Symbol("description")=>"String", Symbol("name")=>"String", Symbol("start_date")=>"String", Symbol("end_date")=>"String", )
OpenAPI.property_type(::Type{ CreateIteration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateIteration[name]))}

function check_required(o::CreateIteration)
    o.name === nothing && (return false)
    o.start_date === nothing && (return false)
    o.end_date === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateIteration }, name::Symbol, val)




    if name === Symbol("description")
        OpenAPI.validate_param(name, "CreateIteration", :maxLength, val, 100000)
    end

    if name === Symbol("name")
        OpenAPI.validate_param(name, "CreateIteration", :maxLength, val, 256)
        OpenAPI.validate_param(name, "CreateIteration", :minLength, val, 1)
    end

    if name === Symbol("start_date")
        OpenAPI.validate_param(name, "CreateIteration", :minLength, val, 1)
    end

    if name === Symbol("end_date")
        OpenAPI.validate_param(name, "CreateIteration", :minLength, val, 1)
    end
end
