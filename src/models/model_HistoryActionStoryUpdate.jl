# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HistoryActionStoryUpdate
An action representing a Story being updated.

    HistoryActionStoryUpdate(;
        id=nothing,
        entity_type=nothing,
        action=nothing,
        app_url=nothing,
        changes=nothing,
        name=nothing,
        story_type=nothing,
    )

    - id::Int64 : The ID of the entity referenced.
    - entity_type::String : The type of entity referenced.
    - action::String : The action of the entity referenced.
    - app_url::String : The application URL of the Story.
    - changes::HistoryChangesStory
    - name::String : The name of the Story.
    - story_type::String : The type of Story; either feature, bug, or chore.
"""
Base.@kwdef mutable struct HistoryActionStoryUpdate <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    entity_type::Union{Nothing, String} = nothing
    action::Union{Nothing, String} = nothing
    app_url::Union{Nothing, String} = nothing
    changes = nothing # spec type: Union{ Nothing, HistoryChangesStory }
    name::Union{Nothing, String} = nothing
    story_type::Union{Nothing, String} = nothing

    function HistoryActionStoryUpdate(id, entity_type, action, app_url, changes, name, story_type, )
        OpenAPI.validate_property(HistoryActionStoryUpdate, Symbol("id"), id)
        OpenAPI.validate_property(HistoryActionStoryUpdate, Symbol("entity_type"), entity_type)
        OpenAPI.validate_property(HistoryActionStoryUpdate, Symbol("action"), action)
        OpenAPI.validate_property(HistoryActionStoryUpdate, Symbol("app_url"), app_url)
        OpenAPI.validate_property(HistoryActionStoryUpdate, Symbol("changes"), changes)
        OpenAPI.validate_property(HistoryActionStoryUpdate, Symbol("name"), name)
        OpenAPI.validate_property(HistoryActionStoryUpdate, Symbol("story_type"), story_type)
        return new(id, entity_type, action, app_url, changes, name, story_type, )
    end
end # type HistoryActionStoryUpdate

const _property_types_HistoryActionStoryUpdate = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("entity_type")=>"String", Symbol("action")=>"String", Symbol("app_url")=>"String", Symbol("changes")=>"HistoryChangesStory", Symbol("name")=>"String", Symbol("story_type")=>"String", )
OpenAPI.property_type(::Type{ HistoryActionStoryUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HistoryActionStoryUpdate[name]))}

function check_required(o::HistoryActionStoryUpdate)
    o.id === nothing && (return false)
    o.entity_type === nothing && (return false)
    o.action === nothing && (return false)
    o.app_url === nothing && (return false)
    o.name === nothing && (return false)
    o.story_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HistoryActionStoryUpdate }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "HistoryActionStoryUpdate", :format, val, "int64")
    end


    if name === Symbol("action")
        OpenAPI.validate_param(name, "HistoryActionStoryUpdate", :enum, val, ["update"])
    end


    if name === Symbol("app_url")
        OpenAPI.validate_param(name, "HistoryActionStoryUpdate", :maxLength, val, 2048)
        OpenAPI.validate_param(name, "HistoryActionStoryUpdate", :pattern, val, r"^https?:\/\/.+$")
    end



    if name === Symbol("story_type")
        OpenAPI.validate_param(name, "HistoryActionStoryUpdate", :enum, val, ["feature", "chore", "bug"])
    end

end
