# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DefaultApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DefaultApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DefaultApi }) = "https://api.app.shortcut.com"

const _returntypes_create_category_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Category,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_category(_api::DefaultApi, create_category_param::CreateCategory; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_category_DefaultApi, "/api/v3/categories", ["api_token", ], create_category_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Category

Create Category allows you to create a new Category in Shortcut.

Params:
- create_category_param::CreateCategory (required)

Return: Category, OpenAPI.Clients.ApiResponse
"""
function create_category(_api::DefaultApi, create_category_param::CreateCategory; _mediaType=nothing)
    _ctx = _oacinternal_create_category(_api, create_category_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_category(_api::DefaultApi, response_stream::Channel, create_category_param::CreateCategory; _mediaType=nothing)
    _ctx = _oacinternal_create_category(_api, create_category_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_entity_template_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => EntityTemplate,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_entity_template(_api::DefaultApi, create_entity_template_param::CreateEntityTemplate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_entity_template_DefaultApi, "/api/v3/entity-templates", ["api_token", ], create_entity_template_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Entity Template

Create a new entity template for the Workspace.

Params:
- create_entity_template_param::CreateEntityTemplate (required)

Return: EntityTemplate, OpenAPI.Clients.ApiResponse
"""
function create_entity_template(_api::DefaultApi, create_entity_template_param::CreateEntityTemplate; _mediaType=nothing)
    _ctx = _oacinternal_create_entity_template(_api, create_entity_template_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_entity_template(_api::DefaultApi, response_stream::Channel, create_entity_template_param::CreateEntityTemplate; _mediaType=nothing)
    _ctx = _oacinternal_create_entity_template(_api, create_entity_template_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_epic_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Epic,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_epic(_api::DefaultApi, create_epic_param::CreateEpic; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_epic_DefaultApi, "/api/v3/epics", ["api_token", ], create_epic_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Epic

Create Epic allows you to create a new Epic in Shortcut.

Params:
- create_epic_param::CreateEpic (required)

Return: Epic, OpenAPI.Clients.ApiResponse
"""
function create_epic(_api::DefaultApi, create_epic_param::CreateEpic; _mediaType=nothing)
    _ctx = _oacinternal_create_epic(_api, create_epic_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_epic(_api::DefaultApi, response_stream::Channel, create_epic_param::CreateEpic; _mediaType=nothing)
    _ctx = _oacinternal_create_epic(_api, create_epic_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_epic_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => ThreadedComment,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_epic_comment(_api::DefaultApi, epic_public_id::Int64, create_epic_comment_param::CreateEpicComment; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_epic_comment_DefaultApi, "/api/v3/epics/{epic-public-id}/comments", ["api_token", ], create_epic_comment_param)
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Epic Comment

This endpoint allows you to create a threaded Comment on an Epic.

Params:
- epic_public_id::Int64 (required)
- create_epic_comment_param::CreateEpicComment (required)

Return: ThreadedComment, OpenAPI.Clients.ApiResponse
"""
function create_epic_comment(_api::DefaultApi, epic_public_id::Int64, create_epic_comment_param::CreateEpicComment; _mediaType=nothing)
    _ctx = _oacinternal_create_epic_comment(_api, epic_public_id, create_epic_comment_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_epic_comment(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64, create_epic_comment_param::CreateEpicComment; _mediaType=nothing)
    _ctx = _oacinternal_create_epic_comment(_api, epic_public_id, create_epic_comment_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_epic_comment_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => ThreadedComment,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_epic_comment_comment(_api::DefaultApi, epic_public_id::Int64, comment_public_id::Int64, create_comment_comment::CreateCommentComment; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_epic_comment_comment_DefaultApi, "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}", ["api_token", ], create_comment_comment)
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Epic Comment Comment

This endpoint allows you to create a nested Comment reply to an existing Epic Comment.

Params:
- epic_public_id::Int64 (required)
- comment_public_id::Int64 (required)
- create_comment_comment::CreateCommentComment (required)

Return: ThreadedComment, OpenAPI.Clients.ApiResponse
"""
function create_epic_comment_comment(_api::DefaultApi, epic_public_id::Int64, comment_public_id::Int64, create_comment_comment::CreateCommentComment; _mediaType=nothing)
    _ctx = _oacinternal_create_epic_comment_comment(_api, epic_public_id, comment_public_id, create_comment_comment; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_epic_comment_comment(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64, comment_public_id::Int64, create_comment_comment::CreateCommentComment; _mediaType=nothing)
    _ctx = _oacinternal_create_epic_comment_comment(_api, epic_public_id, comment_public_id, create_comment_comment; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_group_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Group,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => UnusableEntitlementError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_group(_api::DefaultApi, create_group_param::CreateGroup; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_group_DefaultApi, "/api/v3/groups", ["api_token", ], create_group_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Group

Params:
- create_group_param::CreateGroup (required)

Return: Group, OpenAPI.Clients.ApiResponse
"""
function create_group(_api::DefaultApi, create_group_param::CreateGroup; _mediaType=nothing)
    _ctx = _oacinternal_create_group(_api, create_group_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_group(_api::DefaultApi, response_stream::Channel, create_group_param::CreateGroup; _mediaType=nothing)
    _ctx = _oacinternal_create_group(_api, create_group_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_iteration_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Iteration,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_iteration(_api::DefaultApi, create_iteration_param::CreateIteration; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_iteration_DefaultApi, "/api/v3/iterations", ["api_token", ], create_iteration_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Iteration

Params:
- create_iteration_param::CreateIteration (required)

Return: Iteration, OpenAPI.Clients.ApiResponse
"""
function create_iteration(_api::DefaultApi, create_iteration_param::CreateIteration; _mediaType=nothing)
    _ctx = _oacinternal_create_iteration(_api, create_iteration_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_iteration(_api::DefaultApi, response_stream::Channel, create_iteration_param::CreateIteration; _mediaType=nothing)
    _ctx = _oacinternal_create_iteration(_api, create_iteration_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_label_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Label,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_label(_api::DefaultApi, create_label_params::CreateLabelParams; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_label_DefaultApi, "/api/v3/labels", ["api_token", ], create_label_params)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Label

Create Label allows you to create a new Label in Shortcut.

Params:
- create_label_params::CreateLabelParams (required)

Return: Label, OpenAPI.Clients.ApiResponse
"""
function create_label(_api::DefaultApi, create_label_params::CreateLabelParams; _mediaType=nothing)
    _ctx = _oacinternal_create_label(_api, create_label_params; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_label(_api::DefaultApi, response_stream::Channel, create_label_params::CreateLabelParams; _mediaType=nothing)
    _ctx = _oacinternal_create_label(_api, create_label_params; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_linked_file_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => LinkedFile,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_linked_file(_api::DefaultApi, create_linked_file_param::CreateLinkedFile; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_linked_file_DefaultApi, "/api/v3/linked-files", ["api_token", ], create_linked_file_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Linked File

Create Linked File allows you to create a new Linked File in Shortcut.

Params:
- create_linked_file_param::CreateLinkedFile (required)

Return: LinkedFile, OpenAPI.Clients.ApiResponse
"""
function create_linked_file(_api::DefaultApi, create_linked_file_param::CreateLinkedFile; _mediaType=nothing)
    _ctx = _oacinternal_create_linked_file(_api, create_linked_file_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_linked_file(_api::DefaultApi, response_stream::Channel, create_linked_file_param::CreateLinkedFile; _mediaType=nothing)
    _ctx = _oacinternal_create_linked_file(_api, create_linked_file_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_milestone_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Milestone,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => UnusableEntitlementError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_milestone(_api::DefaultApi, create_milestone_param::CreateMilestone; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_milestone_DefaultApi, "/api/v3/milestones", ["api_token", ], create_milestone_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Milestone

(Deprecated: Use 'Create Objective') Create Milestone allows you to create a new Milestone in Shortcut.

Params:
- create_milestone_param::CreateMilestone (required)

Return: Milestone, OpenAPI.Clients.ApiResponse
"""
function create_milestone(_api::DefaultApi, create_milestone_param::CreateMilestone; _mediaType=nothing)
    _ctx = _oacinternal_create_milestone(_api, create_milestone_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_milestone(_api::DefaultApi, response_stream::Channel, create_milestone_param::CreateMilestone; _mediaType=nothing)
    _ctx = _oacinternal_create_milestone(_api, create_milestone_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_multiple_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_multiple_stories(_api::DefaultApi, create_stories::CreateStories; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_multiple_stories_DefaultApi, "/api/v3/stories/bulk", ["api_token", ], create_stories)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Multiple Stories

Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://developer.shortcut.com/api/rest/v3#create-story).

Params:
- create_stories::CreateStories (required)

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function create_multiple_stories(_api::DefaultApi, create_stories::CreateStories; _mediaType=nothing)
    _ctx = _oacinternal_create_multiple_stories(_api, create_stories; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_multiple_stories(_api::DefaultApi, response_stream::Channel, create_stories::CreateStories; _mediaType=nothing)
    _ctx = _oacinternal_create_multiple_stories(_api, create_stories; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_objective_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Objective,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => UnusableEntitlementError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_objective(_api::DefaultApi, create_objective_param::CreateObjective; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_objective_DefaultApi, "/api/v3/objectives", ["api_token", ], create_objective_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Objective

Create Objective allows you to create a new Objective in Shortcut.

Params:
- create_objective_param::CreateObjective (required)

Return: Objective, OpenAPI.Clients.ApiResponse
"""
function create_objective(_api::DefaultApi, create_objective_param::CreateObjective; _mediaType=nothing)
    _ctx = _oacinternal_create_objective(_api, create_objective_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_objective(_api::DefaultApi, response_stream::Channel, create_objective_param::CreateObjective; _mediaType=nothing)
    _ctx = _oacinternal_create_objective(_api, create_objective_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_project_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Project,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_project(_api::DefaultApi, create_project_param::CreateProject; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_project_DefaultApi, "/api/v3/projects", ["api_token", ], create_project_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Project

Create Project is used to create a new Shortcut Project.

Params:
- create_project_param::CreateProject (required)

Return: Project, OpenAPI.Clients.ApiResponse
"""
function create_project(_api::DefaultApi, create_project_param::CreateProject; _mediaType=nothing)
    _ctx = _oacinternal_create_project(_api, create_project_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_project(_api::DefaultApi, response_stream::Channel, create_project_param::CreateProject; _mediaType=nothing)
    _ctx = _oacinternal_create_project(_api, create_project_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_story_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Story,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_story(_api::DefaultApi, create_story_params::CreateStoryParams; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_story_DefaultApi, "/api/v3/stories", ["api_token", ], create_story_params)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Story

Create Story is used to add a new story to your Shortcut Workspace.     This endpoint requires that either **workflow_state_id** or **project_id** be provided, but will reject the request if both or neither are specified. The workflow_state_id has been marked as required and is the recommended field to specify because we are in the process of sunsetting Projects in Shortcut.

Params:
- create_story_params::CreateStoryParams (required)

Return: Story, OpenAPI.Clients.ApiResponse
"""
function create_story(_api::DefaultApi, create_story_params::CreateStoryParams; _mediaType=nothing)
    _ctx = _oacinternal_create_story(_api, create_story_params; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_story(_api::DefaultApi, response_stream::Channel, create_story_params::CreateStoryParams; _mediaType=nothing)
    _ctx = _oacinternal_create_story(_api, create_story_params; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_story_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => StoryComment,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_story_comment(_api::DefaultApi, story_public_id::Int64, create_story_comment_param::CreateStoryComment; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_story_comment_DefaultApi, "/api/v3/stories/{story-public-id}/comments", ["api_token", ], create_story_comment_param)
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Story Comment

Create Comment allows you to create a Comment on any Story.

Params:
- story_public_id::Int64 (required)
- create_story_comment_param::CreateStoryComment (required)

Return: StoryComment, OpenAPI.Clients.ApiResponse
"""
function create_story_comment(_api::DefaultApi, story_public_id::Int64, create_story_comment_param::CreateStoryComment; _mediaType=nothing)
    _ctx = _oacinternal_create_story_comment(_api, story_public_id, create_story_comment_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_story_comment(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, create_story_comment_param::CreateStoryComment; _mediaType=nothing)
    _ctx = _oacinternal_create_story_comment(_api, story_public_id, create_story_comment_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_story_from_template_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Story,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_story_from_template(_api::DefaultApi, create_story_from_template_params::CreateStoryFromTemplateParams; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_story_from_template_DefaultApi, "/api/v3/stories/from-template", ["api_token", ], create_story_from_template_params)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Story From Template

Create Story From Template is used to add a new story derived from a template to your Shortcut Workspace.

Params:
- create_story_from_template_params::CreateStoryFromTemplateParams (required)

Return: Story, OpenAPI.Clients.ApiResponse
"""
function create_story_from_template(_api::DefaultApi, create_story_from_template_params::CreateStoryFromTemplateParams; _mediaType=nothing)
    _ctx = _oacinternal_create_story_from_template(_api, create_story_from_template_params; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_story_from_template(_api::DefaultApi, response_stream::Channel, create_story_from_template_params::CreateStoryFromTemplateParams; _mediaType=nothing)
    _ctx = _oacinternal_create_story_from_template(_api, create_story_from_template_params; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_story_link_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => StoryLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_story_link(_api::DefaultApi, create_story_link_param::CreateStoryLink; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_story_link_DefaultApi, "/api/v3/story-links", ["api_token", ], create_story_link_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Story Link

Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -> verb -> object.  The subject story acts on the object Story; the object story is the direct object of the sentence.  The subject story \"blocks\", \"duplicates\", or \"relates to\" the object story.  Examples: - \"story 5 blocks story 6” -- story 6 is now \"blocked\" until story 5 is moved to a Done workflow state. - \"story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived). - \"story 7 relates to story 3”

Params:
- create_story_link_param::CreateStoryLink (required)

Return: StoryLink, OpenAPI.Clients.ApiResponse
"""
function create_story_link(_api::DefaultApi, create_story_link_param::CreateStoryLink; _mediaType=nothing)
    _ctx = _oacinternal_create_story_link(_api, create_story_link_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_story_link(_api::DefaultApi, response_stream::Channel, create_story_link_param::CreateStoryLink; _mediaType=nothing)
    _ctx = _oacinternal_create_story_link(_api, create_story_link_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_story_reaction_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Vector{StoryReaction},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_story_reaction(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64, create_or_delete_story_reaction::CreateOrDeleteStoryReaction; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_story_reaction_DefaultApi, "/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions", ["api_token", ], create_or_delete_story_reaction)
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Story Reaction

Create a reaction to a story comment.

Params:
- story_public_id::Int64 (required)
- comment_public_id::Int64 (required)
- create_or_delete_story_reaction::CreateOrDeleteStoryReaction (required)

Return: Vector{StoryReaction}, OpenAPI.Clients.ApiResponse
"""
function create_story_reaction(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64, create_or_delete_story_reaction::CreateOrDeleteStoryReaction; _mediaType=nothing)
    _ctx = _oacinternal_create_story_reaction(_api, story_public_id, comment_public_id, create_or_delete_story_reaction; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_story_reaction(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, comment_public_id::Int64, create_or_delete_story_reaction::CreateOrDeleteStoryReaction; _mediaType=nothing)
    _ctx = _oacinternal_create_story_reaction(_api, story_public_id, comment_public_id, create_or_delete_story_reaction; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_task_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Task,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_task(_api::DefaultApi, story_public_id::Int64, create_task_param::CreateTask; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_task_DefaultApi, "/api/v3/stories/{story-public-id}/tasks", ["api_token", ], create_task_param)
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Task

Create Task is used to create a new task in a Story.

Params:
- story_public_id::Int64 (required)
- create_task_param::CreateTask (required)

Return: Task, OpenAPI.Clients.ApiResponse
"""
function create_task(_api::DefaultApi, story_public_id::Int64, create_task_param::CreateTask; _mediaType=nothing)
    _ctx = _oacinternal_create_task(_api, story_public_id, create_task_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_task(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, create_task_param::CreateTask; _mediaType=nothing)
    _ctx = _oacinternal_create_task(_api, story_public_id, create_task_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_category_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_category(_api::DefaultApi, category_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_category_DefaultApi, "/api/v3/categories/{category-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "category-public-id", category_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Category

Delete Category can be used to delete any Category.

Params:
- category_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_category(_api::DefaultApi, category_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_category(_api, category_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_category(_api::DefaultApi, response_stream::Channel, category_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_category(_api, category_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_custom_field_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_custom_field(_api::DefaultApi, custom_field_public_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_custom_field_DefaultApi, "/api/v3/custom-fields/{custom-field-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "custom-field-public-id", custom_field_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Custom Field

Params:
- custom_field_public_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_custom_field(_api::DefaultApi, custom_field_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_custom_field(_api, custom_field_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_custom_field(_api::DefaultApi, response_stream::Channel, custom_field_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_custom_field(_api, custom_field_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_entity_template_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_entity_template(_api::DefaultApi, entity_template_public_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_entity_template_DefaultApi, "/api/v3/entity-templates/{entity-template-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "entity-template-public-id", entity_template_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Entity Template

Params:
- entity_template_public_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_entity_template(_api::DefaultApi, entity_template_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_entity_template(_api, entity_template_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_entity_template(_api::DefaultApi, response_stream::Channel, entity_template_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_entity_template(_api, entity_template_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_epic_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_epic(_api::DefaultApi, epic_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_epic_DefaultApi, "/api/v3/epics/{epic-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Epic

Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.

Params:
- epic_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_epic(_api::DefaultApi, epic_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_epic(_api, epic_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_epic(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_epic(_api, epic_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_epic_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_epic_comment(_api::DefaultApi, epic_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_epic_comment_DefaultApi, "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Epic Comment

This endpoint allows you to delete a Comment from an Epic.

Params:
- epic_public_id::Int64 (required)
- comment_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_epic_comment(_api::DefaultApi, epic_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_epic_comment(_api, epic_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_epic_comment(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_epic_comment(_api, epic_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_file_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_file(_api::DefaultApi, file_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_file_DefaultApi, "/api/v3/files/{file-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "file-public-id", file_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete File

Delete File deletes a previously uploaded file.

Params:
- file_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_file(_api::DefaultApi, file_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_file(_api, file_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_file(_api::DefaultApi, response_stream::Channel, file_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_file(_api, file_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_iteration_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_iteration(_api::DefaultApi, iteration_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_iteration_DefaultApi, "/api/v3/iterations/{iteration-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "iteration-public-id", iteration_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Iteration

Params:
- iteration_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_iteration(_api::DefaultApi, iteration_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_iteration(_api, iteration_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_iteration(_api::DefaultApi, response_stream::Channel, iteration_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_iteration(_api, iteration_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_label_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_label(_api::DefaultApi, label_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_label_DefaultApi, "/api/v3/labels/{label-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "label-public-id", label_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Label

Delete Label can be used to delete any Label.

Params:
- label_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_label(_api::DefaultApi, label_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_label(_api, label_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_label(_api::DefaultApi, response_stream::Channel, label_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_label(_api, label_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_linked_file_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_linked_file(_api::DefaultApi, linked_file_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_linked_file_DefaultApi, "/api/v3/linked-files/{linked-file-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "linked-file-public-id", linked_file_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Linked File

Delete Linked File can be used to delete any previously attached Linked-File.

Params:
- linked_file_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_linked_file(_api::DefaultApi, linked_file_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_linked_file(_api, linked_file_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_linked_file(_api::DefaultApi, response_stream::Channel, linked_file_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_linked_file(_api, linked_file_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_milestone_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_milestone(_api::DefaultApi, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_milestone_DefaultApi, "/api/v3/milestones/{milestone-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "milestone-public-id", milestone_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Milestone

(Deprecated: Use 'Delete Objective') Delete Milestone can be used to delete any Milestone.

Params:
- milestone_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_milestone(_api::DefaultApi, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_milestone(_api, milestone_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_milestone(_api::DefaultApi, response_stream::Channel, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_milestone(_api, milestone_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_multiple_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_multiple_stories(_api::DefaultApi, delete_stories::DeleteStories; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_multiple_stories_DefaultApi, "/api/v3/stories/bulk", ["api_token", ], delete_stories)
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Multiple Stories

Delete Multiple Stories allows you to delete multiple archived stories at once.

Params:
- delete_stories::DeleteStories (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_multiple_stories(_api::DefaultApi, delete_stories::DeleteStories; _mediaType=nothing)
    _ctx = _oacinternal_delete_multiple_stories(_api, delete_stories; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_multiple_stories(_api::DefaultApi, response_stream::Channel, delete_stories::DeleteStories; _mediaType=nothing)
    _ctx = _oacinternal_delete_multiple_stories(_api, delete_stories; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_objective_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_objective(_api::DefaultApi, objective_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_objective_DefaultApi, "/api/v3/objectives/{objective-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "objective-public-id", objective_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Objective

Delete Objective can be used to delete any Objective.

Params:
- objective_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_objective(_api::DefaultApi, objective_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_objective(_api, objective_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_objective(_api::DefaultApi, response_stream::Channel, objective_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_objective(_api, objective_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_project_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_project(_api::DefaultApi, project_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_project_DefaultApi, "/api/v3/projects/{project-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "project-public-id", project_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Project

Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.

Params:
- project_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_project(_api::DefaultApi, project_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_project(_api, project_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_project(_api::DefaultApi, response_stream::Channel, project_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_project(_api, project_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_story_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_story(_api::DefaultApi, story_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_story_DefaultApi, "/api/v3/stories/{story-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Story

Delete Story can be used to delete any Story.

Params:
- story_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_story(_api::DefaultApi, story_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_story(_api, story_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_story(_api::DefaultApi, response_stream::Channel, story_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_story(_api, story_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_story_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_story_comment(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_story_comment_DefaultApi, "/api/v3/stories/{story-public-id}/comments/{comment-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Story Comment

Delete a Comment from any story.

Params:
- story_public_id::Int64 (required)
- comment_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_story_comment(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_story_comment(_api, story_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_story_comment(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_story_comment(_api, story_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_story_link_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_story_link(_api::DefaultApi, story_link_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_story_link_DefaultApi, "/api/v3/story-links/{story-link-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-link-public-id", story_link_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Story Link

Removes the relationship between the stories for the given Story Link.

Params:
- story_link_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_story_link(_api::DefaultApi, story_link_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_story_link(_api, story_link_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_story_link(_api::DefaultApi, response_stream::Channel, story_link_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_story_link(_api, story_link_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_story_reaction_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_story_reaction(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64, create_or_delete_story_reaction::CreateOrDeleteStoryReaction; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_story_reaction_DefaultApi, "/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions", ["api_token", ], create_or_delete_story_reaction)
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Story Reaction

Delete a reaction from any story comment.

Params:
- story_public_id::Int64 (required)
- comment_public_id::Int64 (required)
- create_or_delete_story_reaction::CreateOrDeleteStoryReaction (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_story_reaction(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64, create_or_delete_story_reaction::CreateOrDeleteStoryReaction; _mediaType=nothing)
    _ctx = _oacinternal_delete_story_reaction(_api, story_public_id, comment_public_id, create_or_delete_story_reaction; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_story_reaction(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, comment_public_id::Int64, create_or_delete_story_reaction::CreateOrDeleteStoryReaction; _mediaType=nothing)
    _ctx = _oacinternal_delete_story_reaction(_api, story_public_id, comment_public_id, create_or_delete_story_reaction; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_task_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_task(_api::DefaultApi, story_public_id::Int64, task_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_task_DefaultApi, "/api/v3/stories/{story-public-id}/tasks/{task-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "task-public-id", task_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Task

Delete Task can be used to delete any previously created Task on a Story.

Params:
- story_public_id::Int64 (required)
- task_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_task(_api::DefaultApi, story_public_id::Int64, task_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_task(_api, story_public_id, task_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_task(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, task_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_task(_api, story_public_id, task_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disable_iterations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_disable_iterations(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_disable_iterations_DefaultApi, "/api/v3/iterations/disable", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Disable Iterations

Disables Iterations for the current workspace

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function disable_iterations(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_disable_iterations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disable_iterations(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_disable_iterations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disable_story_templates_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_disable_story_templates(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_disable_story_templates_DefaultApi, "/api/v3/entity-templates/disable", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Disable Story Templates

Disables the Story Template feature for the Workspace.

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function disable_story_templates(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_disable_story_templates(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disable_story_templates(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_disable_story_templates(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_enable_iterations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_enable_iterations(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_enable_iterations_DefaultApi, "/api/v3/iterations/enable", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Enable Iterations

Enables Iterations for the current workspace

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function enable_iterations(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_enable_iterations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function enable_iterations(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_enable_iterations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_enable_story_templates_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_enable_story_templates(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_enable_story_templates_DefaultApi, "/api/v3/entity-templates/enable", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Enable Story Templates

Enables the Story Template feature for the Workspace.

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function enable_story_templates(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_enable_story_templates(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function enable_story_templates(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_enable_story_templates(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_category_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Category,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_category(_api::DefaultApi, category_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_category_DefaultApi, "/api/v3/categories/{category-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "category-public-id", category_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Category

Get Category returns information about the selected Category.

Params:
- category_public_id::Int64 (required)

Return: Category, OpenAPI.Clients.ApiResponse
"""
function get_category(_api::DefaultApi, category_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_category(_api, category_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_category(_api::DefaultApi, response_stream::Channel, category_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_category(_api, category_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_current_member_info_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MemberInfo,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_current_member_info(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_current_member_info_DefaultApi, "/api/v3/member", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Current Member Info

Returns information about the authenticated member.

Params:

Return: MemberInfo, OpenAPI.Clients.ApiResponse
"""
function get_current_member_info(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_current_member_info(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_current_member_info(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_current_member_info(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_custom_field_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CustomField,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_custom_field(_api::DefaultApi, custom_field_public_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_custom_field_DefaultApi, "/api/v3/custom-fields/{custom-field-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "custom-field-public-id", custom_field_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Custom Field

Params:
- custom_field_public_id::String (required)

Return: CustomField, OpenAPI.Clients.ApiResponse
"""
function get_custom_field(_api::DefaultApi, custom_field_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_custom_field(_api, custom_field_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_custom_field(_api::DefaultApi, response_stream::Channel, custom_field_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_custom_field(_api, custom_field_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_entity_template_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntityTemplate,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_entity_template(_api::DefaultApi, entity_template_public_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_entity_template_DefaultApi, "/api/v3/entity-templates/{entity-template-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "entity-template-public-id", entity_template_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Entity Template

Get Entity Template returns information about a given entity template.

Params:
- entity_template_public_id::String (required)

Return: EntityTemplate, OpenAPI.Clients.ApiResponse
"""
function get_entity_template(_api::DefaultApi, entity_template_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_entity_template(_api, entity_template_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_entity_template(_api::DefaultApi, response_stream::Channel, entity_template_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_entity_template(_api, entity_template_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_epic_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Epic,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_epic(_api::DefaultApi, epic_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_epic_DefaultApi, "/api/v3/epics/{epic-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Epic

Get Epic returns information about the selected Epic.

Params:
- epic_public_id::Int64 (required)

Return: Epic, OpenAPI.Clients.ApiResponse
"""
function get_epic(_api::DefaultApi, epic_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_epic(_api, epic_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_epic(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_epic(_api, epic_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_epic_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ThreadedComment,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_epic_comment(_api::DefaultApi, epic_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_epic_comment_DefaultApi, "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Epic Comment

This endpoint returns information about the selected Epic Comment.

Params:
- epic_public_id::Int64 (required)
- comment_public_id::Int64 (required)

Return: ThreadedComment, OpenAPI.Clients.ApiResponse
"""
function get_epic_comment(_api::DefaultApi, epic_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_epic_comment(_api, epic_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_epic_comment(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_epic_comment(_api, epic_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_epic_workflow_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EpicWorkflow,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_epic_workflow(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_epic_workflow_DefaultApi, "/api/v3/epic-workflow", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Epic Workflow

Returns the Epic Workflow for the Workspace.

Params:

Return: EpicWorkflow, OpenAPI.Clients.ApiResponse
"""
function get_epic_workflow(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_epic_workflow(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_epic_workflow(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_epic_workflow(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_external_link_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_external_link_stories(_api::DefaultApi, external_link::String; _mediaType=nothing)
    OpenAPI.validate_param("external_link", "get_external_link_stories", :maxLength, external_link, 2048)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_external_link_stories_DefaultApi, "/api/v3/external-link/stories", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "external_link", external_link; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get External Link Stories

Get Stories which have a given External Link associated with them.

Params:
- external_link::String (required)

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function get_external_link_stories(_api::DefaultApi, external_link::String; _mediaType=nothing)
    _ctx = _oacinternal_get_external_link_stories(_api, external_link; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_external_link_stories(_api::DefaultApi, response_stream::Channel, external_link::String; _mediaType=nothing)
    _ctx = _oacinternal_get_external_link_stories(_api, external_link; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_file_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UploadedFile,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_file(_api::DefaultApi, file_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_file_DefaultApi, "/api/v3/files/{file-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "file-public-id", file_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get File

Get File returns information about the selected UploadedFile.

Params:
- file_public_id::Int64 (required)

Return: UploadedFile, OpenAPI.Clients.ApiResponse
"""
function get_file(_api::DefaultApi, file_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_file(_api, file_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_file(_api::DefaultApi, response_stream::Channel, file_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_file(_api, file_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_group_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Group,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_group(_api::DefaultApi, group_public_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_group_DefaultApi, "/api/v3/groups/{group-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "group-public-id", group_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Group

Params:
- group_public_id::String (required)

Return: Group, OpenAPI.Clients.ApiResponse
"""
function get_group(_api::DefaultApi, group_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group(_api, group_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_group(_api::DefaultApi, response_stream::Channel, group_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group(_api, group_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_iteration_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Iteration,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_iteration(_api::DefaultApi, iteration_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_iteration_DefaultApi, "/api/v3/iterations/{iteration-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "iteration-public-id", iteration_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Iteration

Params:
- iteration_public_id::Int64 (required)

Return: Iteration, OpenAPI.Clients.ApiResponse
"""
function get_iteration(_api::DefaultApi, iteration_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_iteration(_api, iteration_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_iteration(_api::DefaultApi, response_stream::Channel, iteration_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_iteration(_api, iteration_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_key_result_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => KeyResult,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_key_result(_api::DefaultApi, key_result_public_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_key_result_DefaultApi, "/api/v3/key-results/{key-result-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "key-result-public-id", key_result_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Key Result

Get Key Result returns information about a chosen Key Result.

Params:
- key_result_public_id::String (required)

Return: KeyResult, OpenAPI.Clients.ApiResponse
"""
function get_key_result(_api::DefaultApi, key_result_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_key_result(_api, key_result_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_key_result(_api::DefaultApi, response_stream::Channel, key_result_public_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_key_result(_api, key_result_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_label_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Label,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_label(_api::DefaultApi, label_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_label_DefaultApi, "/api/v3/labels/{label-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "label-public-id", label_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Label

Get Label returns information about the selected Label.

Params:
- label_public_id::Int64 (required)

Return: Label, OpenAPI.Clients.ApiResponse
"""
function get_label(_api::DefaultApi, label_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_label(_api, label_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_label(_api::DefaultApi, response_stream::Channel, label_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_label(_api, label_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_linked_file_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LinkedFile,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_linked_file(_api::DefaultApi, linked_file_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_linked_file_DefaultApi, "/api/v3/linked-files/{linked-file-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "linked-file-public-id", linked_file_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Linked File

Get File returns information about the selected Linked File.

Params:
- linked_file_public_id::Int64 (required)

Return: LinkedFile, OpenAPI.Clients.ApiResponse
"""
function get_linked_file(_api::DefaultApi, linked_file_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_linked_file(_api, linked_file_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_linked_file(_api::DefaultApi, response_stream::Channel, linked_file_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_linked_file(_api, linked_file_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_member_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Member,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_member(_api::DefaultApi, member_public_id::String; org_public_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_member_DefaultApi, "/api/v3/members/{member-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "member-public-id", member_public_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "org-public-id", org_public_id; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Member

Returns information about a Member.

Params:
- member_public_id::String (required)
- org_public_id::String

Return: Member, OpenAPI.Clients.ApiResponse
"""
function get_member(_api::DefaultApi, member_public_id::String; org_public_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_member(_api, member_public_id; org_public_id=org_public_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_member(_api::DefaultApi, response_stream::Channel, member_public_id::String; org_public_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_member(_api, member_public_id; org_public_id=org_public_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_milestone_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Milestone,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_milestone(_api::DefaultApi, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_milestone_DefaultApi, "/api/v3/milestones/{milestone-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "milestone-public-id", milestone_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Milestone

(Deprecated: Use 'Get Objective') Get Milestone returns information about a chosen Milestone.

Params:
- milestone_public_id::Int64 (required)

Return: Milestone, OpenAPI.Clients.ApiResponse
"""
function get_milestone(_api::DefaultApi, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_milestone(_api, milestone_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_milestone(_api::DefaultApi, response_stream::Channel, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_milestone(_api, milestone_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_objective_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Objective,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_objective(_api::DefaultApi, objective_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_objective_DefaultApi, "/api/v3/objectives/{objective-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "objective-public-id", objective_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Objective

Get Objective returns information about a chosen Objective.

Params:
- objective_public_id::Int64 (required)

Return: Objective, OpenAPI.Clients.ApiResponse
"""
function get_objective(_api::DefaultApi, objective_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_objective(_api, objective_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_objective(_api::DefaultApi, response_stream::Channel, objective_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_objective(_api, objective_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_project_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Project,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_project(_api::DefaultApi, project_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_project_DefaultApi, "/api/v3/projects/{project-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "project-public-id", project_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Project

Get Project returns information about the selected Project.

Params:
- project_public_id::Int64 (required)

Return: Project, OpenAPI.Clients.ApiResponse
"""
function get_project(_api::DefaultApi, project_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_project(_api, project_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_project(_api::DefaultApi, response_stream::Channel, project_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_project(_api, project_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_repository_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Repository,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_repository(_api::DefaultApi, repo_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_repository_DefaultApi, "/api/v3/repositories/{repo-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "repo-public-id", repo_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Repository

Get Repository returns information about the selected Repository.

Params:
- repo_public_id::Int64 (required)

Return: Repository, OpenAPI.Clients.ApiResponse
"""
function get_repository(_api::DefaultApi, repo_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_repository(_api, repo_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_repository(_api::DefaultApi, response_stream::Channel, repo_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_repository(_api, repo_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_story_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Story,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_story(_api::DefaultApi, story_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_story_DefaultApi, "/api/v3/stories/{story-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Story

Get Story returns information about a chosen Story.

Params:
- story_public_id::Int64 (required)

Return: Story, OpenAPI.Clients.ApiResponse
"""
function get_story(_api::DefaultApi, story_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_story(_api, story_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_story(_api::DefaultApi, response_stream::Channel, story_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_story(_api, story_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_story_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StoryComment,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_story_comment(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_story_comment_DefaultApi, "/api/v3/stories/{story-public-id}/comments/{comment-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Story Comment

Get Comment is used to get Comment information.

Params:
- story_public_id::Int64 (required)
- comment_public_id::Int64 (required)

Return: StoryComment, OpenAPI.Clients.ApiResponse
"""
function get_story_comment(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_story_comment(_api, story_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_story_comment(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_story_comment(_api, story_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_story_link_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StoryLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_story_link(_api::DefaultApi, story_link_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_story_link_DefaultApi, "/api/v3/story-links/{story-link-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-link-public-id", story_link_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Story Link

Returns the stories and their relationship for the given Story Link.

Params:
- story_link_public_id::Int64 (required)

Return: StoryLink, OpenAPI.Clients.ApiResponse
"""
function get_story_link(_api::DefaultApi, story_link_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_story_link(_api, story_link_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_story_link(_api::DefaultApi, response_stream::Channel, story_link_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_story_link(_api, story_link_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_task_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Task,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_task(_api::DefaultApi, story_public_id::Int64, task_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_task_DefaultApi, "/api/v3/stories/{story-public-id}/tasks/{task-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "task-public-id", task_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Task

Returns information about a chosen Task.

Params:
- story_public_id::Int64 (required)
- task_public_id::Int64 (required)

Return: Task, OpenAPI.Clients.ApiResponse
"""
function get_task(_api::DefaultApi, story_public_id::Int64, task_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_task(_api, story_public_id, task_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_task(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, task_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_task(_api, story_public_id, task_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_workflow_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Workflow,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_workflow(_api::DefaultApi, workflow_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_workflow_DefaultApi, "/api/v3/workflows/{workflow-public-id}", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "workflow-public-id", workflow_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Workflow

Get Workflow returns information about a chosen Workflow.

Params:
- workflow_public_id::Int64 (required)

Return: Workflow, OpenAPI.Clients.ApiResponse
"""
function get_workflow(_api::DefaultApi, workflow_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_workflow(_api, workflow_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_workflow(_api::DefaultApi, response_stream::Channel, workflow_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_workflow(_api, workflow_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_categories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Category},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_categories(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_categories_DefaultApi, "/api/v3/categories", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Categories

List Categories returns a list of all Categories and their attributes.

Params:

Return: Vector{Category}, OpenAPI.Clients.ApiResponse
"""
function list_categories(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_categories(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_categories(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_categories(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_category_milestones_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Milestone},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_category_milestones(_api::DefaultApi, category_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_category_milestones_DefaultApi, "/api/v3/categories/{category-public-id}/milestones", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "category-public-id", category_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Category Milestones

List Category Milestones returns a list of all Milestones with the Category.

Params:
- category_public_id::Int64 (required)

Return: Vector{Milestone}, OpenAPI.Clients.ApiResponse
"""
function list_category_milestones(_api::DefaultApi, category_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_category_milestones(_api, category_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_category_milestones(_api::DefaultApi, response_stream::Channel, category_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_category_milestones(_api, category_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_category_objectives_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Milestone},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_category_objectives(_api::DefaultApi, category_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_category_objectives_DefaultApi, "/api/v3/categories/{category-public-id}/objectives", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "category-public-id", category_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Category Objectives

Returns a list of all Objectives with the Category.

Params:
- category_public_id::Int64 (required)

Return: Vector{Milestone}, OpenAPI.Clients.ApiResponse
"""
function list_category_objectives(_api::DefaultApi, category_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_category_objectives(_api, category_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_category_objectives(_api::DefaultApi, response_stream::Channel, category_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_category_objectives(_api, category_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_custom_fields_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{CustomField},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_custom_fields(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_custom_fields_DefaultApi, "/api/v3/custom-fields", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Custom Fields

Params:

Return: Vector{CustomField}, OpenAPI.Clients.ApiResponse
"""
function list_custom_fields(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_custom_fields(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_custom_fields(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_custom_fields(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_entity_templates_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{EntityTemplate},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_entity_templates(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_entity_templates_DefaultApi, "/api/v3/entity-templates", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Entity Templates

List all the entity templates for the Workspace.

Params:

Return: Vector{EntityTemplate}, OpenAPI.Clients.ApiResponse
"""
function list_entity_templates(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_entity_templates(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_entity_templates(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_entity_templates(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_epic_comments_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ThreadedComment},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_epic_comments(_api::DefaultApi, epic_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_epic_comments_DefaultApi, "/api/v3/epics/{epic-public-id}/comments", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Epic Comments

Get a list of all Comments on an Epic.

Params:
- epic_public_id::Int64 (required)

Return: Vector{ThreadedComment}, OpenAPI.Clients.ApiResponse
"""
function list_epic_comments(_api::DefaultApi, epic_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_epic_comments(_api, epic_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_epic_comments(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_epic_comments(_api, epic_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_epic_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_epic_stories(_api::DefaultApi, epic_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_epic_stories_DefaultApi, "/api/v3/epics/{epic-public-id}/stories", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "includes_description", includes_description; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Epic Stories

Get a list of all Stories in an Epic.

Params:
- epic_public_id::Int64 (required)
- includes_description::Bool

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function list_epic_stories(_api::DefaultApi, epic_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_epic_stories(_api, epic_public_id; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_epic_stories(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_epic_stories(_api, epic_public_id; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_epics_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{EpicSlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_epics(_api::DefaultApi; includes_description=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_epics_DefaultApi, "/api/v3/epics", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "includes_description", includes_description; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Epics

List Epics returns a list of all Epics and their attributes.

Params:
- includes_description::Bool

Return: Vector{EpicSlim}, OpenAPI.Clients.ApiResponse
"""
function list_epics(_api::DefaultApi; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_epics(_api; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_epics(_api::DefaultApi, response_stream::Channel; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_epics(_api; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_files_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{UploadedFile},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_files(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_files_DefaultApi, "/api/v3/files", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Files

List Files returns a list of all UploadedFiles in the workspace.

Params:

Return: Vector{UploadedFile}, OpenAPI.Clients.ApiResponse
"""
function list_files(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_files(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_files(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_files(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_group_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_group_stories(_api::DefaultApi, group_public_id::String; limit=nothing, offset=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_group_stories_DefaultApi, "/api/v3/groups/{group-public-id}/stories", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "group-public-id", group_public_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "offset", offset; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Group Stories

List the Stories assigned to the Group. (By default, limited to 1,000).

Params:
- group_public_id::String (required)
- limit::Int64
- offset::Int64

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function list_group_stories(_api::DefaultApi, group_public_id::String; limit=nothing, offset=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_group_stories(_api, group_public_id; limit=limit, offset=offset, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_group_stories(_api::DefaultApi, response_stream::Channel, group_public_id::String; limit=nothing, offset=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_group_stories(_api, group_public_id; limit=limit, offset=offset, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_groups_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Group},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_groups(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_groups_DefaultApi, "/api/v3/groups", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Groups

A group in our API maps to a \"Team\" within the Shortcut Product. A Team is a collection of Users that can be associated to Stories, Epics, and Iterations within Shortcut.

Params:

Return: Vector{Group}, OpenAPI.Clients.ApiResponse
"""
function list_groups(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_groups(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_groups(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_groups(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_iteration_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_iteration_stories(_api::DefaultApi, iteration_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_iteration_stories_DefaultApi, "/api/v3/iterations/{iteration-public-id}/stories", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "iteration-public-id", iteration_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "includes_description", includes_description; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Iteration Stories

Get a list of all Stories in an Iteration.

Params:
- iteration_public_id::Int64 (required)
- includes_description::Bool

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function list_iteration_stories(_api::DefaultApi, iteration_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_iteration_stories(_api, iteration_public_id; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_iteration_stories(_api::DefaultApi, response_stream::Channel, iteration_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_iteration_stories(_api, iteration_public_id; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_iterations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{IterationSlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_iterations(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_iterations_DefaultApi, "/api/v3/iterations", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Iterations

Params:

Return: Vector{IterationSlim}, OpenAPI.Clients.ApiResponse
"""
function list_iterations(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_iterations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_iterations(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_iterations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_label_epics_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{EpicSlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_label_epics(_api::DefaultApi, label_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_label_epics_DefaultApi, "/api/v3/labels/{label-public-id}/epics", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "label-public-id", label_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Label Epics

List all of the Epics with the Label.

Params:
- label_public_id::Int64 (required)

Return: Vector{EpicSlim}, OpenAPI.Clients.ApiResponse
"""
function list_label_epics(_api::DefaultApi, label_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_label_epics(_api, label_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_label_epics(_api::DefaultApi, response_stream::Channel, label_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_label_epics(_api, label_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_label_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_label_stories(_api::DefaultApi, label_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_label_stories_DefaultApi, "/api/v3/labels/{label-public-id}/stories", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "label-public-id", label_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "includes_description", includes_description; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Label Stories

List all of the Stories with the Label.

Params:
- label_public_id::Int64 (required)
- includes_description::Bool

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function list_label_stories(_api::DefaultApi, label_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_label_stories(_api, label_public_id; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_label_stories(_api::DefaultApi, response_stream::Channel, label_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_label_stories(_api, label_public_id; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_labels_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Label},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_labels(_api::DefaultApi; slim=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_labels_DefaultApi, "/api/v3/labels", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "slim", slim; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Labels

List Labels returns a list of all Labels and their attributes.

Params:
- slim::Bool

Return: Vector{Label}, OpenAPI.Clients.ApiResponse
"""
function list_labels(_api::DefaultApi; slim=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_labels(_api; slim=slim, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_labels(_api::DefaultApi, response_stream::Channel; slim=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_labels(_api; slim=slim, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_linked_files_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{LinkedFile},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_linked_files(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_linked_files_DefaultApi, "/api/v3/linked-files", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Linked Files

List Linked Files returns a list of all Linked-Files and their attributes.

Params:

Return: Vector{LinkedFile}, OpenAPI.Clients.ApiResponse
"""
function list_linked_files(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_linked_files(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_linked_files(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_linked_files(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_members_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Member},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_members(_api::DefaultApi; org_public_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_members_DefaultApi, "/api/v3/members", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "org-public-id", org_public_id; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Members

Returns information about members of the Workspace.

Params:
- org_public_id::String

Return: Vector{Member}, OpenAPI.Clients.ApiResponse
"""
function list_members(_api::DefaultApi; org_public_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_members(_api; org_public_id=org_public_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_members(_api::DefaultApi, response_stream::Channel; org_public_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_members(_api; org_public_id=org_public_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_milestone_epics_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{EpicSlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_milestone_epics(_api::DefaultApi, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_milestone_epics_DefaultApi, "/api/v3/milestones/{milestone-public-id}/epics", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "milestone-public-id", milestone_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Milestone Epics

(Deprecated: Use 'List Objective Epics') List all of the Epics within the Milestone.

Params:
- milestone_public_id::Int64 (required)

Return: Vector{EpicSlim}, OpenAPI.Clients.ApiResponse
"""
function list_milestone_epics(_api::DefaultApi, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_milestone_epics(_api, milestone_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_milestone_epics(_api::DefaultApi, response_stream::Channel, milestone_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_milestone_epics(_api, milestone_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_milestones_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Milestone},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_milestones(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_milestones_DefaultApi, "/api/v3/milestones", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Milestones

(Deprecated: Use 'List Objectives') List Milestones returns a list of all Milestones and their attributes.

Params:

Return: Vector{Milestone}, OpenAPI.Clients.ApiResponse
"""
function list_milestones(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_milestones(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_milestones(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_milestones(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_objective_epics_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{EpicSlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_objective_epics(_api::DefaultApi, objective_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_objective_epics_DefaultApi, "/api/v3/objectives/{objective-public-id}/epics", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "objective-public-id", objective_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Objective Epics

List all of the Epics within the Objective.

Params:
- objective_public_id::Int64 (required)

Return: Vector{EpicSlim}, OpenAPI.Clients.ApiResponse
"""
function list_objective_epics(_api::DefaultApi, objective_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_objective_epics(_api, objective_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_objective_epics(_api::DefaultApi, response_stream::Channel, objective_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_objective_epics(_api, objective_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_objectives_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Objective},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_objectives(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_objectives_DefaultApi, "/api/v3/objectives", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Objectives

List Objectives returns a list of all Objectives and their attributes.

Params:

Return: Vector{Objective}, OpenAPI.Clients.ApiResponse
"""
function list_objectives(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_objectives(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_objectives(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_objectives(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_projects_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Project},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_projects(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_projects_DefaultApi, "/api/v3/projects", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Projects

List Projects returns a list of all Projects and their attributes.

Params:

Return: Vector{Project}, OpenAPI.Clients.ApiResponse
"""
function list_projects(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_projects(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_projects(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_projects(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_repositories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Repository},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_repositories(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_repositories_DefaultApi, "/api/v3/repositories", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Repositories

List Repositories returns a list of all Repositories and their attributes.

Params:

Return: Vector{Repository}, OpenAPI.Clients.ApiResponse
"""
function list_repositories(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_repositories(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_repositories(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_repositories(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_stories(_api::DefaultApi, project_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_stories_DefaultApi, "/api/v3/projects/{project-public-id}/stories", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "project-public-id", project_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "includes_description", includes_description; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Stories

List Stories returns a list of all Stories in a selected Project and their attributes.

Params:
- project_public_id::Int64 (required)
- includes_description::Bool

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function list_stories(_api::DefaultApi, project_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_stories(_api, project_public_id; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_stories(_api::DefaultApi, response_stream::Channel, project_public_id::Int64; includes_description=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_stories(_api, project_public_id; includes_description=includes_description, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_story_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{StoryComment},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_story_comment(_api::DefaultApi, story_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_story_comment_DefaultApi, "/api/v3/stories/{story-public-id}/comments", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Story Comment

Lists Comments associated with a Story

Params:
- story_public_id::Int64 (required)

Return: Vector{StoryComment}, OpenAPI.Clients.ApiResponse
"""
function list_story_comment(_api::DefaultApi, story_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_story_comment(_api, story_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_story_comment(_api::DefaultApi, response_stream::Channel, story_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_story_comment(_api, story_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_workflows_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Workflow},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_workflows(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_workflows_DefaultApi, "/api/v3/workflows", ["api_token", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Workflows

Returns a list of all Workflows in the Workspace.

Params:

Return: Vector{Workflow}, OpenAPI.Clients.ApiResponse
"""
function list_workflows(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_list_workflows(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_workflows(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_workflows(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchResults,
    Regex("^" * replace("400", "x"=>".") * "\$") => MaxSearchResultsExceededError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_search(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    OpenAPI.validate_param("query", "search", :minLength, query, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_DefaultApi, "/api/v3/search", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "detail", detail; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "next", next; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity_types", entity_types; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search

Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.

Params:
- query::String (required)
- page_size::Int64
- detail::String
- next::String
- entity_types::Vector{String}

Return: SearchResults, OpenAPI.Clients.ApiResponse
"""
function search(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search(_api::DefaultApi, response_stream::Channel, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_epics_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EpicSearchResults,
    Regex("^" * replace("400", "x"=>".") * "\$") => MaxSearchResultsExceededError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_search_epics(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    OpenAPI.validate_param("query", "search_epics", :minLength, query, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_epics_DefaultApi, "/api/v3/search/epics", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "detail", detail; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "next", next; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity_types", entity_types; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search Epics

Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.

Params:
- query::String (required)
- page_size::Int64
- detail::String
- next::String
- entity_types::Vector{String}

Return: EpicSearchResults, OpenAPI.Clients.ApiResponse
"""
function search_epics(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_epics(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_epics(_api::DefaultApi, response_stream::Channel, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_epics(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_iterations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IterationSearchResults,
    Regex("^" * replace("400", "x"=>".") * "\$") => MaxSearchResultsExceededError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_search_iterations(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    OpenAPI.validate_param("query", "search_iterations", :minLength, query, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_iterations_DefaultApi, "/api/v3/search/iterations", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "detail", detail; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "next", next; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity_types", entity_types; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search Iterations

Search Iterations lets you search Iterations based on desired parameters. Since ordering of results can change over time (due to search ranking decay, new Iterations being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.

Params:
- query::String (required)
- page_size::Int64
- detail::String
- next::String
- entity_types::Vector{String}

Return: IterationSearchResults, OpenAPI.Clients.ApiResponse
"""
function search_iterations(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_iterations(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_iterations(_api::DefaultApi, response_stream::Channel, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_iterations(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_milestones_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ObjectiveSearchResults,
    Regex("^" * replace("400", "x"=>".") * "\$") => MaxSearchResultsExceededError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_search_milestones(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    OpenAPI.validate_param("query", "search_milestones", :minLength, query, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_milestones_DefaultApi, "/api/v3/search/milestones", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "detail", detail; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "next", next; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity_types", entity_types; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search Milestones

Search Milestones lets you search Milestones based on desired parameters. Since ordering of results can change over time (due to search ranking decay, new Milestones being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.

Params:
- query::String (required)
- page_size::Int64
- detail::String
- next::String
- entity_types::Vector{String}

Return: ObjectiveSearchResults, OpenAPI.Clients.ApiResponse
"""
function search_milestones(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_milestones(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_milestones(_api::DefaultApi, response_stream::Channel, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_milestones(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_objectives_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ObjectiveSearchResults,
    Regex("^" * replace("400", "x"=>".") * "\$") => MaxSearchResultsExceededError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_search_objectives(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    OpenAPI.validate_param("query", "search_objectives", :minLength, query, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_objectives_DefaultApi, "/api/v3/search/objectives", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "detail", detail; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "next", next; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity_types", entity_types; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search Objectives

Search Objectives lets you search Objectives based on desired parameters. Since ordering of results can change over time (due to search ranking decay, new Objectives being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.

Params:
- query::String (required)
- page_size::Int64
- detail::String
- next::String
- entity_types::Vector{String}

Return: ObjectiveSearchResults, OpenAPI.Clients.ApiResponse
"""
function search_objectives(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_objectives(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_objectives(_api::DefaultApi, response_stream::Channel, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_objectives(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StorySearchResults,
    Regex("^" * replace("400", "x"=>".") * "\$") => MaxSearchResultsExceededError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_search_stories(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    OpenAPI.validate_param("query", "search_stories", :minLength, query, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_stories_DefaultApi, "/api/v3/search/stories", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "detail", detail; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "next", next; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity_types", entity_types; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search Stories

Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.

Params:
- query::String (required)
- page_size::Int64
- detail::String
- next::String
- entity_types::Vector{String}

Return: StorySearchResults, OpenAPI.Clients.ApiResponse
"""
function search_stories(_api::DefaultApi, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_stories(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_stories(_api::DefaultApi, response_stream::Channel, query::String; page_size=nothing, detail=nothing, next=nothing, entity_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_stories(_api, query; page_size=page_size, detail=detail, next=next, entity_types=entity_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_stories_old_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_search_stories_old(_api::DefaultApi, search_stories::SearchStories; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_stories_old_DefaultApi, "/api/v3/stories/search", ["api_token", ], search_stories)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search Stories (Old)

Search Stories lets you search Stories based on desired parameters.

Params:
- search_stories::SearchStories (required)

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function search_stories_old(_api::DefaultApi, search_stories::SearchStories; _mediaType=nothing)
    _ctx = _oacinternal_search_stories_old(_api, search_stories; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_stories_old(_api::DefaultApi, response_stream::Channel, search_stories::SearchStories; _mediaType=nothing)
    _ctx = _oacinternal_search_stories_old(_api, search_stories; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_story_history_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{History},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_story_history(_api::DefaultApi, story_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_story_history_DefaultApi, "/api/v3/stories/{story-public-id}/history", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Story History

Params:
- story_public_id::Int64 (required)

Return: Vector{History}, OpenAPI.Clients.ApiResponse
"""
function story_history(_api::DefaultApi, story_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_story_history(_api, story_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function story_history(_api::DefaultApi, response_stream::Channel, story_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_story_history(_api, story_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unlink_comment_thread_from_slack_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => StoryComment,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_unlink_comment_thread_from_slack(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unlink_comment_thread_from_slack_DefaultApi, "/api/v3/stories/{story-public-id}/comments/{comment-public-id}/unlink-from-slack", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Unlink Comment thread from Slack

Unlinks a Comment from its linked Slack thread (Comment replies and Slack replies will no longer be synced)

Params:
- story_public_id::Int64 (required)
- comment_public_id::Int64 (required)

Return: StoryComment, OpenAPI.Clients.ApiResponse
"""
function unlink_comment_thread_from_slack(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_unlink_comment_thread_from_slack(_api, story_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unlink_comment_thread_from_slack(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, comment_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_unlink_comment_thread_from_slack(_api, story_public_id, comment_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unlink_productboard_from_epic_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_unlink_productboard_from_epic(_api::DefaultApi, epic_public_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unlink_productboard_from_epic_DefaultApi, "/api/v3/epics/{epic-public-id}/unlink-productboard", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Unlink Productboard from Epic

This endpoint allows you to unlink a productboard epic.

Params:
- epic_public_id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function unlink_productboard_from_epic(_api::DefaultApi, epic_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_unlink_productboard_from_epic(_api, epic_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unlink_productboard_from_epic(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_unlink_productboard_from_epic(_api, epic_public_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_category_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Category,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_category(_api::DefaultApi, category_public_id::Int64, update_category_param::UpdateCategory; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_category_DefaultApi, "/api/v3/categories/{category-public-id}", ["api_token", ], update_category_param)
    OpenAPI.Clients.set_param(_ctx.path, "category-public-id", category_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Category

Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.

Params:
- category_public_id::Int64 (required)
- update_category_param::UpdateCategory (required)

Return: Category, OpenAPI.Clients.ApiResponse
"""
function update_category(_api::DefaultApi, category_public_id::Int64, update_category_param::UpdateCategory; _mediaType=nothing)
    _ctx = _oacinternal_update_category(_api, category_public_id, update_category_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_category(_api::DefaultApi, response_stream::Channel, category_public_id::Int64, update_category_param::UpdateCategory; _mediaType=nothing)
    _ctx = _oacinternal_update_category(_api, category_public_id, update_category_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_custom_field_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CustomField,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("409", "x"=>".") * "\$") => DataConflictError,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_custom_field(_api::DefaultApi, custom_field_public_id::String, update_custom_field_param::UpdateCustomField; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_custom_field_DefaultApi, "/api/v3/custom-fields/{custom-field-public-id}", ["api_token", ], update_custom_field_param)
    OpenAPI.Clients.set_param(_ctx.path, "custom-field-public-id", custom_field_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Custom Field

Update Custom Field can be used to update the definition of a Custom Field. The order of items in the 'values' collection is interpreted to be their ascending sort order.To delete an existing enum value, simply omit it from the 'values' collection. New enum values may be created inline by including an object in the 'values' collection having a 'value' entry with no 'id' (eg. {'value': 'myNewValue', 'color_key': 'green'}).

Params:
- custom_field_public_id::String (required)
- update_custom_field_param::UpdateCustomField (required)

Return: CustomField, OpenAPI.Clients.ApiResponse
"""
function update_custom_field(_api::DefaultApi, custom_field_public_id::String, update_custom_field_param::UpdateCustomField; _mediaType=nothing)
    _ctx = _oacinternal_update_custom_field(_api, custom_field_public_id, update_custom_field_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_custom_field(_api::DefaultApi, response_stream::Channel, custom_field_public_id::String, update_custom_field_param::UpdateCustomField; _mediaType=nothing)
    _ctx = _oacinternal_update_custom_field(_api, custom_field_public_id, update_custom_field_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_entity_template_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntityTemplate,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_entity_template(_api::DefaultApi, entity_template_public_id::String, update_entity_template_param::UpdateEntityTemplate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_entity_template_DefaultApi, "/api/v3/entity-templates/{entity-template-public-id}", ["api_token", ], update_entity_template_param)
    OpenAPI.Clients.set_param(_ctx.path, "entity-template-public-id", entity_template_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Entity Template

Update an entity template's name or its contents.

Params:
- entity_template_public_id::String (required)
- update_entity_template_param::UpdateEntityTemplate (required)

Return: EntityTemplate, OpenAPI.Clients.ApiResponse
"""
function update_entity_template(_api::DefaultApi, entity_template_public_id::String, update_entity_template_param::UpdateEntityTemplate; _mediaType=nothing)
    _ctx = _oacinternal_update_entity_template(_api, entity_template_public_id, update_entity_template_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_entity_template(_api::DefaultApi, response_stream::Channel, entity_template_public_id::String, update_entity_template_param::UpdateEntityTemplate; _mediaType=nothing)
    _ctx = _oacinternal_update_entity_template(_api, entity_template_public_id, update_entity_template_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_epic_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Epic,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_epic(_api::DefaultApi, epic_public_id::Int64, update_epic_param::UpdateEpic; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_epic_DefaultApi, "/api/v3/epics/{epic-public-id}", ["api_token", ], update_epic_param)
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Epic

Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Shortcut UI.

Params:
- epic_public_id::Int64 (required)
- update_epic_param::UpdateEpic (required)

Return: Epic, OpenAPI.Clients.ApiResponse
"""
function update_epic(_api::DefaultApi, epic_public_id::Int64, update_epic_param::UpdateEpic; _mediaType=nothing)
    _ctx = _oacinternal_update_epic(_api, epic_public_id, update_epic_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_epic(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64, update_epic_param::UpdateEpic; _mediaType=nothing)
    _ctx = _oacinternal_update_epic(_api, epic_public_id, update_epic_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_epic_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ThreadedComment,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_epic_comment(_api::DefaultApi, epic_public_id::Int64, comment_public_id::Int64, update_comment::UpdateComment; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_epic_comment_DefaultApi, "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}", ["api_token", ], update_comment)
    OpenAPI.Clients.set_param(_ctx.path, "epic-public-id", epic_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Epic Comment

This endpoint allows you to update a threaded Comment on an Epic.

Params:
- epic_public_id::Int64 (required)
- comment_public_id::Int64 (required)
- update_comment::UpdateComment (required)

Return: ThreadedComment, OpenAPI.Clients.ApiResponse
"""
function update_epic_comment(_api::DefaultApi, epic_public_id::Int64, comment_public_id::Int64, update_comment::UpdateComment; _mediaType=nothing)
    _ctx = _oacinternal_update_epic_comment(_api, epic_public_id, comment_public_id, update_comment; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_epic_comment(_api::DefaultApi, response_stream::Channel, epic_public_id::Int64, comment_public_id::Int64, update_comment::UpdateComment; _mediaType=nothing)
    _ctx = _oacinternal_update_epic_comment(_api, epic_public_id, comment_public_id, update_comment; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_file_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UploadedFile,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_file(_api::DefaultApi, file_public_id::Int64, update_file_param::UpdateFile; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_file_DefaultApi, "/api/v3/files/{file-public-id}", ["api_token", ], update_file_param)
    OpenAPI.Clients.set_param(_ctx.path, "file-public-id", file_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update File

Update File updates the properties of an UploadedFile (but not its content).

Params:
- file_public_id::Int64 (required)
- update_file_param::UpdateFile (required)

Return: UploadedFile, OpenAPI.Clients.ApiResponse
"""
function update_file(_api::DefaultApi, file_public_id::Int64, update_file_param::UpdateFile; _mediaType=nothing)
    _ctx = _oacinternal_update_file(_api, file_public_id, update_file_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_file(_api::DefaultApi, response_stream::Channel, file_public_id::Int64, update_file_param::UpdateFile; _mediaType=nothing)
    _ctx = _oacinternal_update_file(_api, file_public_id, update_file_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_group_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Group,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => UnusableEntitlementError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_group(_api::DefaultApi, group_public_id::String, update_group_param::UpdateGroup; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_group_DefaultApi, "/api/v3/groups/{group-public-id}", ["api_token", ], update_group_param)
    OpenAPI.Clients.set_param(_ctx.path, "group-public-id", group_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Group

Params:
- group_public_id::String (required)
- update_group_param::UpdateGroup (required)

Return: Group, OpenAPI.Clients.ApiResponse
"""
function update_group(_api::DefaultApi, group_public_id::String, update_group_param::UpdateGroup; _mediaType=nothing)
    _ctx = _oacinternal_update_group(_api, group_public_id, update_group_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_group(_api::DefaultApi, response_stream::Channel, group_public_id::String, update_group_param::UpdateGroup; _mediaType=nothing)
    _ctx = _oacinternal_update_group(_api, group_public_id, update_group_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_iteration_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Iteration,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_iteration(_api::DefaultApi, iteration_public_id::Int64, update_iteration_param::UpdateIteration; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_iteration_DefaultApi, "/api/v3/iterations/{iteration-public-id}", ["api_token", ], update_iteration_param)
    OpenAPI.Clients.set_param(_ctx.path, "iteration-public-id", iteration_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Iteration

Params:
- iteration_public_id::Int64 (required)
- update_iteration_param::UpdateIteration (required)

Return: Iteration, OpenAPI.Clients.ApiResponse
"""
function update_iteration(_api::DefaultApi, iteration_public_id::Int64, update_iteration_param::UpdateIteration; _mediaType=nothing)
    _ctx = _oacinternal_update_iteration(_api, iteration_public_id, update_iteration_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_iteration(_api::DefaultApi, response_stream::Channel, iteration_public_id::Int64, update_iteration_param::UpdateIteration; _mediaType=nothing)
    _ctx = _oacinternal_update_iteration(_api, iteration_public_id, update_iteration_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_key_result_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => KeyResult,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_key_result(_api::DefaultApi, key_result_public_id::String, update_key_result_param::UpdateKeyResult; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_key_result_DefaultApi, "/api/v3/key-results/{key-result-public-id}", ["api_token", ], update_key_result_param)
    OpenAPI.Clients.set_param(_ctx.path, "key-result-public-id", key_result_public_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Key Result

Update Key Result allows updating a Key Result's name or initial, observed, or target values.

Params:
- key_result_public_id::String (required)
- update_key_result_param::UpdateKeyResult (required)

Return: KeyResult, OpenAPI.Clients.ApiResponse
"""
function update_key_result(_api::DefaultApi, key_result_public_id::String, update_key_result_param::UpdateKeyResult; _mediaType=nothing)
    _ctx = _oacinternal_update_key_result(_api, key_result_public_id, update_key_result_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_key_result(_api::DefaultApi, response_stream::Channel, key_result_public_id::String, update_key_result_param::UpdateKeyResult; _mediaType=nothing)
    _ctx = _oacinternal_update_key_result(_api, key_result_public_id, update_key_result_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_label_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Label,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_label(_api::DefaultApi, label_public_id::Int64, update_label_param::UpdateLabel; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_label_DefaultApi, "/api/v3/labels/{label-public-id}", ["api_token", ], update_label_param)
    OpenAPI.Clients.set_param(_ctx.path, "label-public-id", label_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Label

Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.

Params:
- label_public_id::Int64 (required)
- update_label_param::UpdateLabel (required)

Return: Label, OpenAPI.Clients.ApiResponse
"""
function update_label(_api::DefaultApi, label_public_id::Int64, update_label_param::UpdateLabel; _mediaType=nothing)
    _ctx = _oacinternal_update_label(_api, label_public_id, update_label_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_label(_api::DefaultApi, response_stream::Channel, label_public_id::Int64, update_label_param::UpdateLabel; _mediaType=nothing)
    _ctx = _oacinternal_update_label(_api, label_public_id, update_label_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_linked_file_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LinkedFile,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_linked_file(_api::DefaultApi, linked_file_public_id::Int64, update_linked_file_param::UpdateLinkedFile; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_linked_file_DefaultApi, "/api/v3/linked-files/{linked-file-public-id}", ["api_token", ], update_linked_file_param)
    OpenAPI.Clients.set_param(_ctx.path, "linked-file-public-id", linked_file_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Linked File

Updated Linked File allows you to update properties of a previously attached Linked-File.

Params:
- linked_file_public_id::Int64 (required)
- update_linked_file_param::UpdateLinkedFile (required)

Return: LinkedFile, OpenAPI.Clients.ApiResponse
"""
function update_linked_file(_api::DefaultApi, linked_file_public_id::Int64, update_linked_file_param::UpdateLinkedFile; _mediaType=nothing)
    _ctx = _oacinternal_update_linked_file(_api, linked_file_public_id, update_linked_file_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_linked_file(_api::DefaultApi, response_stream::Channel, linked_file_public_id::Int64, update_linked_file_param::UpdateLinkedFile; _mediaType=nothing)
    _ctx = _oacinternal_update_linked_file(_api, linked_file_public_id, update_linked_file_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_milestone_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Milestone,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_milestone(_api::DefaultApi, milestone_public_id::Int64, update_milestone_param::UpdateMilestone; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_milestone_DefaultApi, "/api/v3/milestones/{milestone-public-id}", ["api_token", ], update_milestone_param)
    OpenAPI.Clients.set_param(_ctx.path, "milestone-public-id", milestone_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Milestone

(Deprecated: Use 'Update Objective') Update Milestone can be used to update Milestone properties.

Params:
- milestone_public_id::Int64 (required)
- update_milestone_param::UpdateMilestone (required)

Return: Milestone, OpenAPI.Clients.ApiResponse
"""
function update_milestone(_api::DefaultApi, milestone_public_id::Int64, update_milestone_param::UpdateMilestone; _mediaType=nothing)
    _ctx = _oacinternal_update_milestone(_api, milestone_public_id, update_milestone_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_milestone(_api::DefaultApi, response_stream::Channel, milestone_public_id::Int64, update_milestone_param::UpdateMilestone; _mediaType=nothing)
    _ctx = _oacinternal_update_milestone(_api, milestone_public_id, update_milestone_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_multiple_stories_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{StorySlim},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_multiple_stories(_api::DefaultApi, update_stories::UpdateStories; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_multiple_stories_DefaultApi, "/api/v3/stories/bulk", ["api_token", ], update_stories)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Multiple Stories

Update Multiple Stories allows you to make changes to numerous stories at once.

Params:
- update_stories::UpdateStories (required)

Return: Vector{StorySlim}, OpenAPI.Clients.ApiResponse
"""
function update_multiple_stories(_api::DefaultApi, update_stories::UpdateStories; _mediaType=nothing)
    _ctx = _oacinternal_update_multiple_stories(_api, update_stories; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_multiple_stories(_api::DefaultApi, response_stream::Channel, update_stories::UpdateStories; _mediaType=nothing)
    _ctx = _oacinternal_update_multiple_stories(_api, update_stories; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_objective_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Objective,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_objective(_api::DefaultApi, objective_public_id::Int64, update_objective_param::UpdateObjective; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_objective_DefaultApi, "/api/v3/objectives/{objective-public-id}", ["api_token", ], update_objective_param)
    OpenAPI.Clients.set_param(_ctx.path, "objective-public-id", objective_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Objective

Update Objective can be used to update Objective properties.

Params:
- objective_public_id::Int64 (required)
- update_objective_param::UpdateObjective (required)

Return: Objective, OpenAPI.Clients.ApiResponse
"""
function update_objective(_api::DefaultApi, objective_public_id::Int64, update_objective_param::UpdateObjective; _mediaType=nothing)
    _ctx = _oacinternal_update_objective(_api, objective_public_id, update_objective_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_objective(_api::DefaultApi, response_stream::Channel, objective_public_id::Int64, update_objective_param::UpdateObjective; _mediaType=nothing)
    _ctx = _oacinternal_update_objective(_api, objective_public_id, update_objective_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_project_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Project,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_project(_api::DefaultApi, project_public_id::Int64, update_project_param::UpdateProject; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_project_DefaultApi, "/api/v3/projects/{project-public-id}", ["api_token", ], update_project_param)
    OpenAPI.Clients.set_param(_ctx.path, "project-public-id", project_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Project

Update Project can be used to change properties of a Project.

Params:
- project_public_id::Int64 (required)
- update_project_param::UpdateProject (required)

Return: Project, OpenAPI.Clients.ApiResponse
"""
function update_project(_api::DefaultApi, project_public_id::Int64, update_project_param::UpdateProject; _mediaType=nothing)
    _ctx = _oacinternal_update_project(_api, project_public_id, update_project_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_project(_api::DefaultApi, response_stream::Channel, project_public_id::Int64, update_project_param::UpdateProject; _mediaType=nothing)
    _ctx = _oacinternal_update_project(_api, project_public_id, update_project_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_story_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Story,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_story(_api::DefaultApi, story_public_id::Int64, update_story_param::UpdateStory; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_story_DefaultApi, "/api/v3/stories/{story-public-id}", ["api_token", ], update_story_param)
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Story

Update Story can be used to update Story properties.

Params:
- story_public_id::Int64 (required)
- update_story_param::UpdateStory (required)

Return: Story, OpenAPI.Clients.ApiResponse
"""
function update_story(_api::DefaultApi, story_public_id::Int64, update_story_param::UpdateStory; _mediaType=nothing)
    _ctx = _oacinternal_update_story(_api, story_public_id, update_story_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_story(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, update_story_param::UpdateStory; _mediaType=nothing)
    _ctx = _oacinternal_update_story(_api, story_public_id, update_story_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_story_comment_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StoryComment,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_story_comment(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64, update_story_comment_param::UpdateStoryComment; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_story_comment_DefaultApi, "/api/v3/stories/{story-public-id}/comments/{comment-public-id}", ["api_token", ], update_story_comment_param)
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "comment-public-id", comment_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Story Comment

Update Comment replaces the text of the existing Comment.

Params:
- story_public_id::Int64 (required)
- comment_public_id::Int64 (required)
- update_story_comment_param::UpdateStoryComment (required)

Return: StoryComment, OpenAPI.Clients.ApiResponse
"""
function update_story_comment(_api::DefaultApi, story_public_id::Int64, comment_public_id::Int64, update_story_comment_param::UpdateStoryComment; _mediaType=nothing)
    _ctx = _oacinternal_update_story_comment(_api, story_public_id, comment_public_id, update_story_comment_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_story_comment(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, comment_public_id::Int64, update_story_comment_param::UpdateStoryComment; _mediaType=nothing)
    _ctx = _oacinternal_update_story_comment(_api, story_public_id, comment_public_id, update_story_comment_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_story_link_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StoryLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_story_link(_api::DefaultApi, story_link_public_id::Int64, update_story_link_param::UpdateStoryLink; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_story_link_DefaultApi, "/api/v3/story-links/{story-link-public-id}", ["api_token", ], update_story_link_param)
    OpenAPI.Clients.set_param(_ctx.path, "story-link-public-id", story_link_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Story Link

Updates the stories and/or the relationship for the given Story Link.

Params:
- story_link_public_id::Int64 (required)
- update_story_link_param::UpdateStoryLink (required)

Return: StoryLink, OpenAPI.Clients.ApiResponse
"""
function update_story_link(_api::DefaultApi, story_link_public_id::Int64, update_story_link_param::UpdateStoryLink; _mediaType=nothing)
    _ctx = _oacinternal_update_story_link(_api, story_link_public_id, update_story_link_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_story_link(_api::DefaultApi, response_stream::Channel, story_link_public_id::Int64, update_story_link_param::UpdateStoryLink; _mediaType=nothing)
    _ctx = _oacinternal_update_story_link(_api, story_link_public_id, update_story_link_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_task_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Task,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_task(_api::DefaultApi, story_public_id::Int64, task_public_id::Int64, update_task_param::UpdateTask; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_task_DefaultApi, "/api/v3/stories/{story-public-id}/tasks/{task-public-id}", ["api_token", ], update_task_param)
    OpenAPI.Clients.set_param(_ctx.path, "story-public-id", story_public_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "task-public-id", task_public_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Task

Update Task can be used to update Task properties.

Params:
- story_public_id::Int64 (required)
- task_public_id::Int64 (required)
- update_task_param::UpdateTask (required)

Return: Task, OpenAPI.Clients.ApiResponse
"""
function update_task(_api::DefaultApi, story_public_id::Int64, task_public_id::Int64, update_task_param::UpdateTask; _mediaType=nothing)
    _ctx = _oacinternal_update_task(_api, story_public_id, task_public_id, update_task_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_task(_api::DefaultApi, response_stream::Channel, story_public_id::Int64, task_public_id::Int64, update_task_param::UpdateTask; _mediaType=nothing)
    _ctx = _oacinternal_update_task(_api, story_public_id, task_public_id, update_task_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_files_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Vector{UploadedFile},
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_upload_files(_api::DefaultApi, file0::Vector{UInt8}; story_id=nothing, file1=nothing, file2=nothing, file3=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_files_DefaultApi, "/api/v3/files", ["api_token", ])
    OpenAPI.Clients.set_param(_ctx.form, "story_id", story_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.file, "file0", file0)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.file, "file1", file1)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.file, "file2", file2)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.file, "file3", file3)  # type Vector{UInt8}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload Files

Upload Files uploads one or many files and optionally associates them with a story.    Use the multipart/form-data content-type to upload.    Each `file` key should contain a separate file.    Each UploadedFile's name comes from the Content-Disposition header \"filename\" directive for that field.

Params:
- file0::String (required)
- story_id::Int64
- file1::String
- file2::String
- file3::String

Return: Vector{UploadedFile}, OpenAPI.Clients.ApiResponse
"""
function upload_files(_api::DefaultApi, file0::String; story_id=nothing, file1=nothing, file2=nothing, file3=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upload_files(_api, file0; story_id=story_id, file1=file1, file2=file2, file3=file3, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_files(_api::DefaultApi, response_stream::Channel, file0::String; story_id=nothing, file1=nothing, file2=nothing, file3=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upload_files(_api, file0; story_id=story_id, file1=file1, file2=file2, file3=file3, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_category
export create_entity_template
export create_epic
export create_epic_comment
export create_epic_comment_comment
export create_group
export create_iteration
export create_label
export create_linked_file
export create_milestone
export create_multiple_stories
export create_objective
export create_project
export create_story
export create_story_comment
export create_story_from_template
export create_story_link
export create_story_reaction
export create_task
export delete_category
export delete_custom_field
export delete_entity_template
export delete_epic
export delete_epic_comment
export delete_file
export delete_iteration
export delete_label
export delete_linked_file
export delete_milestone
export delete_multiple_stories
export delete_objective
export delete_project
export delete_story
export delete_story_comment
export delete_story_link
export delete_story_reaction
export delete_task
export disable_iterations
export disable_story_templates
export enable_iterations
export enable_story_templates
export get_category
export get_current_member_info
export get_custom_field
export get_entity_template
export get_epic
export get_epic_comment
export get_epic_workflow
export get_external_link_stories
export get_file
export get_group
export get_iteration
export get_key_result
export get_label
export get_linked_file
export get_member
export get_milestone
export get_objective
export get_project
export get_repository
export get_story
export get_story_comment
export get_story_link
export get_task
export get_workflow
export list_categories
export list_category_milestones
export list_category_objectives
export list_custom_fields
export list_entity_templates
export list_epic_comments
export list_epic_stories
export list_epics
export list_files
export list_group_stories
export list_groups
export list_iteration_stories
export list_iterations
export list_label_epics
export list_label_stories
export list_labels
export list_linked_files
export list_members
export list_milestone_epics
export list_milestones
export list_objective_epics
export list_objectives
export list_projects
export list_repositories
export list_stories
export list_story_comment
export list_workflows
export search
export search_epics
export search_iterations
export search_milestones
export search_objectives
export search_stories
export search_stories_old
export story_history
export unlink_comment_thread_from_slack
export unlink_productboard_from_epic
export update_category
export update_custom_field
export update_entity_template
export update_epic
export update_epic_comment
export update_file
export update_group
export update_iteration
export update_key_result
export update_label
export update_linked_file
export update_milestone
export update_multiple_stories
export update_objective
export update_project
export update_story
export update_story_comment
export update_story_link
export update_task
export upload_files
